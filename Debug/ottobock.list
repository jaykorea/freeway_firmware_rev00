
ottobock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce24  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  0800cfd4  0800cfd4  0001cfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d848  0800d848  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d848  0800d848  0001d848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d850  0800d850  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800d850  0800d850  0001d850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d85c  0800d85c  0001d85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00001f64  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001fe4  20001fe4  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024ea4  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f03  00000000  00000000  00044f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a90  00000000  00000000  00048e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001968  00000000  00000000  0004a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b463  00000000  00000000  0004c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee2a  00000000  00000000  000776b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fae86  00000000  00000000  000964dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00191363  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b84  00000000  00000000  001913b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cfbc 	.word	0x0800cfbc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800cfbc 	.word	0x0800cfbc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b974 	b.w	8000e4c <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	4604      	mov	r4, r0
 8000b84:	468e      	mov	lr, r1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d14d      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b8a:	428a      	cmp	r2, r1
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	d969      	bls.n	8000c64 <__udivmoddi4+0xe8>
 8000b90:	fab2 f282 	clz	r2, r2
 8000b94:	b152      	cbz	r2, 8000bac <__udivmoddi4+0x30>
 8000b96:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9a:	f1c2 0120 	rsb	r1, r2, #32
 8000b9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba6:	ea41 0e03 	orr.w	lr, r1, r3
 8000baa:	4094      	lsls	r4, r2
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	0c21      	lsrs	r1, r4, #16
 8000bb2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb6:	fa1f f78c 	uxth.w	r7, ip
 8000bba:	fb08 e316 	mls	r3, r8, r6, lr
 8000bbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc2:	fb06 f107 	mul.w	r1, r6, r7
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd2:	f080 811f 	bcs.w	8000e14 <__udivmoddi4+0x298>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 811c 	bls.w	8000e14 <__udivmoddi4+0x298>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 f707 	mul.w	r7, r0, r7
 8000bf4:	42a7      	cmp	r7, r4
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x92>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c00:	f080 810a 	bcs.w	8000e18 <__udivmoddi4+0x29c>
 8000c04:	42a7      	cmp	r7, r4
 8000c06:	f240 8107 	bls.w	8000e18 <__udivmoddi4+0x29c>
 8000c0a:	4464      	add	r4, ip
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	1be4      	subs	r4, r4, r7
 8000c14:	2600      	movs	r6, #0
 8000c16:	b11d      	cbz	r5, 8000c20 <__udivmoddi4+0xa4>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0xc2>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80ef 	beq.w	8000e0e <__udivmoddi4+0x292>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x160>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xd4>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80f9 	bhi.w	8000e42 <__udivmoddi4+0x2c6>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0303 	sbc.w	r3, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	469e      	mov	lr, r3
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e0      	beq.n	8000c20 <__udivmoddi4+0xa4>
 8000c5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c62:	e7dd      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000c64:	b902      	cbnz	r2, 8000c68 <__udivmoddi4+0xec>
 8000c66:	deff      	udf	#255	; 0xff
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	f040 8092 	bne.w	8000d96 <__udivmoddi4+0x21a>
 8000c72:	eba1 010c 	sub.w	r1, r1, ip
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f fe8c 	uxth.w	lr, ip
 8000c7e:	2601      	movs	r6, #1
 8000c80:	0c20      	lsrs	r0, r4, #16
 8000c82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c86:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8e:	fb0e f003 	mul.w	r0, lr, r3
 8000c92:	4288      	cmp	r0, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x12c>
 8000c96:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x12a>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f200 80cb 	bhi.w	8000e3c <__udivmoddi4+0x2c0>
 8000ca6:	4643      	mov	r3, r8
 8000ca8:	1a09      	subs	r1, r1, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x156>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x154>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 80bb 	bhi.w	8000e46 <__udivmoddi4+0x2ca>
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	eba4 040e 	sub.w	r4, r4, lr
 8000cd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cda:	e79c      	b.n	8000c16 <__udivmoddi4+0x9a>
 8000cdc:	f1c6 0720 	rsb	r7, r6, #32
 8000ce0:	40b3      	lsls	r3, r6
 8000ce2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cea:	fa20 f407 	lsr.w	r4, r0, r7
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	40f9      	lsrs	r1, r7
 8000cf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d02:	0c20      	lsrs	r0, r4, #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fb09 1118 	mls	r1, r9, r8, r1
 8000d0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d10:	fb08 f00e 	mul.w	r0, r8, lr
 8000d14:	4288      	cmp	r0, r1
 8000d16:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b8>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d24:	f080 8088 	bcs.w	8000e38 <__udivmoddi4+0x2bc>
 8000d28:	4288      	cmp	r0, r1
 8000d2a:	f240 8085 	bls.w	8000e38 <__udivmoddi4+0x2bc>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d48:	458e      	cmp	lr, r1
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1e2>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d54:	d26c      	bcs.n	8000e30 <__udivmoddi4+0x2b4>
 8000d56:	458e      	cmp	lr, r1
 8000d58:	d96a      	bls.n	8000e30 <__udivmoddi4+0x2b4>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4461      	add	r1, ip
 8000d5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d62:	fba0 9402 	umull	r9, r4, r0, r2
 8000d66:	eba1 010e 	sub.w	r1, r1, lr
 8000d6a:	42a1      	cmp	r1, r4
 8000d6c:	46c8      	mov	r8, r9
 8000d6e:	46a6      	mov	lr, r4
 8000d70:	d356      	bcc.n	8000e20 <__udivmoddi4+0x2a4>
 8000d72:	d053      	beq.n	8000e1c <__udivmoddi4+0x2a0>
 8000d74:	b15d      	cbz	r5, 8000d8e <__udivmoddi4+0x212>
 8000d76:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d82:	fa22 f306 	lsr.w	r3, r2, r6
 8000d86:	40f1      	lsrs	r1, r6
 8000d88:	431f      	orrs	r7, r3
 8000d8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8e:	2600      	movs	r6, #0
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	f1c2 0320 	rsb	r3, r2, #32
 8000d9a:	40d8      	lsrs	r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	fa21 f303 	lsr.w	r3, r1, r3
 8000da4:	4091      	lsls	r1, r2
 8000da6:	4301      	orrs	r1, r0
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	fa1f fe8c 	uxth.w	lr, ip
 8000db0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db4:	fb07 3610 	mls	r6, r7, r0, r3
 8000db8:	0c0b      	lsrs	r3, r1, #16
 8000dba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x260>
 8000dca:	eb1c 0303 	adds.w	r3, ip, r3
 8000dce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd2:	d22f      	bcs.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd4:	429e      	cmp	r6, r3
 8000dd6:	d92d      	bls.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1b9b      	subs	r3, r3, r6
 8000dde:	b289      	uxth	r1, r1
 8000de0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de4:	fb07 3316 	mls	r3, r7, r6, r3
 8000de8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dec:	fb06 f30e 	mul.w	r3, r6, lr
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x28a>
 8000df4:	eb1c 0101 	adds.w	r1, ip, r1
 8000df8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dfc:	d216      	bcs.n	8000e2c <__udivmoddi4+0x2b0>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d914      	bls.n	8000e2c <__udivmoddi4+0x2b0>
 8000e02:	3e02      	subs	r6, #2
 8000e04:	4461      	add	r1, ip
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e0c:	e738      	b.n	8000c80 <__udivmoddi4+0x104>
 8000e0e:	462e      	mov	r6, r5
 8000e10:	4628      	mov	r0, r5
 8000e12:	e705      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000e14:	4606      	mov	r6, r0
 8000e16:	e6e3      	b.n	8000be0 <__udivmoddi4+0x64>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6f8      	b.n	8000c0e <__udivmoddi4+0x92>
 8000e1c:	454b      	cmp	r3, r9
 8000e1e:	d2a9      	bcs.n	8000d74 <__udivmoddi4+0x1f8>
 8000e20:	ebb9 0802 	subs.w	r8, r9, r2
 8000e24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e28:	3801      	subs	r0, #1
 8000e2a:	e7a3      	b.n	8000d74 <__udivmoddi4+0x1f8>
 8000e2c:	4646      	mov	r6, r8
 8000e2e:	e7ea      	b.n	8000e06 <__udivmoddi4+0x28a>
 8000e30:	4620      	mov	r0, r4
 8000e32:	e794      	b.n	8000d5e <__udivmoddi4+0x1e2>
 8000e34:	4640      	mov	r0, r8
 8000e36:	e7d1      	b.n	8000ddc <__udivmoddi4+0x260>
 8000e38:	46d0      	mov	r8, sl
 8000e3a:	e77b      	b.n	8000d34 <__udivmoddi4+0x1b8>
 8000e3c:	3b02      	subs	r3, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	e732      	b.n	8000ca8 <__udivmoddi4+0x12c>
 8000e42:	4630      	mov	r0, r6
 8000e44:	e709      	b.n	8000c5a <__udivmoddi4+0xde>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e742      	b.n	8000cd2 <__udivmoddi4+0x156>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart6);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e7e:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 f91f 	bl	80010dc <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8000ea6:	b480      	push	{r7}
 8000ea8:	b085      	sub	sp, #20
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ec4:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000ecc:	89fa      	ldrh	r2, [r7, #14]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d102      	bne.n	8000ed8 <_ZN14BufferedSerial4readEv+0x32>
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e016      	b.n	8000f06 <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	b291      	uxth	r1, r2
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	f8a2 1804 	strh.w	r1, [r2, #2052]	; 0x804
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	791b      	ldrb	r3, [r3, #4]
 8000ef0:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804

  return c;
 8000f04:	68bb      	ldr	r3, [r7, #8]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000f24:	461a      	mov	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2e:	da25      	bge.n	8000f7c <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3304      	adds	r3, #4
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00b fea1 	bl	800cc8c <memcpy>
    tx_head += length; // ) & tx_buf_mask
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	4413      	add	r3, r2
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d921      	bls.n	8000fb2 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
 8000f7a:	e01a      	b.n	8000fb2 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00b fe80 	bl	800cc8c <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d905      	bls.n	8000fa8 <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
    tx_head = length;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
  }

  // Send data:
  flush_tx_buffer();
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f000 f804 	bl	8000fc0 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00f      	beq.n	8000ff2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d107      	bne.n	8000ff2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
     tx_tail = 0;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b20      	cmp	r3, #32
 8000ffe:	d10b      	bne.n	8001018 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 800100c:	429a      	cmp	r2, r3
 800100e:	d003      	beq.n	8001018 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8001010:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 800101c:	2300      	movs	r3, #0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d156      	bne.n	80010d0 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
 8001034:	429a      	cmp	r2, r3
 8001036:	d103      	bne.n	8001040 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808

  // Send data behind head:
  if (tx_tail < tx_head) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 800104c:	429a      	cmp	r2, r3
 800104e:	d21c      	bcs.n	800108a <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 800106a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	3304      	adds	r3, #4
 8001074:	89ba      	ldrh	r2, [r7, #12]
 8001076:	4619      	mov	r1, r3
 8001078:	f009 fbd4 	bl	800a824 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8001088:	e01e      	b.n	80010c8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 80010a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	3304      	adds	r3, #4
 80010ae:	89fa      	ldrh	r2, [r7, #14]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f009 fbb7 	bl	800a824 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010bc:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
    tx_tail = 0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
  }

  mutex = false;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e000      	b.n	80010d2 <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 80010d0:	bf00      	nop
}
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200008a8 	.word	0x200008a8

080010dc <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3304      	adds	r3, #4
 80010ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f0:	4619      	mov	r1, r3
 80010f2:	f009 fc15 	bl	800a920 <HAL_UART_Receive_DMA>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681c      	ldr	r4, [r3, #0]
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <HAL_UART_TxCpltCallback+0x34>)
 8001126:	f7ff ffea 	bl	80010fe <_ZN14BufferedSerial10get_handleEv>
 800112a:	4603      	mov	r3, r0
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	429c      	cmp	r4, r3
 8001130:	bf0c      	ite	eq
 8001132:	2301      	moveq	r3, #1
 8001134:	2300      	movne	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <HAL_UART_TxCpltCallback+0x34>)
 800113e:	f7ff ff3f 	bl	8000fc0 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	bf00      	nop
 800114c:	2000009c 	.word	0x2000009c

08001150 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <HAL_UART_RxCpltCallback+0x18>)
 800115a:	f7ff ffbf 	bl	80010dc <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000009c 	.word	0x2000009c

0800116c <_Z41__static_initialization_and_destruction_0ii>:
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d108      	bne.n	800118e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001182:	4293      	cmp	r3, r2
 8001184:	d103      	bne.n	800118e <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart6);
 8001186:	4904      	ldr	r1, [pc, #16]	; (8001198 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800118a:	f7ff fe61 	bl	8000e50 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000d4c 	.word	0x20000d4c
 800119c:	2000009c 	.word	0x2000009c

080011a0 <_GLOBAL__sub_I_buff_serial>:
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ffdf 	bl	800116c <_Z41__static_initialization_and_destruction_0ii>
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	0a5a      	lsrs	r2, r3, #9
 80011c0:	490f      	ldr	r1, [pc, #60]	; (8001200 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80011c2:	fba1 1202 	umull	r1, r2, r1, r2
 80011c6:	09d2      	lsrs	r2, r2, #7
 80011c8:	490e      	ldr	r1, [pc, #56]	; (8001204 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80011ca:	fb01 f202 	mul.w	r2, r1, r2
 80011ce:	1a9b      	subs	r3, r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	0a5b      	lsrs	r3, r3, #9
 80011d8:	4a09      	ldr	r2, [pc, #36]	; (8001200 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80011da:	fba2 2303 	umull	r2, r3, r2, r3
 80011de:	09db      	lsrs	r3, r3, #7
 80011e0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	441a      	add	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	601a      	str	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	00044b83 	.word	0x00044b83
 8001204:	3b9aca00 	.word	0x3b9aca00

08001208 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM4_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM3)  // if the interrupt source is channel1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a8e      	ldr	r2, [pc, #568]	; (8001450 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001216:	4293      	cmp	r3, r2
 8001218:	f040 80b7 	bne.w	800138a <HAL_TIM_IC_CaptureCallback+0x182>
	{
		if (Is_First_Captured_c1==0) // if the first value is not captured
 800121c:	4b8d      	ldr	r3, [pc, #564]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d120      	bne.n	8001266 <HAL_TIM_IC_CaptureCallback+0x5e>
		{
			IC_Val1_c1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001224:	2100      	movs	r1, #0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f008 fc54 	bl	8009ad4 <HAL_TIM_ReadCapturedValue>
 800122c:	4603      	mov	r3, r0
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f928 	bl	8000484 <__aeabi_ui2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4987      	ldr	r1, [pc, #540]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x250>)
 800123a:	e9c1 2300 	strd	r2, r3, [r1]
			Is_First_Captured_c1 = 1;  // set the first captured as true
 800123e:	4b85      	ldr	r3, [pc, #532]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6a1a      	ldr	r2, [r3, #32]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 020a 	bic.w	r2, r2, #10
 8001252:	621a      	str	r2, [r3, #32]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6a1a      	ldr	r2, [r3, #32]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0202 	orr.w	r2, r2, #2
 8001262:	621a      	str	r2, [r3, #32]
 8001264:	e091      	b.n	800138a <HAL_TIM_IC_CaptureCallback+0x182>
		}

		else if (Is_First_Captured_c1==1)   // if the first is already captured
 8001266:	4b7b      	ldr	r3, [pc, #492]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	f040 808d 	bne.w	800138a <HAL_TIM_IC_CaptureCallback+0x182>
		{
			IC_Val2_c1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001270:	2100      	movs	r1, #0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f008 fc2e 	bl	8009ad4 <HAL_TIM_ReadCapturedValue>
 8001278:	4603      	mov	r3, r0
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f902 	bl	8000484 <__aeabi_ui2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4975      	ldr	r1, [pc, #468]	; (800145c <HAL_TIM_IC_CaptureCallback+0x254>)
 8001286:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2_c1 > IC_Val1_c1)
 8001292:	4b72      	ldr	r3, [pc, #456]	; (800145c <HAL_TIM_IC_CaptureCallback+0x254>)
 8001294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001298:	4b6f      	ldr	r3, [pc, #444]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x250>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff fbfb 	bl	8000a98 <__aeabi_dcmpgt>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00d      	beq.n	80012c4 <HAL_TIM_IC_CaptureCallback+0xbc>
			{
				Difference_c1 = IC_Val2_c1-IC_Val1_c1;
 80012a8:	4b6c      	ldr	r3, [pc, #432]	; (800145c <HAL_TIM_IC_CaptureCallback+0x254>)
 80012aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ae:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7fe ffa8 	bl	8000208 <__aeabi_dsub>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4968      	ldr	r1, [pc, #416]	; (8001460 <HAL_TIM_IC_CaptureCallback+0x258>)
 80012be:	e9c1 2300 	strd	r2, r3, [r1]
 80012c2:	e020      	b.n	8001306 <HAL_TIM_IC_CaptureCallback+0xfe>
			}

			else if (IC_Val1_c1 > IC_Val2_c1)
 80012c4:	4b64      	ldr	r3, [pc, #400]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <HAL_TIM_IC_CaptureCallback+0x254>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff fbe2 	bl	8000a98 <__aeabi_dcmpgt>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d015      	beq.n	8001306 <HAL_TIM_IC_CaptureCallback+0xfe>
			{
				Difference_c1 = (0xffff - IC_Val1_c1) + IC_Val2_c1;
 80012da:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	a157      	add	r1, pc, #348	; (adr r1, 8001440 <HAL_TIM_IC_CaptureCallback+0x238>)
 80012e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012e6:	f7fe ff8f 	bl	8000208 <__aeabi_dsub>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	4b5a      	ldr	r3, [pc, #360]	; (800145c <HAL_TIM_IC_CaptureCallback+0x254>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7fe ff88 	bl	800020c <__adddf3>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4957      	ldr	r1, [pc, #348]	; (8001460 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001302:	e9c1 2300 	strd	r2, r3, [r1]
			}

			Distance_c1 = Difference_c1 * .034/2;
 8001306:	4b56      	ldr	r3, [pc, #344]	; (8001460 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800130c:	a34e      	add	r3, pc, #312	; (adr r3, 8001448 <HAL_TIM_IC_CaptureCallback+0x240>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff f931 	bl	8000578 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001326:	f7ff fa51 	bl	80007cc <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	494d      	ldr	r1, [pc, #308]	; (8001464 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001330:	e9c1 2300 	strd	r2, r3, [r1]
			if (Distance_c1 <= 3.0) Distance_c1 = 0.0;
 8001334:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001340:	f7ff fb96 	bl	8000a70 <__aeabi_dcmple>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_TIM_IC_CaptureCallback+0x150>
 800134a:	4946      	ldr	r1, [pc, #280]	; (8001464 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e9c1 2300 	strd	r2, r3, [r1]
			Is_First_Captured_c1 = 0; // set it back to false
 8001358:	4b3e      	ldr	r3, [pc, #248]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a1a      	ldr	r2, [r3, #32]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 020a 	bic.w	r2, r2, #10
 800136c:	621a      	str	r2, [r3, #32]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a12      	ldr	r2, [r2, #32]
 8001378:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <HAL_TIM_IC_CaptureCallback+0x264>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	4b3a      	ldr	r3, [pc, #232]	; (800146c <HAL_TIM_IC_CaptureCallback+0x264>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0202 	bic.w	r2, r2, #2
 8001388:	60da      	str	r2, [r3, #12]
		}
	}

	if (htim->Instance == TIM4)  // if the interrupt source is channel1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a38      	ldr	r2, [pc, #224]	; (8001470 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001390:	4293      	cmp	r3, r2
 8001392:	f040 80da 	bne.w	800154a <HAL_TIM_IC_CaptureCallback+0x342>
	{
		if (Is_First_Captured_c3==0) // if the first value is not captured
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d120      	bne.n	80013e0 <HAL_TIM_IC_CaptureCallback+0x1d8>
		{
			IC_Val1_c3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800139e:	2100      	movs	r1, #0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f008 fb97 	bl	8009ad4 <HAL_TIM_ReadCapturedValue>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f86b 	bl	8000484 <__aeabi_ui2d>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4931      	ldr	r1, [pc, #196]	; (8001478 <HAL_TIM_IC_CaptureCallback+0x270>)
 80013b4:	e9c1 2300 	strd	r2, r3, [r1]
			Is_First_Captured_c3 = 1;  // set the first captured as true
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6a1a      	ldr	r2, [r3, #32]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 020a 	bic.w	r2, r2, #10
 80013cc:	621a      	str	r2, [r3, #32]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0202 	orr.w	r2, r2, #2
 80013dc:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 80013de:	e0b4      	b.n	800154a <HAL_TIM_IC_CaptureCallback+0x342>
		else if (Is_First_Captured_c3==1)   // if the first is already captured
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	f040 80b0 	bne.w	800154a <HAL_TIM_IC_CaptureCallback+0x342>
			IC_Val2_c3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80013ea:	2100      	movs	r1, #0
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f008 fb71 	bl	8009ad4 <HAL_TIM_ReadCapturedValue>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f845 	bl	8000484 <__aeabi_ui2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	491f      	ldr	r1, [pc, #124]	; (800147c <HAL_TIM_IC_CaptureCallback+0x274>)
 8001400:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_c3 > IC_Val1_c3)
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_TIM_IC_CaptureCallback+0x274>)
 800140e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fb3e 	bl	8000a98 <__aeabi_dcmpgt>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d030      	beq.n	8001484 <HAL_TIM_IC_CaptureCallback+0x27c>
				Difference_c3 = IC_Val2_c3-IC_Val1_c3;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_TIM_IC_CaptureCallback+0x274>)
 8001424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_TIM_IC_CaptureCallback+0x270>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7fe feeb 	bl	8000208 <__aeabi_dsub>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4912      	ldr	r1, [pc, #72]	; (8001480 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001438:	e9c1 2300 	strd	r2, r3, [r1]
 800143c:	e043      	b.n	80014c6 <HAL_TIM_IC_CaptureCallback+0x2be>
 800143e:	bf00      	nop
 8001440:	00000000 	.word	0x00000000
 8001444:	40efffe0 	.word	0x40efffe0
 8001448:	b020c49c 	.word	0xb020c49c
 800144c:	3fa16872 	.word	0x3fa16872
 8001450:	40000400 	.word	0x40000400
 8001454:	20001380 	.word	0x20001380
 8001458:	20001368 	.word	0x20001368
 800145c:	20001370 	.word	0x20001370
 8001460:	20001378 	.word	0x20001378
 8001464:	20001388 	.word	0x20001388
 8001468:	40080000 	.word	0x40080000
 800146c:	20000c18 	.word	0x20000c18
 8001470:	40000800 	.word	0x40000800
 8001474:	200013a8 	.word	0x200013a8
 8001478:	20001390 	.word	0x20001390
 800147c:	20001398 	.word	0x20001398
 8001480:	200013a0 	.word	0x200013a0
			else if (IC_Val1_c3 > IC_Val2_c3)
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x360>)
 8001486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_TIM_IC_CaptureCallback+0x364>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff fb02 	bl	8000a98 <__aeabi_dcmpgt>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d015      	beq.n	80014c6 <HAL_TIM_IC_CaptureCallback+0x2be>
				Difference_c3 = (0xffff - IC_Val1_c3) + IC_Val2_c3;
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x360>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	a12d      	add	r1, pc, #180	; (adr r1, 8001558 <HAL_TIM_IC_CaptureCallback+0x350>)
 80014a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014a6:	f7fe feaf 	bl	8000208 <__aeabi_dsub>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_TIM_IC_CaptureCallback+0x364>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7fe fea8 	bl	800020c <__adddf3>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	492b      	ldr	r1, [pc, #172]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x368>)
 80014c2:	e9c1 2300 	strd	r2, r3, [r1]
			Distance_c3 = Difference_c3 * .034/2;
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x368>)
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	a324      	add	r3, pc, #144	; (adr r3, 8001560 <HAL_TIM_IC_CaptureCallback+0x358>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f851 	bl	8000578 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e6:	f7ff f971 	bl	80007cc <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4921      	ldr	r1, [pc, #132]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x36c>)
 80014f0:	e9c1 2300 	strd	r2, r3, [r1]
			if (Distance_c3 <= 3.0) Distance_c3 = 0.0;
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x36c>)
 80014f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001500:	f7ff fab6 	bl	8000a70 <__aeabi_dcmple>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <HAL_TIM_IC_CaptureCallback+0x310>
 800150a:	491a      	ldr	r1, [pc, #104]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x36c>)
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9c1 2300 	strd	r2, r3, [r1]
			Is_First_Captured_c3 = 0; // set it back to false
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_TIM_IC_CaptureCallback+0x374>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a1a      	ldr	r2, [r3, #32]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 020a 	bic.w	r2, r2, #10
 800152c:	621a      	str	r2, [r3, #32]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a12      	ldr	r2, [r2, #32]
 8001538:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_TIM_IC_CaptureCallback+0x378>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0202 	bic.w	r2, r2, #2
 8001548:	60da      	str	r2, [r3, #12]
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	f3af 8000 	nop.w
 8001558:	00000000 	.word	0x00000000
 800155c:	40efffe0 	.word	0x40efffe0
 8001560:	b020c49c 	.word	0xb020c49c
 8001564:	3fa16872 	.word	0x3fa16872
 8001568:	20001390 	.word	0x20001390
 800156c:	20001398 	.word	0x20001398
 8001570:	200013a0 	.word	0x200013a0
 8001574:	200013b0 	.word	0x200013b0
 8001578:	40080000 	.word	0x40080000
 800157c:	200013a8 	.word	0x200013a8
 8001580:	20000c60 	.word	0x20000c60

08001584 <delay_r>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_r (uint16_t time)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <delay_r+0x30>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8001596:	bf00      	nop
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <delay_r+0x30>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3f9      	bcc.n	8001598 <delay_r+0x14>
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000c18 	.word	0x20000c18

080015b8 <delay_l>:

void delay_l (uint16_t time)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <delay_l+0x30>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 80015ca:	bf00      	nop
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <delay_l+0x30>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3f9      	bcc.n	80015cc <delay_l+0x14>
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000c60 	.word	0x20000c60

080015ec <HCSR04_Read_r>:

void HCSR04_Read_r (void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f6:	480b      	ldr	r0, [pc, #44]	; (8001624 <HCSR04_Read_r+0x38>)
 80015f8:	f006 fade 	bl	8007bb8 <HAL_GPIO_WritePin>
	delay_r(10);  // wait for 10 us
 80015fc:	200a      	movs	r0, #10
 80015fe:	f7ff ffc1 	bl	8001584 <delay_r>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <HCSR04_Read_r+0x38>)
 800160a:	f006 fad5 	bl	8007bb8 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HCSR04_Read_r+0x3c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HCSR04_Read_r+0x3c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0202 	orr.w	r2, r2, #2
 800161c:	60da      	str	r2, [r3, #12]
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020800 	.word	0x40020800
 8001628:	20000c18 	.word	0x20000c18

0800162c <HCSR04_Read_l>:

void HCSR04_Read_l (void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001630:	2201      	movs	r2, #1
 8001632:	2120      	movs	r1, #32
 8001634:	480a      	ldr	r0, [pc, #40]	; (8001660 <HCSR04_Read_l+0x34>)
 8001636:	f006 fabf 	bl	8007bb8 <HAL_GPIO_WritePin>
	delay_l(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f7ff ffbc 	bl	80015b8 <delay_l>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001640:	2200      	movs	r2, #0
 8001642:	2120      	movs	r1, #32
 8001644:	4806      	ldr	r0, [pc, #24]	; (8001660 <HCSR04_Read_l+0x34>)
 8001646:	f006 fab7 	bl	8007bb8 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HCSR04_Read_l+0x38>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <HCSR04_Read_l+0x38>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0202 	orr.w	r2, r2, #2
 8001658:	60da      	str	r2, [r3, #12]
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40020400 	.word	0x40020400
 8001664:	20000c60 	.word	0x20000c60

08001668 <complementary_r>:
  U_hat += + K*(U-H*U_hat);
  P = (1-K*H)*P+Q;
  return U_hat;
}

double complementary_r(double input_dist) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0b00 	vstr	d0, [r7]
	static double readings_c[ARRAYNUM];      // the readings from the analog input
	static int idx = 0;              // the index of the current reading
	static double total_c = 0.0;                  // the running total

	// subtract the last reading:
	total_c = total_c - readings_c[idx];
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <complementary_r+0xa0>)
 8001674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <complementary_r+0xa4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a24      	ldr	r2, [pc, #144]	; (8001710 <complementary_r+0xa8>)
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe fdbf 	bl	8000208 <__aeabi_dsub>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	491e      	ldr	r1, [pc, #120]	; (8001708 <complementary_r+0xa0>)
 8001690:	e9c1 2300 	strd	r2, r3, [r1]
	// read from the sensor:
	readings_c[idx] = input_dist;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <complementary_r+0xa4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <complementary_r+0xa8>)
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	18d1      	adds	r1, r2, r3
 800169e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a2:	e9c1 2300 	strd	r2, r3, [r1]
	// add the reading to the total:
	total_c = total_c + readings_c[idx];
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <complementary_r+0xa4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a19      	ldr	r2, [pc, #100]	; (8001710 <complementary_r+0xa8>)
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <complementary_r+0xa0>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7fe fda7 	bl	800020c <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4911      	ldr	r1, [pc, #68]	; (8001708 <complementary_r+0xa0>)
 80016c4:	e9c1 2300 	strd	r2, r3, [r1]
	// advance to the next position in the array:
	idx = idx + 1;
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <complementary_r+0xa4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <complementary_r+0xa4>)
 80016d0:	6013      	str	r3, [r2, #0]

	// if we're at the end of the array...
	if (idx >= ARRAYNUM) {
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <complementary_r+0xa4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	dd02      	ble.n	80016e0 <complementary_r+0x78>
	 // ...wrap around to the beginning:
	 idx = 0;
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <complementary_r+0xa4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
	}
	// calculate the average:
	return total_c / ARRAYNUM;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <complementary_r+0xa0>)
 80016e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <complementary_r+0xac>)
 80016ec:	f7ff f86e 	bl	80007cc <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80016f8:	eeb0 0a47 	vmov.f32	s0, s14
 80016fc:	eef0 0a67 	vmov.f32	s1, s15
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200013b8 	.word	0x200013b8
 800170c:	200013c0 	.word	0x200013c0
 8001710:	200013c8 	.word	0x200013c8
 8001714:	40080000 	.word	0x40080000

08001718 <complementary_l>:

double complementary_l(double input_dist) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	ed87 0b00 	vstr	d0, [r7]
	static double readings_c[ARRAYNUM];      // the readings from the analog input
	static int idx = 0;              // the index of the current reading
	static double total_c = 0.0;                  // the running total

	// subtract the last reading:
	total_c = total_c - readings_c[idx];
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <complementary_l+0xa0>)
 8001724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <complementary_l+0xa4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a24      	ldr	r2, [pc, #144]	; (80017c0 <complementary_l+0xa8>)
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe fd67 	bl	8000208 <__aeabi_dsub>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	491e      	ldr	r1, [pc, #120]	; (80017b8 <complementary_l+0xa0>)
 8001740:	e9c1 2300 	strd	r2, r3, [r1]
	// read from the sensor:
	readings_c[idx] = input_dist;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <complementary_l+0xa4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <complementary_l+0xa8>)
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	18d1      	adds	r1, r2, r3
 800174e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001752:	e9c1 2300 	strd	r2, r3, [r1]
	// add the reading to the total:
	total_c = total_c + readings_c[idx];
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <complementary_l+0xa4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <complementary_l+0xa8>)
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <complementary_l+0xa0>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe fd4f 	bl	800020c <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4911      	ldr	r1, [pc, #68]	; (80017b8 <complementary_l+0xa0>)
 8001774:	e9c1 2300 	strd	r2, r3, [r1]
	// advance to the next position in the array:
	idx = idx + 1;
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <complementary_l+0xa4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <complementary_l+0xa4>)
 8001780:	6013      	str	r3, [r2, #0]

	// if we're at the end of the array...
	if (idx >= ARRAYNUM) {
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <complementary_l+0xa4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b02      	cmp	r3, #2
 8001788:	dd02      	ble.n	8001790 <complementary_l+0x78>
	 // ...wrap around to the beginning:
	 idx = 0;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <complementary_l+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
	}
	// calculate the average:
	return total_c / ARRAYNUM;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <complementary_l+0xa0>)
 8001792:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <complementary_l+0xac>)
 800179c:	f7ff f816 	bl	80007cc <__aeabi_ddiv>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80017a8:	eeb0 0a47 	vmov.f32	s0, s14
 80017ac:	eef0 0a67 	vmov.f32	s1, s15
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200013e0 	.word	0x200013e0
 80017bc:	200013e8 	.word	0x200013e8
 80017c0:	200013f0 	.word	0x200013f0
 80017c4:	40080000 	.word	0x40080000

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ce:	f004 fb3b 	bl	8005e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d2:	f000 f89b 	bl	800190c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d6:	f000 fc0d 	bl	8001ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017da:	f000 fbd3 	bl	8001f84 <MX_DMA_Init>
  MX_ETH_Init();
 80017de:	f000 f95f 	bl	8001aa0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80017e2:	f000 fb4d 	bl	8001e80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80017e6:	f000 fb9f 	bl	8001f28 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80017ea:	f000 fb73 	bl	8001ed4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80017ee:	f000 f8f7 	bl	80019e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017f2:	f000 f9a3 	bl	8001b3c <MX_I2C1_Init>
  MX_TIM3_Init();
 80017f6:	f000 fa63 	bl	8001cc0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017fa:	f000 fad1 	bl	8001da0 <MX_TIM4_Init>
  MX_TIM1_Init();
 80017fe:	f000 f9dd 	bl	8001bbc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001802:	2100      	movs	r1, #0
 8001804:	483a      	ldr	r0, [pc, #232]	; (80018f0 <main+0x128>)
 8001806:	f007 fd0f 	bl	8009228 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800180a:	2100      	movs	r1, #0
 800180c:	4839      	ldr	r0, [pc, #228]	; (80018f4 <main+0x12c>)
 800180e:	f007 fd0b 	bl	8009228 <HAL_TIM_IC_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8001812:	2202      	movs	r2, #2
 8001814:	4938      	ldr	r1, [pc, #224]	; (80018f8 <main+0x130>)
 8001816:	4839      	ldr	r0, [pc, #228]	; (80018fc <main+0x134>)
 8001818:	f004 fbf0 	bl	8005ffc <HAL_ADC_Start_DMA>
  uint32_t start_tick = HAL_GetTick();
 800181c:	f004 fb7a 	bl	8005f14 <HAL_GetTick>
 8001820:	61f8      	str	r0, [r7, #28]
  init_neopixel(WS2812);
 8001822:	2001      	movs	r0, #1
 8001824:	f003 ff9a 	bl	800575c <init_neopixel>
  all_black_render();
 8001828:	f003 ffba 	bl	80057a0 <all_black_render>
  setup();
 800182c:	f002 fab6 	bl	8003d9c <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  double r_sonar = 0.0;
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  double l_sonar = 0.0;
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  if(HAL_GetTick() - start_tick >= 100) {
 8001848:	f004 fb64 	bl	8005f14 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b63      	cmp	r3, #99	; 0x63
 8001854:	d91c      	bls.n	8001890 <main+0xc8>
		  HCSR04_Read_r();
 8001856:	f7ff fec9 	bl	80015ec <HCSR04_Read_r>
		  HCSR04_Read_l();
 800185a:	f7ff fee7 	bl	800162c <HCSR04_Read_l>

		  // for Kalmanfilter
//		  kaldist_c1 = kalman(Distance_c1);
//		  kaldist_c3 = kalman(Distance_c3);

		  r_sonar = complementary_r(Distance_c1);
 800185e:	4b28      	ldr	r3, [pc, #160]	; (8001900 <main+0x138>)
 8001860:	ed93 7b00 	vldr	d7, [r3]
 8001864:	eeb0 0a47 	vmov.f32	s0, s14
 8001868:	eef0 0a67 	vmov.f32	s1, s15
 800186c:	f7ff fefc 	bl	8001668 <complementary_r>
 8001870:	ed87 0b04 	vstr	d0, [r7, #16]
		  l_sonar = complementary_l(Distance_c3);
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <main+0x13c>)
 8001876:	ed93 7b00 	vldr	d7, [r3]
 800187a:	eeb0 0a47 	vmov.f32	s0, s14
 800187e:	eef0 0a67 	vmov.f32	s1, s15
 8001882:	f7ff ff49 	bl	8001718 <complementary_l>
 8001886:	ed87 0b02 	vstr	d0, [r7, #8]

		  start_tick = HAL_GetTick();
 800188a:	f004 fb43 	bl	8005f14 <HAL_GetTick>
 800188e:	61f8      	str	r0, [r7, #28]
	  }


	  // send it to the computer as ASCII digits
	  //render_raising_mode(215,125,123,5);
	  uint8_t led_mode = loop(XY[0], XY[1], r_sonar, l_sonar);
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <main+0x130>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <main+0x130>)
 8001896:	6852      	ldr	r2, [r2, #4]
 8001898:	ed97 1b02 	vldr	d1, [r7, #8]
 800189c:	ed97 0b04 	vldr	d0, [r7, #16]
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fb04 	bl	8003eb0 <loop>
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]


	  if(mode==HALT)
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <main+0x140>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1bd      	bne.n	8001830 <main+0x68>
	  {
		  if (led_mode == 0) render_breath_mode(0, 254, 50, 0.5); //RGB MAYBE RGB: (0,188,227)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <main+0x100>
 80018ba:	2300      	movs	r3, #0
 80018bc:	2232      	movs	r2, #50	; 0x32
 80018be:	21fe      	movs	r1, #254	; 0xfe
 80018c0:	2000      	movs	r0, #0
 80018c2:	f003 ffd1 	bl	8005868 <render_breath_mode>
 80018c6:	e7b3      	b.n	8001830 <main+0x68>
		  else if (led_mode == 1) one_color_render(254,0,0); //RGB
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d105      	bne.n	80018da <main+0x112>
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	20fe      	movs	r0, #254	; 0xfe
 80018d4:	f003 ff92 	bl	80057fc <one_color_render>
 80018d8:	e7aa      	b.n	8001830 <main+0x68>
		  else if (led_mode == 2) render_breath_mode(0,0,254,1); //RGB
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d1a7      	bne.n	8001830 <main+0x68>
 80018e0:	2301      	movs	r3, #1
 80018e2:	22fe      	movs	r2, #254	; 0xfe
 80018e4:	2100      	movs	r1, #0
 80018e6:	2000      	movs	r0, #0
 80018e8:	f003 ffbe 	bl	8005868 <render_breath_mode>
  {
 80018ec:	e7a0      	b.n	8001830 <main+0x68>
 80018ee:	bf00      	nop
 80018f0:	20000c18 	.word	0x20000c18
 80018f4:	20000c60 	.word	0x20000c60
 80018f8:	2000135c 	.word	0x2000135c
 80018fc:	20000a24 	.word	0x20000a24
 8001900:	20001388 	.word	0x20001388
 8001904:	200013b0 	.word	0x200013b0
 8001908:	20001ea5 	.word	0x20001ea5

0800190c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b094      	sub	sp, #80	; 0x50
 8001910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001912:	f107 0320 	add.w	r3, r7, #32
 8001916:	2230      	movs	r2, #48	; 0x30
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f00b f9c4 	bl	800cca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <SystemClock_Config+0xcc>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a27      	ldr	r2, [pc, #156]	; (80019d8 <SystemClock_Config+0xcc>)
 800193a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <SystemClock_Config+0xcc>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800194c:	2300      	movs	r3, #0
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <SystemClock_Config+0xd0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a21      	ldr	r2, [pc, #132]	; (80019dc <SystemClock_Config+0xd0>)
 8001956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <SystemClock_Config+0xd0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001968:	2301      	movs	r3, #1
 800196a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800196c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001972:	2302      	movs	r3, #2
 8001974:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001976:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800197a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800197c:	2304      	movs	r3, #4
 800197e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001980:	23a8      	movs	r3, #168	; 0xa8
 8001982:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001984:	2302      	movs	r3, #2
 8001986:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001988:	2307      	movs	r3, #7
 800198a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198c:	f107 0320 	add.w	r3, r7, #32
 8001990:	4618      	mov	r0, r3
 8001992:	f006 fc1f 	bl	80081d4 <HAL_RCC_OscConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800199c:	f000 fc28 	bl	80021f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a0:	230f      	movs	r3, #15
 80019a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a4:	2302      	movs	r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80019b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	2105      	movs	r1, #5
 80019be:	4618      	mov	r0, r3
 80019c0:	f006 fe80 	bl	80086c4 <HAL_RCC_ClockConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019ca:	f000 fc11 	bl	80021f0 <Error_Handler>
  }
}
 80019ce:	bf00      	nop
 80019d0:	3750      	adds	r7, #80	; 0x50
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000

080019e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019e6:	463b      	mov	r3, r7
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <MX_ADC1_Init+0xb4>)
 80019f4:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <MX_ADC1_Init+0xb8>)
 80019f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <MX_ADC1_Init+0xb4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a20:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <MX_ADC1_Init+0xbc>)
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a3e:	4815      	ldr	r0, [pc, #84]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a40:	f004 fa98 	bl	8005f74 <HAL_ADC_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a4a:	f000 fbd1 	bl	80021f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001a56:	2304      	movs	r3, #4
 8001a58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480d      	ldr	r0, [pc, #52]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a60:	f004 fbfa 	bl	8006258 <HAL_ADC_ConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a6a:	f000 fbc1 	bl	80021f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a6e:	2305      	movs	r3, #5
 8001a70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a72:	2302      	movs	r3, #2
 8001a74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a76:	463b      	mov	r3, r7
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_ADC1_Init+0xb4>)
 8001a7c:	f004 fbec 	bl	8006258 <HAL_ADC_ConfigChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001a86:	f000 fbb3 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000a24 	.word	0x20000a24
 8001a98:	40012000 	.word	0x40012000
 8001a9c:	0f000001 	.word	0x0f000001

08001aa0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MX_ETH_Init+0x84>)
 8001aa6:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <MX_ETH_Init+0x88>)
 8001aa8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <MX_ETH_Init+0x8c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <MX_ETH_Init+0x8c>)
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <MX_ETH_Init+0x8c>)
 8001ab8:	22e1      	movs	r2, #225	; 0xe1
 8001aba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <MX_ETH_Init+0x8c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <MX_ETH_Init+0x8c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <MX_ETH_Init+0x8c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <MX_ETH_Init+0x84>)
 8001ad0:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <MX_ETH_Init+0x8c>)
 8001ad2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <MX_ETH_Init+0x84>)
 8001ad6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ada:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_ETH_Init+0x84>)
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <MX_ETH_Init+0x90>)
 8001ae0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_ETH_Init+0x84>)
 8001ae4:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <MX_ETH_Init+0x94>)
 8001ae6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_ETH_Init+0x84>)
 8001aea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001aee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_ETH_Init+0x84>)
 8001af2:	f005 fb75 	bl	80071e0 <HAL_ETH_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001afc:	f000 fb78 	bl	80021f0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b00:	2238      	movs	r2, #56	; 0x38
 8001b02:	2100      	movs	r1, #0
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <MX_ETH_Init+0x98>)
 8001b06:	f00b f8cf 	bl	800cca8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <MX_ETH_Init+0x98>)
 8001b0c:	2221      	movs	r2, #33	; 0x21
 8001b0e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <MX_ETH_Init+0x98>)
 8001b12:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001b16:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <MX_ETH_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000acc 	.word	0x20000acc
 8001b28:	40028000 	.word	0x40028000
 8001b2c:	20001408 	.word	0x20001408
 8001b30:	20000984 	.word	0x20000984
 8001b34:	200008e4 	.word	0x200008e4
 8001b38:	200008ac 	.word	0x200008ac

08001b3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <MX_I2C1_Init+0x78>)
 8001b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b48:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <MX_I2C1_Init+0x7c>)
 8001b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b7a:	f006 f84f 	bl	8007c1c <HAL_I2C_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b84:	f000 fb34 	bl	80021f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b8c:	f006 f98a 	bl	8007ea4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b96:	f000 fb2b 	bl	80021f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_I2C1_Init+0x74>)
 8001b9e:	f006 f9bd 	bl	8007f1c <HAL_I2CEx_ConfigDigitalFilter>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001ba8:	f000 fb22 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000b7c 	.word	0x20000b7c
 8001bb4:	40005400 	.word	0x40005400
 8001bb8:	00061a80 	.word	0x00061a80

08001bbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b092      	sub	sp, #72	; 0x48
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
 8001bdc:	615a      	str	r2, [r3, #20]
 8001bde:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2220      	movs	r2, #32
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00b f85e 	bl	800cca8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001bee:	4a33      	ldr	r2, [pc, #204]	; (8001cbc <MX_TIM1_Init+0x100>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 106-1;
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001c00:	2269      	movs	r2, #105	; 0x69
 8001c02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c16:	4828      	ldr	r0, [pc, #160]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001c18:	f006 ffc3 	bl	8008ba2 <HAL_TIM_PWM_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001c22:	f000 fae5 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c32:	4619      	mov	r1, r3
 8001c34:	4820      	ldr	r0, [pc, #128]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001c36:	f008 fcc5 	bl	800a5c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001c40:	f000 fad6 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c44:	2360      	movs	r3, #96	; 0x60
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c50:	2300      	movs	r3, #0
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	2200      	movs	r2, #0
 8001c66:	4619      	mov	r1, r3
 8001c68:	4813      	ldr	r0, [pc, #76]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001c6a:	f007 fda9 	bl	80097c0 <HAL_TIM_PWM_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001c74:	f000 fabc 	bl	80021f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001c9c:	f008 fd0e 	bl	800a6bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001ca6:	f000 faa3 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM1_Init+0xfc>)
 8001cac:	f003 faf4 	bl	8005298 <HAL_TIM_MspPostInit>

}
 8001cb0:	bf00      	nop
 8001cb2:	3748      	adds	r7, #72	; 0x48
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000bd0 	.word	0x20000bd0
 8001cbc:	40010000 	.word	0x40010000

08001cc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0318 	add.w	r3, r7, #24
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cde:	463b      	mov	r3, r7
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cea:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <MX_TIM3_Init+0xdc>)
 8001cee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001cf2:	2253      	movs	r2, #83	; 0x53
 8001cf4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf6:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d10:	4821      	ldr	r0, [pc, #132]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001d12:	f006 fef7 	bl	8008b04 <HAL_TIM_Base_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001d1c:	f000 fa68 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d24:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d26:	f107 0318 	add.w	r3, r7, #24
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	481a      	ldr	r0, [pc, #104]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001d2e:	f007 fe09 	bl	8009944 <HAL_TIM_ConfigClockSource>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d38:	f000 fa5a 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001d3c:	4816      	ldr	r0, [pc, #88]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001d3e:	f007 fa19 	bl	8009174 <HAL_TIM_IC_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d48:	f000 fa52 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480f      	ldr	r0, [pc, #60]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001d5c:	f008 fc32 	bl	800a5c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001d66:	f000 fa43 	bl	80021f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_TIM3_Init+0xd8>)
 8001d82:	f007 fc81 	bl	8009688 <HAL_TIM_IC_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001d8c:	f000 fa30 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000c18 	.word	0x20000c18
 8001d9c:	40000400 	.word	0x40000400

08001da0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da6:	f107 0318 	add.w	r3, r7, #24
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	; (8001e7c <MX_TIM4_Init+0xdc>)
 8001dce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001dd2:	2253      	movs	r2, #83	; 0x53
 8001dd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001df0:	4821      	ldr	r0, [pc, #132]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001df2:	f006 fe87 	bl	8008b04 <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001dfc:	f000 f9f8 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	481a      	ldr	r0, [pc, #104]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001e0e:	f007 fd99 	bl	8009944 <HAL_TIM_ConfigClockSource>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001e18:	f000 f9ea 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001e1c:	4816      	ldr	r0, [pc, #88]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001e1e:	f007 f9a9 	bl	8009174 <HAL_TIM_IC_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e28:	f000 f9e2 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480f      	ldr	r0, [pc, #60]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001e3c:	f008 fbc2 	bl	800a5c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001e46:	f000 f9d3 	bl	80021f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_TIM4_Init+0xd8>)
 8001e62:	f007 fc11 	bl	8009688 <HAL_TIM_IC_ConfigChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001e6c:	f000 f9c0 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000c60 	.word	0x20000c60
 8001e7c:	40000800 	.word	0x40000800

08001e80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <MX_USART3_UART_Init+0x50>)
 8001e88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001e8c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001e90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_USART3_UART_Init+0x4c>)
 8001eb8:	f008 fc66 	bl	800a788 <HAL_UART_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ec2:	f000 f995 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000d08 	.word	0x20000d08
 8001ed0:	40004800 	.word	0x40004800

08001ed4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <MX_USART6_UART_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001ee0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ee4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_USART6_UART_Init+0x4c>)
 8001f0c:	f008 fc3c 	bl	800a788 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f16:	f000 f96b 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000d4c 	.word	0x20000d4c
 8001f24:	40011400 	.word	0x40011400

08001f28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f36:	2204      	movs	r2, #4
 8001f38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f48:	2202      	movs	r2, #2
 8001f4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f6c:	f006 f815 	bl	8007f9a <HAL_PCD_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f76:	f000 f93b 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000e50 	.word	0x20000e50

08001f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <MX_DMA_Init+0x6c>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <MX_DMA_Init+0x6c>)
 8001f94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <MX_DMA_Init+0x6c>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2039      	movs	r0, #57	; 0x39
 8001fac:	f004 fcdf 	bl	800696e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001fb0:	2039      	movs	r0, #57	; 0x39
 8001fb2:	f004 fcf8 	bl	80069a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	203b      	movs	r0, #59	; 0x3b
 8001fbc:	f004 fcd7 	bl	800696e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001fc0:	203b      	movs	r0, #59	; 0x3b
 8001fc2:	f004 fcf0 	bl	80069a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	203c      	movs	r0, #60	; 0x3c
 8001fcc:	f004 fccf 	bl	800696e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001fd0:	203c      	movs	r0, #60	; 0x3c
 8001fd2:	f004 fce8 	bl	80069a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2045      	movs	r0, #69	; 0x45
 8001fdc:	f004 fcc7 	bl	800696e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001fe0:	2045      	movs	r0, #69	; 0x45
 8001fe2:	f004 fce0 	bl	80069a6 <HAL_NVIC_EnableIRQ>

}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b5a      	ldr	r3, [pc, #360]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b56      	ldr	r3, [pc, #344]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a55      	ldr	r2, [pc, #340]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a4e      	ldr	r2, [pc, #312]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a47      	ldr	r2, [pc, #284]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 80020bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b45      	ldr	r3, [pc, #276]	; (80021d8 <MX_GPIO_Init+0x1e4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_5|LD2_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	f244 01a1 	movw	r1, #16545	; 0x40a1
 80020d4:	4841      	ldr	r0, [pc, #260]	; (80021dc <MX_GPIO_Init+0x1e8>)
 80020d6:	f005 fd6f 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80020e0:	483f      	ldr	r0, [pc, #252]	; (80021e0 <MX_GPIO_Init+0x1ec>)
 80020e2:	f005 fd69 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2140      	movs	r1, #64	; 0x40
 80020ea:	483e      	ldr	r0, [pc, #248]	; (80021e4 <MX_GPIO_Init+0x1f0>)
 80020ec:	f005 fd64 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f6:	483c      	ldr	r0, [pc, #240]	; (80021e8 <MX_GPIO_Init+0x1f4>)
 80020f8:	f005 fd5e 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80020fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002102:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	4619      	mov	r1, r3
 8002112:	4835      	ldr	r0, [pc, #212]	; (80021e8 <MX_GPIO_Init+0x1f4>)
 8002114:	f005 fb8c 	bl	8007830 <HAL_GPIO_Init>

  /*Configure GPIO pin : e_stop_Pin */
  GPIO_InitStruct.Pin = e_stop_Pin;
 8002118:	2340      	movs	r3, #64	; 0x40
 800211a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800211c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002122:	2302      	movs	r3, #2
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(e_stop_GPIO_Port, &GPIO_InitStruct);
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	4619      	mov	r1, r3
 800212c:	482f      	ldr	r0, [pc, #188]	; (80021ec <MX_GPIO_Init+0x1f8>)
 800212e:	f005 fb7f 	bl	8007830 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB5 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_5|LD2_Pin;
 8002132:	f244 03a1 	movw	r3, #16545	; 0x40a1
 8002136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002138:	2301      	movs	r3, #1
 800213a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	4619      	mov	r1, r3
 800214a:	4824      	ldr	r0, [pc, #144]	; (80021dc <MX_GPIO_Init+0x1e8>)
 800214c:	f005 fb70 	bl	8007830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002150:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002156:	2301      	movs	r3, #1
 8002158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	4619      	mov	r1, r3
 8002168:	481d      	ldr	r0, [pc, #116]	; (80021e0 <MX_GPIO_Init+0x1ec>)
 800216a:	f005 fb61 	bl	8007830 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800216e:	2340      	movs	r3, #64	; 0x40
 8002170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4817      	ldr	r0, [pc, #92]	; (80021e4 <MX_GPIO_Init+0x1f0>)
 8002186:	f005 fb53 	bl	8007830 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4811      	ldr	r0, [pc, #68]	; (80021e4 <MX_GPIO_Init+0x1f0>)
 800219e:	f005 fb47 	bl	8007830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	4619      	mov	r1, r3
 80021ba:	480b      	ldr	r0, [pc, #44]	; (80021e8 <MX_GPIO_Init+0x1f4>)
 80021bc:	f005 fb38 	bl	8007830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	2017      	movs	r0, #23
 80021c6:	f004 fbd2 	bl	800696e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021ca:	2017      	movs	r0, #23
 80021cc:	f004 fbeb 	bl	80069a6 <HAL_NVIC_EnableIRQ>

}
 80021d0:	bf00      	nop
 80021d2:	3730      	adds	r7, #48	; 0x30
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40021800 	.word	0x40021800
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020000 	.word	0x40020000

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <Error_Handler+0x8>
	...

080021fc <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <_ZN13STM32HardwareC1Ev+0x1c>)
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	2000009c 	.word	0x2000009c

0800221c <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fe31 	bl	8000e90 <_ZN14BufferedSerial4initEv>
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fe2f 	bl	8000ea6 <_ZN14BufferedSerial4readEv>
 8002248:	4603      	mov	r3, r0
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fe53 	bl	8000f12 <_ZN14BufferedSerial5writeEPKhi>
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	f003 fe4a 	bl	8005f14 <HAL_GetTick>
 8002280:	4603      	mov	r3, r0
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800228a:	b480      	push	{r7}
 800228c:	b087      	sub	sp, #28
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8002296:	463b      	mov	r3, r7
 8002298:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	15db      	asrs	r3, r3, #23
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80022b0:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	0159      	lsls	r1, r3, #5
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	b2ca      	uxtb	r2, r1
 80022e2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	10d9      	asrs	r1, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	b2ca      	uxtb	r2, r1
 80022f0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	12d9      	asrs	r1, r3, #11
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	b2ca      	uxtb	r2, r1
 80022fe:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	b25a      	sxtb	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	14db      	asrs	r3, r3, #19
 800230a:	b25b      	sxtb	r3, r3
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	b25b      	sxtb	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	b259      	sxtb	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	b2ca      	uxtb	r2, r1
 800231e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	111b      	asrs	r3, r3, #4
 8002324:	b2da      	uxtb	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1c59      	adds	r1, r3, #1
 800232a:	6079      	str	r1, [r7, #4]
 800232c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8002334:	edd7 7a00 	vldr	s15, [r7]
 8002338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002340:	d508      	bpl.n	8002354 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3b01      	subs	r3, #1
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8002354:	2308      	movs	r3, #8
  }
 8002356:	4618      	mov	r0, r3
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3303      	adds	r3, #3
 8002374:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f003 0207 	and.w	r2, r3, #7
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	00da      	lsls	r2, r3, #3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	431a      	orrs	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	02da      	lsls	r2, r3, #11
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	04db      	lsls	r3, r3, #19
 80023bc:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 80023c0:	431a      	orrs	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9e>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80023f8:	05db      	lsls	r3, r3, #23
 80023fa:	431a      	orrs	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	431a      	orrs	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	601a      	str	r2, [r3, #0]

    return 8;
 8002418:	2308      	movs	r3, #8
  }
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_ZN3ros3MsgC1Ev>:
class Msg
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <_ZN3ros3MsgC1Ev+0x1c>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	0800d448 	.word	0x0800d448

08002468 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
      data()
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ffe8 	bl	8002448 <_ZN3ros3MsgC1Ev>
 8002478:	4a06      	ldr	r2, [pc, #24]	; (8002494 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ffcf 	bl	8002426 <_ZN3ros4TimeC1Ev>
    {
    }
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	0800d430 	.word	0x0800d430

08002498 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	b2ca      	uxtb	r2, r1
 80024b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0a19      	lsrs	r1, r3, #8
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	b2ca      	uxtb	r2, r1
 80024c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	0c19      	lsrs	r1, r3, #16
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3302      	adds	r3, #2
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	b2ca      	uxtb	r2, r1
 80024d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	0e19      	lsrs	r1, r3, #24
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3303      	adds	r3, #3
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	b2ca      	uxtb	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3304      	adds	r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6899      	ldr	r1, [r3, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	b2ca      	uxtb	r2, r1
 80024fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	0a19      	lsrs	r1, r3, #8
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3301      	adds	r3, #1
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	4413      	add	r3, r2
 800250c:	b2ca      	uxtb	r2, r1
 800250e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	0c19      	lsrs	r1, r3, #16
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3302      	adds	r3, #2
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	4413      	add	r3, r2
 800251e:	b2ca      	uxtb	r2, r1
 8002520:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	0e19      	lsrs	r1, r3, #24
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3303      	adds	r3, #3
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	b2ca      	uxtb	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3304      	adds	r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
      return offset;
 800253a:	68fb      	ldr	r3, [r7, #12]
    }
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3301      	adds	r3, #1
 800256c:	6839      	ldr	r1, [r7, #0]
 800256e:	440b      	add	r3, r1
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3302      	adds	r3, #2
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	440b      	add	r3, r1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3303      	adds	r3, #3
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	440b      	add	r3, r1
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3304      	adds	r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3301      	adds	r3, #1
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	440b      	add	r3, r1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3302      	adds	r3, #2
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	440b      	add	r3, r1
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3303      	adds	r3, #3
 80025ee:	6839      	ldr	r1, [r7, #0]
 80025f0:	440b      	add	r3, r1
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3304      	adds	r3, #4
 8002600:	60fb      	str	r3, [r7, #12]
     return offset;
 8002602:	68fb      	ldr	r3, [r7, #12]
    }
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	0800cfd4 	.word	0x0800cfd4

0800262c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	0800cfe4 	.word	0x0800cfe4

08002648 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fef8 	bl	8002448 <_ZN3ros3MsgC1Ev>
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	809a      	strh	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a07      	ldr	r2, [pc, #28]	; (800268c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a06      	ldr	r2, [pc, #24]	; (800268c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
    {
    }
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	0800d418 	.word	0x0800d418
 800268c:	0800d008 	.word	0x0800d008

08002690 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8899      	ldrh	r1, [r3, #4]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	b2ca      	uxtb	r2, r1
 80026aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	889b      	ldrh	r3, [r3, #4]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	b299      	uxth	r1, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	3301      	adds	r3, #1
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	b2ca      	uxtb	r2, r1
 80026be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3302      	adds	r3, #2
 80026c4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd fd90 	bl	80001f0 <strlen>
 80026d0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	69b9      	ldr	r1, [r7, #24]
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 fd14 	bl	8004108 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	3304      	adds	r3, #4
 80026e4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	18d0      	adds	r0, r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4619      	mov	r1, r3
 80026f4:	f00a faca 	bl	800cc8c <memcpy>
      offset += length_topic_name;
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4413      	add	r3, r2
 80026fe:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd fd73 	bl	80001f0 <strlen>
 800270a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	6979      	ldr	r1, [r7, #20]
 8002714:	4618      	mov	r0, r3
 8002716:	f001 fcf7 	bl	8004108 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	18d0      	adds	r0, r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4619      	mov	r1, r3
 800272e:	f00a faad 	bl	800cc8c <memcpy>
      offset += length_message_type;
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	4413      	add	r3, r2
 8002738:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fd56 	bl	80001f0 <strlen>
 8002744:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	4413      	add	r3, r2
 800274c:	6939      	ldr	r1, [r7, #16]
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fcda 	bl	8004108 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	3304      	adds	r3, #4
 8002758:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	18d0      	adds	r0, r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4619      	mov	r1, r3
 8002768:	f00a fa90 	bl	800cc8c <memcpy>
      offset += length_md5sum;
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800277a:	68f9      	ldr	r1, [r7, #12]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	b2ca      	uxtb	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	0a19      	lsrs	r1, r3, #8
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4413      	add	r3, r2
 8002792:	b2ca      	uxtb	r2, r1
 8002794:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	0c19      	lsrs	r1, r3, #16
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3302      	adds	r3, #2
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	b2ca      	uxtb	r2, r1
 80027a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	0e19      	lsrs	r1, r3, #24
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3303      	adds	r3, #3
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	4413      	add	r3, r2
 80027b2:	b2ca      	uxtb	r2, r1
 80027b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	61fb      	str	r3, [r7, #28]
      return offset;
 80027bc:	69fb      	ldr	r3, [r7, #28]
    }
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b08a      	sub	sp, #40	; 0x28
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	889b      	ldrh	r3, [r3, #4]
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	3301      	adds	r3, #1
 80027ec:	6839      	ldr	r1, [r7, #0]
 80027ee:	440b      	add	r3, r1
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	3302      	adds	r3, #2
 8002804:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	441a      	add	r2, r3
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f001 fc96 	bl	8004144 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	3304      	adds	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	4413      	add	r3, r2
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	429a      	cmp	r2, r3
 800282c:	d20c      	bcs.n	8002848 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	441a      	add	r2, r3
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	3b01      	subs	r3, #1
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	440b      	add	r3, r1
 800283c:	7812      	ldrb	r2, [r2, #0]
 800283e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	3301      	adds	r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	e7ec      	b.n	8002822 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	4413      	add	r3, r2
 800284e:	3b01      	subs	r3, #1
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	4413      	add	r3, r2
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	3b01      	subs	r3, #1
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	441a      	add	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	4413      	add	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	441a      	add	r2, r3
 8002872:	f107 0310 	add.w	r3, r7, #16
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f001 fc63 	bl	8004144 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	3304      	adds	r3, #4
 8002882:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	623b      	str	r3, [r7, #32]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	6a3a      	ldr	r2, [r7, #32]
 8002890:	429a      	cmp	r2, r3
 8002892:	d20c      	bcs.n	80028ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	441a      	add	r2, r3
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	3b01      	subs	r3, #1
 800289e:	6839      	ldr	r1, [r7, #0]
 80028a0:	440b      	add	r3, r1
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	3301      	adds	r3, #1
 80028aa:	623b      	str	r3, [r7, #32]
 80028ac:	e7ec      	b.n	8002888 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	3b01      	subs	r3, #1
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	441a      	add	r2, r3
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f001 fc30 	bl	8004144 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	3304      	adds	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d20c      	bcs.n	8002914 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	441a      	add	r2, r3
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3b01      	subs	r3, #1
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	440b      	add	r3, r1
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	3301      	adds	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e7ec      	b.n	80028ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	3b01      	subs	r3, #1
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	4413      	add	r3, r2
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	3b01      	subs	r3, #1
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	441a      	add	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4413      	add	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	440a      	add	r2, r1
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	3301      	adds	r3, #1
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	440b      	add	r3, r1
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	4313      	orrs	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	3302      	adds	r3, #2
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	440b      	add	r3, r1
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	4313      	orrs	r3, r2
 800296c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	3303      	adds	r3, #3
 8002974:	6839      	ldr	r1, [r7, #0]
 8002976:	440b      	add	r3, r1
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	061b      	lsls	r3, r3, #24
 800297c:	4313      	orrs	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	3304      	adds	r3, #4
 800298a:	61bb      	str	r3, [r7, #24]
     return offset;
 800298c:	69bb      	ldr	r3, [r7, #24]
    }
 800298e:	4618      	mov	r0, r3
 8002990:	3728      	adds	r7, #40	; 0x28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	0800d00c 	.word	0x0800d00c

080029b4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	0800d028 	.word	0x0800d028

080029d0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fd34 	bl	8002448 <_ZN3ros3MsgC1Ev>
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	711a      	strb	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80029f0:	609a      	str	r2, [r3, #8]
    {
    }
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	0800d400 	.word	0x0800d400
 8002a00:	0800d008 	.word	0x0800d008

08002a04 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	7912      	ldrb	r2, [r2, #4]
 8002a1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3301      	adds	r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fbe1 	bl	80001f0 <strlen>
 8002a2e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fb65 	bl	8004108 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3304      	adds	r3, #4
 8002a42:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	18d0      	adds	r0, r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	4619      	mov	r1, r3
 8002a52:	f00a f91b 	bl	800cc8c <memcpy>
      offset += length_msg;
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    }
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781a      	ldrb	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	3301      	adds	r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	441a      	add	r2, r3
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 fb55 	bl	8004144 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d20c      	bcs.n	8002aca <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	441a      	add	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	440b      	add	r3, r1
 8002abe:	7812      	ldrb	r2, [r2, #0]
 8002ac0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	e7ec      	b.n	8002aa4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	441a      	add	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
     return offset;
 8002aee:	693b      	ldr	r3, [r7, #16]
    }
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	0800d04c 	.word	0x0800d04c

08002b14 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	0800d060 	.word	0x0800d060

08002b30 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fc84 	bl	8002448 <_ZN3ros3MsgC1Ev>
 8002b40:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	61da      	str	r2, [r3, #28]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	0800d3e8 	.word	0x0800d3e8

08002b78 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	b2ca      	uxtb	r2, r1
 8002b92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	0a19      	lsrs	r1, r3, #8
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	b2ca      	uxtb	r2, r1
 8002ba4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	0c19      	lsrs	r1, r3, #16
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	3302      	adds	r3, #2
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b2ca      	uxtb	r2, r1
 8002bb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	0e19      	lsrs	r1, r3, #24
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	3303      	adds	r3, #3
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b2ca      	uxtb	r2, r1
 8002bc8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	3304      	adds	r3, #4
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d22b      	bcs.n	8002c36 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002bec:	6939      	ldr	r1, [r7, #16]
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2ca      	uxtb	r2, r1
 8002bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	0a19      	lsrs	r1, r3, #8
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	3301      	adds	r3, #1
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	b2ca      	uxtb	r2, r1
 8002c06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	0c19      	lsrs	r1, r3, #16
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	3302      	adds	r3, #2
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	b2ca      	uxtb	r2, r1
 8002c16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	0e19      	lsrs	r1, r3, #24
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	3303      	adds	r3, #3
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	b2ca      	uxtb	r2, r1
 8002c26:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	3301      	adds	r3, #1
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	e7ce      	b.n	8002bd4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6919      	ldr	r1, [r3, #16]
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	b2ca      	uxtb	r2, r1
 8002c42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	0a19      	lsrs	r1, r3, #8
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	4413      	add	r3, r2
 8002c52:	b2ca      	uxtb	r2, r1
 8002c54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	0c19      	lsrs	r1, r3, #16
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	3302      	adds	r3, #2
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	b2ca      	uxtb	r2, r1
 8002c66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	0e19      	lsrs	r1, r3, #24
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	3303      	adds	r3, #3
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	b2ca      	uxtb	r2, r1
 8002c78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d22b      	bcs.n	8002ce6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	b2ca      	uxtb	r2, r1
 8002ca6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	0a19      	lsrs	r1, r3, #8
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	3301      	adds	r3, #1
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	b2ca      	uxtb	r2, r1
 8002cb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	0c19      	lsrs	r1, r3, #16
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	b2ca      	uxtb	r2, r1
 8002cc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	0e19      	lsrs	r1, r3, #24
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	3303      	adds	r3, #3
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b2ca      	uxtb	r2, r1
 8002cd6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	3304      	adds	r3, #4
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	e7ce      	b.n	8002c84 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69d9      	ldr	r1, [r3, #28]
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	b2ca      	uxtb	r2, r1
 8002cf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	0a19      	lsrs	r1, r3, #8
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	4413      	add	r3, r2
 8002d02:	b2ca      	uxtb	r2, r1
 8002d04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	0c19      	lsrs	r1, r3, #16
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	3302      	adds	r3, #2
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	b2ca      	uxtb	r2, r1
 8002d16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	0e19      	lsrs	r1, r3, #24
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	3303      	adds	r3, #3
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	4413      	add	r3, r2
 8002d26:	b2ca      	uxtb	r2, r1
 8002d28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d228      	bcs.n	8002d90 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fa50 	bl	80001f0 <strlen>
 8002d50:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	6979      	ldr	r1, [r7, #20]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 f9d4 	bl	8004108 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	3304      	adds	r3, #4
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	18d0      	adds	r0, r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f009 ff86 	bl	800cc8c <memcpy>
      offset += length_stringsi;
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	4413      	add	r3, r2
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	e7d1      	b.n	8002d34 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002d92:	4618      	mov	r0, r3
 8002d94:	3728      	adds	r7, #40	; 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b08e      	sub	sp, #56	; 0x38
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	3301      	adds	r3, #1
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	6a3a      	ldr	r2, [r7, #32]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	3303      	adds	r3, #3
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	4413      	add	r3, r2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dea:	3304      	adds	r3, #4
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	6a3a      	ldr	r2, [r7, #32]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d90a      	bls.n	8002e0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f009 ff58 	bl	800ccb8 <realloc>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002e14:	2300      	movs	r3, #0
 8002e16:	633b      	str	r3, [r7, #48]	; 0x30
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d236      	bcs.n	8002e90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e2a:	6839      	ldr	r1, [r7, #0]
 8002e2c:	440a      	add	r2, r1
 8002e2e:	7812      	ldrb	r2, [r2, #0]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	3301      	adds	r3, #1
 8002e3a:	6839      	ldr	r1, [r7, #0]
 8002e3c:	440b      	add	r3, r1
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	440b      	add	r3, r1
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5c:	3303      	adds	r3, #3
 8002e5e:	6839      	ldr	r1, [r7, #0]
 8002e60:	440b      	add	r3, r1
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	3304      	adds	r3, #4
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	3208      	adds	r2, #8
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8e:	e7c3      	b.n	8002e18 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eae:	3302      	adds	r3, #2
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec0:	3303      	adds	r3, #3
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d90a      	bls.n	8002ef6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f009 fee4 	bl	800ccb8 <realloc>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d236      	bcs.n	8002f78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	440a      	add	r2, r1
 8002f16:	7812      	ldrb	r2, [r2, #0]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f20:	3301      	adds	r3, #1
 8002f22:	6839      	ldr	r1, [r7, #0]
 8002f24:	440b      	add	r3, r1
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f32:	3302      	adds	r3, #2
 8002f34:	6839      	ldr	r1, [r7, #0]
 8002f36:	440b      	add	r3, r1
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	3303      	adds	r3, #3
 8002f46:	6839      	ldr	r1, [r7, #0]
 8002f48:	440b      	add	r3, r1
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	3214      	adds	r2, #20
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	3301      	adds	r3, #1
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f76:	e7c3      	b.n	8002f00 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	3301      	adds	r3, #1
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	3302      	adds	r3, #2
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	3303      	adds	r3, #3
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fba:	3304      	adds	r3, #4
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d90a      	bls.n	8002fde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f009 fe70 	bl	800ccb8 <realloc>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d23f      	bcs.n	8003072 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	441a      	add	r2, r3
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 f8a0 	bl	8004144 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	3304      	adds	r3, #4
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003016:	429a      	cmp	r2, r3
 8003018:	d20c      	bcs.n	8003034 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	441a      	add	r2, r3
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	3b01      	subs	r3, #1
 8003024:	6839      	ldr	r1, [r7, #0]
 8003026:	440b      	add	r3, r1
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	3301      	adds	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	e7ec      	b.n	800300e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4413      	add	r3, r2
 800303a:	3b01      	subs	r3, #1
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	4413      	add	r3, r2
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003046:	3b01      	subs	r3, #1
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	441a      	add	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	3220      	adds	r2, #32
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	3301      	adds	r3, #1
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003070:	e7ba      	b.n	8002fe8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003074:	4618      	mov	r0, r3
 8003076:	3738      	adds	r7, #56	; 0x38
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	0800d2c4 	.word	0x0800d2c4

08003098 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	0800d084 	.word	0x0800d084

080030b4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	611a      	str	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68d8      	ldr	r0, [r3, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6891      	ldr	r1, [r2, #8]
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	4798      	blx	r3
 8003100:	4603      	mov	r3, r0
  };
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
  }
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f98a 	bl	8002448 <_ZN3ros3MsgC1Ev>
 8003134:	4a09      	ldr	r2, [pc, #36]	; (800315c <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
    {
    }
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	0800d3a4 	.word	0x0800d3a4

08003160 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	441a      	add	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	edd3 7a01 	vldr	s15, [r3, #4]
 800317a:	eeb0 0a67 	vmov.f32	s0, s15
 800317e:	4610      	mov	r0, r2
 8003180:	f7ff f883 	bl	800228a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	441a      	add	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	edd3 7a02 	vldr	s15, [r3, #8]
 8003198:	eeb0 0a67 	vmov.f32	s0, s15
 800319c:	4610      	mov	r0, r2
 800319e:	f7ff f874 	bl	800228a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031a2:	4602      	mov	r2, r0
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	441a      	add	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80031b6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ba:	4610      	mov	r0, r2
 80031bc:	f7ff f865 	bl	800228a <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
      return offset;
 80031c8:	68fb      	ldr	r3, [r7, #12]
    }
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	441a      	add	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f7ff f8b8 	bl	8002362 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	441a      	add	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3308      	adds	r3, #8
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f7ff f8ab 	bl	8002362 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4413      	add	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	330c      	adds	r3, #12
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f7ff f89e 	bl	8002362 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003226:	4602      	mov	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
     return offset;
 800322e:	68fb      	ldr	r3, [r7, #12]
    }
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	0800d0a8 	.word	0x0800d0a8

08003254 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	0800d0c0 	.word	0x0800d0c0

08003270 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff f8e4 	bl	8002448 <_ZN3ros3MsgC1Ev>
 8003280:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff4a 	bl	8003124 <_ZN13geometry_msgs7Vector3C1Ev>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3314      	adds	r3, #20
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff45 	bl	8003124 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	0800d38c 	.word	0x0800d38c

080032a8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	1d18      	adds	r0, r3, #4
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	f7ff ff4d 	bl	8003160 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f103 0014 	add.w	r0, r3, #20
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	f7ff ff40 	bl	8003160 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
      return offset;
 80032e8:	68fb      	ldr	r3, [r7, #12]
    }
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	1d18      	adds	r0, r3, #4
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	4413      	add	r3, r2
 800330a:	4619      	mov	r1, r3
 800330c:	f7ff ff61 	bl	80031d2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f103 0014 	add.w	r0, r3, #20
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	4413      	add	r3, r2
 8003324:	4619      	mov	r1, r3
 8003326:	f7ff ff54 	bl	80031d2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800332a:	4602      	mov	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
     return offset;
 8003332:	68fb      	ldr	r3, [r7, #12]
    }
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	0800d0e4 	.word	0x0800d0e4

08003358 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	0800d0f8 	.word	0x0800d0f8

08003374 <_ZN13freeway_joyfw10stm_fw_msgC1Ev>:
      typedef bool _e_stop_status_type;
      _e_stop_status_type e_stop_status;
      typedef geometry_msgs::Twist _cmd_vel_mcu_type;
      _cmd_vel_mcu_type cmd_vel_mcu;

    stm_fw_msg():
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
      am_status(0),
      e_stop_status(0),
      cmd_vel_mcu()
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f862 	bl	8002448 <_ZN3ros3MsgC1Ev>
 8003384:	4a09      	ldr	r2, [pc, #36]	; (80033ac <_ZN13freeway_joyfw10stm_fw_msgC1Ev+0x38>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	711a      	strb	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	715a      	strb	r2, [r3, #5]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3308      	adds	r3, #8
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff68 	bl	8003270 <_ZN13geometry_msgs5TwistC1Ev>
    {
    }
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	0800d374 	.word	0x0800d374

080033b0 <_ZNK13freeway_joyfw10stm_fw_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_am_status;
      u_am_status.real = this->am_status;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	791b      	ldrb	r3, [r3, #4]
 80033c2:	743b      	strb	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_am_status.base >> (8 * 0)) & 0xFF;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	4413      	add	r3, r2
 80033ca:	7c3a      	ldrb	r2, [r7, #16]
 80033cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->am_status);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3301      	adds	r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_e_stop_status;
      u_e_stop_status.real = this->e_stop_status;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	795b      	ldrb	r3, [r3, #5]
 80033d8:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_e_stop_status.base >> (8 * 0)) & 0xFF;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	7b3a      	ldrb	r2, [r7, #12]
 80033e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->e_stop_status);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3301      	adds	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
      offset += this->cmd_vel_mcu.serialize(outbuffer + offset);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f103 0008 	add.w	r0, r3, #8
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	f7ff ff56 	bl	80032a8 <_ZNK13geometry_msgs5Twist9serializeEPh>
 80033fc:	4602      	mov	r2, r0
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	4413      	add	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
      return offset;
 8003404:	697b      	ldr	r3, [r7, #20]
    }
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_ZN13freeway_joyfw10stm_fw_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_am_status;
      u_am_status.base = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	743b      	strb	r3, [r7, #16]
      u_am_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003420:	7c3a      	ldrb	r2, [r7, #16]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	6839      	ldr	r1, [r7, #0]
 8003426:	440b      	add	r3, r1
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	b2db      	uxtb	r3, r3
 800342e:	743b      	strb	r3, [r7, #16]
      this->am_status = u_am_status.real;
 8003430:	7c3a      	ldrb	r2, [r7, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->am_status);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	3301      	adds	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_e_stop_status;
      u_e_stop_status.base = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	733b      	strb	r3, [r7, #12]
      u_e_stop_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003440:	7b3a      	ldrb	r2, [r7, #12]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	6839      	ldr	r1, [r7, #0]
 8003446:	440b      	add	r3, r1
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	b2db      	uxtb	r3, r3
 800344e:	733b      	strb	r3, [r7, #12]
      this->e_stop_status = u_e_stop_status.real;
 8003450:	7b3a      	ldrb	r2, [r7, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	715a      	strb	r2, [r3, #5]
      offset += sizeof(this->e_stop_status);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3301      	adds	r3, #1
 800345a:	617b      	str	r3, [r7, #20]
      offset += this->cmd_vel_mcu.deserialize(inbuffer + offset);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f103 0008 	add.w	r0, r3, #8
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	4413      	add	r3, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f7ff ff42 	bl	80032f2 <_ZN13geometry_msgs5Twist11deserializeEPh>
 800346e:	4602      	mov	r2, r0
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	4413      	add	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
     return offset;
 8003476:	697b      	ldr	r3, [r7, #20]
    }
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <_ZN13freeway_joyfw10stm_fw_msg7getTypeEv>:

    const char * getType(){ return "freeway_joyfw/stm_fw_msg"; };
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <_ZN13freeway_joyfw10stm_fw_msg7getTypeEv+0x18>)
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	0800d11c 	.word	0x0800d11c

0800349c <_ZN13freeway_joyfw10stm_fw_msg6getMD5Ev>:
    const char * getMD5(){ return "fa2d9ef9f2382f4119166968f815e551"; };
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <_ZN13freeway_joyfw10stm_fw_msg6getMD5Ev+0x18>)
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	0800d138 	.word	0x0800d138

080034b8 <_ZN13freeway_joyfw10stm_am_msgC1Ev>:
  {
    public:
      typedef bool _am_status2_type;
      _am_status2_type am_status2;

    stm_am_msg():
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
      am_status2(0)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe ffc0 	bl	8002448 <_ZN3ros3MsgC1Ev>
 80034c8:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <_ZN13freeway_joyfw10stm_am_msgC1Ev+0x28>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	711a      	strb	r2, [r3, #4]
    {
    }
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	0800d35c 	.word	0x0800d35c

080034e4 <_ZNK13freeway_joyfw10stm_am_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_am_status2;
      u_am_status2.real = this->am_status2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	791b      	ldrb	r3, [r3, #4]
 80034f6:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_am_status2.base >> (8 * 0)) & 0xFF;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4413      	add	r3, r2
 80034fe:	7a3a      	ldrb	r2, [r7, #8]
 8003500:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->am_status2);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3301      	adds	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
      return offset;
 8003508:	68fb      	ldr	r3, [r7, #12]
    }
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <_ZN13freeway_joyfw10stm_am_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003516:	b480      	push	{r7}
 8003518:	b085      	sub	sp, #20
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_am_status2;
      u_am_status2.base = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	723b      	strb	r3, [r7, #8]
      u_am_status2.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003528:	7a3a      	ldrb	r2, [r7, #8]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6839      	ldr	r1, [r7, #0]
 800352e:	440b      	add	r3, r1
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	b2db      	uxtb	r3, r3
 8003536:	723b      	strb	r3, [r7, #8]
      this->am_status2 = u_am_status2.real;
 8003538:	7a3a      	ldrb	r2, [r7, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->am_status2);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3301      	adds	r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
     return offset;
 8003544:	68fb      	ldr	r3, [r7, #12]
    }
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv>:

    const char * getType(){ return "freeway_joyfw/stm_am_msg"; };
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <_ZN13freeway_joyfw10stm_am_msg7getTypeEv+0x18>)
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	0800d15c 	.word	0x0800d15c

08003570 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev>:
    const char * getMD5(){ return "7d69f08cbd0079f4e385def6382afcb2"; };
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev+0x18>)
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	0800d178 	.word	0x0800d178

0800358c <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe ff56 	bl	8002448 <_ZN3ros3MsgC1Ev>
 800359c:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3308      	adds	r3, #8
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe ff3a 	bl	8002426 <_ZN3ros4TimeC1Ev>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80035b6:	611a      	str	r2, [r3, #16]
    {
    }
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	0800d344 	.word	0x0800d344
 80035c8:	0800d008 	.word	0x0800d008

080035cc <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	b2ca      	uxtb	r2, r1
 80035e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	0a19      	lsrs	r1, r3, #8
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3301      	adds	r3, #1
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	4413      	add	r3, r2
 80035f6:	b2ca      	uxtb	r2, r1
 80035f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	0c19      	lsrs	r1, r3, #16
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3302      	adds	r3, #2
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	4413      	add	r3, r2
 8003608:	b2ca      	uxtb	r2, r1
 800360a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	0e19      	lsrs	r1, r3, #24
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3303      	adds	r3, #3
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4413      	add	r3, r2
 800361a:	b2ca      	uxtb	r2, r1
 800361c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	4413      	add	r3, r2
 800362e:	b2ca      	uxtb	r2, r1
 8003630:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	0a19      	lsrs	r1, r3, #8
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3301      	adds	r3, #1
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	4413      	add	r3, r2
 8003640:	b2ca      	uxtb	r2, r1
 8003642:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	0c19      	lsrs	r1, r3, #16
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3302      	adds	r3, #2
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	4413      	add	r3, r2
 8003652:	b2ca      	uxtb	r2, r1
 8003654:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0e19      	lsrs	r1, r3, #24
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3303      	adds	r3, #3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	4413      	add	r3, r2
 8003664:	b2ca      	uxtb	r2, r1
 8003666:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3304      	adds	r3, #4
 800366c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68d9      	ldr	r1, [r3, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	4413      	add	r3, r2
 8003678:	b2ca      	uxtb	r2, r1
 800367a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a19      	lsrs	r1, r3, #8
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3301      	adds	r3, #1
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4413      	add	r3, r2
 800368a:	b2ca      	uxtb	r2, r1
 800368c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	0c19      	lsrs	r1, r3, #16
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3302      	adds	r3, #2
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	4413      	add	r3, r2
 800369c:	b2ca      	uxtb	r2, r1
 800369e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	0e19      	lsrs	r1, r3, #24
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3303      	adds	r3, #3
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	4413      	add	r3, r2
 80036ae:	b2ca      	uxtb	r2, r1
 80036b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3304      	adds	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fc fd97 	bl	80001f0 <strlen>
 80036c2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fd1b 	bl	8004108 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3304      	adds	r3, #4
 80036d6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	18d0      	adds	r0, r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4619      	mov	r1, r3
 80036e6:	f009 fad1 	bl	800cc8c <memcpy>
      offset += length_frame_id;
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4413      	add	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
      return offset;
 80036f2:	68fb      	ldr	r3, [r7, #12]
    }
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	4413      	add	r3, r2
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	3301      	adds	r3, #1
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	440b      	add	r3, r1
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	3302      	adds	r3, #2
 8003736:	6839      	ldr	r1, [r7, #0]
 8003738:	440b      	add	r3, r1
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	3303      	adds	r3, #3
 800374c:	6839      	ldr	r1, [r7, #0]
 800374e:	440b      	add	r3, r1
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	3304      	adds	r3, #4
 800375e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4413      	add	r3, r2
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	3301      	adds	r3, #1
 8003776:	6839      	ldr	r1, [r7, #0]
 8003778:	440b      	add	r3, r1
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	3302      	adds	r3, #2
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	440b      	add	r3, r1
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	3303      	adds	r3, #3
 80037a2:	6839      	ldr	r1, [r7, #0]
 80037a4:	440b      	add	r3, r1
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	3304      	adds	r3, #4
 80037b4:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	4413      	add	r3, r2
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	3301      	adds	r3, #1
 80037cc:	6839      	ldr	r1, [r7, #0]
 80037ce:	440b      	add	r3, r1
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3302      	adds	r3, #2
 80037e2:	6839      	ldr	r1, [r7, #0]
 80037e4:	440b      	add	r3, r1
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	3303      	adds	r3, #3
 80037f8:	6839      	ldr	r1, [r7, #0]
 80037fa:	440b      	add	r3, r1
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	061b      	lsls	r3, r3, #24
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	3304      	adds	r3, #4
 800380a:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	441a      	add	r2, r3
 8003812:	f107 030c 	add.w	r3, r7, #12
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fc93 	bl	8004144 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	3304      	adds	r3, #4
 8003822:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	429a      	cmp	r2, r3
 8003832:	d20c      	bcs.n	800384e <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	441a      	add	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3b01      	subs	r3, #1
 800383e:	6839      	ldr	r1, [r7, #0]
 8003840:	440b      	add	r3, r1
 8003842:	7812      	ldrb	r2, [r2, #0]
 8003844:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	3301      	adds	r3, #1
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e7ec      	b.n	8003828 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	3b01      	subs	r3, #1
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	4413      	add	r3, r2
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3b01      	subs	r3, #1
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	441a      	add	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
     return offset;
 8003872:	693b      	ldr	r3, [r7, #16]
    }
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	0800d19c 	.word	0x0800d19c

08003898 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	0800d1ac 	.word	0x0800d1ac

080038b4 <_ZN11sensor_msgs5RangeC1Ev>:
      typedef float _range_type;
      _range_type range;
      enum { ULTRASOUND = 0 };
      enum { INFRARED = 1 };

    Range():
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
      header(),
      radiation_type(0),
      field_of_view(0),
      min_range(0),
      max_range(0),
      range(0)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fdc2 	bl	8002448 <_ZN3ros3MsgC1Ev>
 80038c4:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <_ZN11sensor_msgs5RangeC1Ev+0x50>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fe5c 	bl	800358c <_ZN8std_msgs6HeaderC1Ev>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	761a      	strb	r2, [r3, #24]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	621a      	str	r2, [r3, #32]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	0800d32c 	.word	0x0800d32c

08003908 <_ZNK11sensor_msgs5Range9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	1d18      	adds	r0, r3, #4
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	4413      	add	r3, r2
 8003920:	4619      	mov	r1, r3
 8003922:	f7ff fe53 	bl	80035cc <_ZNK8std_msgs6Header9serializeEPh>
 8003926:	4602      	mov	r2, r0
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->radiation_type >> (8 * 0)) & 0xFF;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	4413      	add	r3, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	7e12      	ldrb	r2, [r2, #24]
 8003938:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->radiation_type);
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3301      	adds	r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_field_of_view;
      u_field_of_view.real = this->field_of_view;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_field_of_view.base >> (8 * 0)) & 0xFF;
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	4413      	add	r3, r2
 800394e:	b2ca      	uxtb	r2, r1
 8003950:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_field_of_view.base >> (8 * 1)) & 0xFF;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	0a19      	lsrs	r1, r3, #8
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3301      	adds	r3, #1
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	4413      	add	r3, r2
 800395e:	b2ca      	uxtb	r2, r1
 8003960:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_field_of_view.base >> (8 * 2)) & 0xFF;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	0c19      	lsrs	r1, r3, #16
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3302      	adds	r3, #2
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	4413      	add	r3, r2
 800396e:	b2ca      	uxtb	r2, r1
 8003970:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_field_of_view.base >> (8 * 3)) & 0xFF;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	0e19      	lsrs	r1, r3, #24
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3303      	adds	r3, #3
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	4413      	add	r3, r2
 800397e:	b2ca      	uxtb	r2, r1
 8003980:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->field_of_view);
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3304      	adds	r3, #4
 8003986:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_min_range;
      u_min_range.real = this->min_range;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_min_range.base >> (8 * 0)) & 0xFF;
 800398e:	6979      	ldr	r1, [r7, #20]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	4413      	add	r3, r2
 8003996:	b2ca      	uxtb	r2, r1
 8003998:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_min_range.base >> (8 * 1)) & 0xFF;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	0a19      	lsrs	r1, r3, #8
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3301      	adds	r3, #1
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	4413      	add	r3, r2
 80039a6:	b2ca      	uxtb	r2, r1
 80039a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_min_range.base >> (8 * 2)) & 0xFF;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	0c19      	lsrs	r1, r3, #16
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3302      	adds	r3, #2
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	b2ca      	uxtb	r2, r1
 80039b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_min_range.base >> (8 * 3)) & 0xFF;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	0e19      	lsrs	r1, r3, #24
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3303      	adds	r3, #3
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	4413      	add	r3, r2
 80039c6:	b2ca      	uxtb	r2, r1
 80039c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->min_range);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3304      	adds	r3, #4
 80039ce:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_max_range;
      u_max_range.real = this->max_range;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_max_range.base >> (8 * 0)) & 0xFF;
 80039d6:	6939      	ldr	r1, [r7, #16]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	4413      	add	r3, r2
 80039de:	b2ca      	uxtb	r2, r1
 80039e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_max_range.base >> (8 * 1)) & 0xFF;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	0a19      	lsrs	r1, r3, #8
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4413      	add	r3, r2
 80039ee:	b2ca      	uxtb	r2, r1
 80039f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_max_range.base >> (8 * 2)) & 0xFF;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	0c19      	lsrs	r1, r3, #16
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3302      	adds	r3, #2
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4413      	add	r3, r2
 80039fe:	b2ca      	uxtb	r2, r1
 8003a00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_max_range.base >> (8 * 3)) & 0xFF;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	0e19      	lsrs	r1, r3, #24
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3303      	adds	r3, #3
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	b2ca      	uxtb	r2, r1
 8003a10:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->max_range);
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3304      	adds	r3, #4
 8003a16:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_range;
      u_range.real = this->range;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_range.base >> (8 * 0)) & 0xFF;
 8003a1e:	68f9      	ldr	r1, [r7, #12]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	b2ca      	uxtb	r2, r1
 8003a28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_range.base >> (8 * 1)) & 0xFF;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	0a19      	lsrs	r1, r3, #8
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3301      	adds	r3, #1
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	4413      	add	r3, r2
 8003a36:	b2ca      	uxtb	r2, r1
 8003a38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_range.base >> (8 * 2)) & 0xFF;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	0c19      	lsrs	r1, r3, #16
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	3302      	adds	r3, #2
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	4413      	add	r3, r2
 8003a46:	b2ca      	uxtb	r2, r1
 8003a48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_range.base >> (8 * 3)) & 0xFF;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	0e19      	lsrs	r1, r3, #24
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3303      	adds	r3, #3
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	4413      	add	r3, r2
 8003a56:	b2ca      	uxtb	r2, r1
 8003a58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->range);
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	61fb      	str	r3, [r7, #28]
      return offset;
 8003a60:	69fb      	ldr	r3, [r7, #28]
    }
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <_ZN11sensor_msgs5Range11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b088      	sub	sp, #32
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
      offset += this->header.deserialize(inbuffer + offset);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	1d18      	adds	r0, r3, #4
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4413      	add	r3, r2
 8003a82:	4619      	mov	r1, r3
 8003a84:	f7ff fe3a 	bl	80036fc <_ZN8std_msgs6Header11deserializeEPh>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	61fb      	str	r3, [r7, #28]
      this->radiation_type =  ((uint8_t) (*(inbuffer + offset)));
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	4413      	add	r3, r2
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->radiation_type);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_field_of_view;
      u_field_of_view.base = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	6839      	ldr	r1, [r7, #0]
 8003aac:	440a      	add	r2, r1
 8003aae:	7812      	ldrb	r2, [r2, #0]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	6839      	ldr	r1, [r7, #0]
 8003abc:	440b      	add	r3, r1
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	3302      	adds	r3, #2
 8003acc:	6839      	ldr	r1, [r7, #0]
 8003ace:	440b      	add	r3, r1
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3303      	adds	r3, #3
 8003ade:	6839      	ldr	r1, [r7, #0]
 8003ae0:	440b      	add	r3, r1
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
      this->field_of_view = u_field_of_view.real;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->field_of_view);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3304      	adds	r3, #4
 8003af4:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_min_range;
      u_min_range.base = 0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	6839      	ldr	r1, [r7, #0]
 8003b00:	440a      	add	r2, r1
 8003b02:	7812      	ldrb	r2, [r2, #0]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	6839      	ldr	r1, [r7, #0]
 8003b10:	440b      	add	r3, r1
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	3302      	adds	r3, #2
 8003b20:	6839      	ldr	r1, [r7, #0]
 8003b22:	440b      	add	r3, r1
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3303      	adds	r3, #3
 8003b32:	6839      	ldr	r1, [r7, #0]
 8003b34:	440b      	add	r3, r1
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
      this->min_range = u_min_range.real;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	621a      	str	r2, [r3, #32]
      offset += sizeof(this->min_range);
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3304      	adds	r3, #4
 8003b48:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_max_range;
      u_max_range.base = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	6839      	ldr	r1, [r7, #0]
 8003b54:	440a      	add	r2, r1
 8003b56:	7812      	ldrb	r2, [r2, #0]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3301      	adds	r3, #1
 8003b62:	6839      	ldr	r1, [r7, #0]
 8003b64:	440b      	add	r3, r1
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	3302      	adds	r3, #2
 8003b74:	6839      	ldr	r1, [r7, #0]
 8003b76:	440b      	add	r3, r1
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3303      	adds	r3, #3
 8003b86:	6839      	ldr	r1, [r7, #0]
 8003b88:	440b      	add	r3, r1
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
      this->max_range = u_max_range.real;
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24
      offset += sizeof(this->max_range);
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_range;
      u_range.base = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	440a      	add	r2, r1
 8003baa:	7812      	ldrb	r2, [r2, #0]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	6839      	ldr	r1, [r7, #0]
 8003bb8:	440b      	add	r3, r1
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	6839      	ldr	r1, [r7, #0]
 8003bca:	440b      	add	r3, r1
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3303      	adds	r3, #3
 8003bda:	6839      	ldr	r1, [r7, #0]
 8003bdc:	440b      	add	r3, r1
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
      this->range = u_range.real;
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->range);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	61fb      	str	r3, [r7, #28]
     return offset;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
    }
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <_ZN11sensor_msgs5Range7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Range"; };
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <_ZN11sensor_msgs5Range7getTypeEv+0x18>)
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	0800d1d0 	.word	0x0800d1d0

08003c18 <_ZN11sensor_msgs5Range6getMD5Ev>:
    const char * getMD5(){ return "c005c34273dc426c67a020a87bc24148"; };
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <_ZN11sensor_msgs5Range6getMD5Ev+0x18>)
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	0800d1e4 	.word	0x0800d1e4

08003c34 <_ZN13freeway_joyfw16stm_fw_sonar_msgC1Ev>:
      typedef sensor_msgs::Range _range_right_type;
      _range_right_type range_right;
      typedef sensor_msgs::Range _range_left_type;
      _range_left_type range_left;

    stm_fw_sonar_msg():
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
      range_right(),
      range_left()
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fc02 	bl	8002448 <_ZN3ros3MsgC1Ev>
 8003c44:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <_ZN13freeway_joyfw16stm_fw_sonar_msgC1Ev+0x34>)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fe30 	bl	80038b4 <_ZN11sensor_msgs5RangeC1Ev>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3330      	adds	r3, #48	; 0x30
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fe2b 	bl	80038b4 <_ZN11sensor_msgs5RangeC1Ev>
    {
    }
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	0800d314 	.word	0x0800d314

08003c6c <_ZNK13freeway_joyfw16stm_fw_sonar_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
      offset += this->range_right.serialize(outbuffer + offset);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	1d18      	adds	r0, r3, #4
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7ff fe3f 	bl	8003908 <_ZNK11sensor_msgs5Range9serializeEPh>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
      offset += this->range_left.serialize(outbuffer + offset);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f7ff fe32 	bl	8003908 <_ZNK11sensor_msgs5Range9serializeEPh>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
      return offset;
 8003cac:	68fb      	ldr	r3, [r7, #12]
    }
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <_ZN13freeway_joyfw16stm_fw_sonar_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
      offset += this->range_right.deserialize(inbuffer + offset);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	1d18      	adds	r0, r3, #4
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	4413      	add	r3, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f7ff fecb 	bl	8003a6a <_ZN11sensor_msgs5Range11deserializeEPh>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
      offset += this->range_left.deserialize(inbuffer + offset);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f7ff febe 	bl	8003a6a <_ZN11sensor_msgs5Range11deserializeEPh>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
     return offset;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
    }
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_ZN13freeway_joyfw16stm_fw_sonar_msg7getTypeEv>:

    virtual const char * getType() override { return "freeway_joyfw/stm_fw_sonar_msg"; };
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <_ZN13freeway_joyfw16stm_fw_sonar_msg7getTypeEv+0x18>)
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	0800d208 	.word	0x0800d208

08003d1c <_ZN13freeway_joyfw16stm_fw_sonar_msg6getMD5Ev>:
    virtual const char * getMD5() override { return "91d798d2bd3e20280e142f349dff90b6"; };
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <_ZN13freeway_joyfw16stm_fw_sonar_msg6getMD5Ev+0x18>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	0800d228 	.word	0x0800d228

08003d38 <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE>:
bool g_am_status = false;
bool *e_stop_status, *am_status;
bool pin_stat = false;

// Subscriber:
void am_status_cb(const freeway_joyfw::stm_am_msg &msg) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	g_am_status = msg.am_status2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	791a      	ldrb	r2, [r3, #4]
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE+0x24>)
 8003d46:	701a      	strb	r2, [r3, #0]
	am_status = &g_am_status;
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE+0x28>)
 8003d4a:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE+0x24>)
 8003d4c:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f002 f8ec 	bl	8005f2c <HAL_Delay>
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20001e6c 	.word	0x20001e6c
 8003d60:	20001e74 	.word	0x20001e74

08003d64 <map>:
ros::Subscriber<freeway_joyfw::stm_am_msg> am_status_sub("freeway/am_status", &am_status_cb);

long map(uint32_t a, long b, long c, long d, long e) {
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
	return (a - b)*(e - d)/(c - b) + d;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	1a8a      	subs	r2, r1, r2
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	1a8a      	subs	r2, r1, r2
 8003d88:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4413      	add	r3, r2
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <setup>:

uint32_t previous_time;
uint32_t pub_period_time = 100;

// Setup node:
void setup(void) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
  bool init_pin_stat = false;
 8003da2:	2300      	movs	r3, #0
 8003da4:	71fb      	strb	r3, [r7, #7]
  nh.initNode();
 8003da6:	4837      	ldr	r0, [pc, #220]	; (8003e84 <setup+0xe8>)
 8003da8:	f000 fab4 	bl	8004314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
//  nh.advertiseService(server);
//  nh.advertiseService(server2);
  nh.subscribe(am_status_sub);
 8003dac:	4936      	ldr	r1, [pc, #216]	; (8003e88 <setup+0xec>)
 8003dae:	4835      	ldr	r0, [pc, #212]	; (8003e84 <setup+0xe8>)
 8003db0:	f000 facd 	bl	800434e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_>
  nh.advertise(freeway_diagnostics);
 8003db4:	4935      	ldr	r1, [pc, #212]	; (8003e8c <setup+0xf0>)
 8003db6:	4833      	ldr	r0, [pc, #204]	; (8003e84 <setup+0xe8>)
 8003db8:	f000 faf6 	bl	80043a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  nh.advertise(pub_range);
 8003dbc:	4934      	ldr	r1, [pc, #208]	; (8003e90 <setup+0xf4>)
 8003dbe:	4831      	ldr	r0, [pc, #196]	; (8003e84 <setup+0xe8>)
 8003dc0:	f000 faf2 	bl	80043a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  range_msg.range_left.radiation_type = sensor_msgs::Range::ULTRASOUND;
 8003dc4:	4b33      	ldr	r3, [pc, #204]	; (8003e94 <setup+0xf8>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  range_msg.range_right.radiation_type = sensor_msgs::Range::ULTRASOUND;
 8003dcc:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <setup+0xf8>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	771a      	strb	r2, [r3, #28]
  range_msg.range_left.field_of_view = 0.26;
 8003dd2:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <setup+0xf8>)
 8003dd4:	4a30      	ldr	r2, [pc, #192]	; (8003e98 <setup+0xfc>)
 8003dd6:	64da      	str	r2, [r3, #76]	; 0x4c
  range_msg.range_right.field_of_view = 0.26;
 8003dd8:	4b2e      	ldr	r3, [pc, #184]	; (8003e94 <setup+0xf8>)
 8003dda:	4a2f      	ldr	r2, [pc, #188]	; (8003e98 <setup+0xfc>)
 8003ddc:	621a      	str	r2, [r3, #32]
  range_msg.range_left.min_range = 0.03;
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <setup+0xf8>)
 8003de0:	4a2e      	ldr	r2, [pc, #184]	; (8003e9c <setup+0x100>)
 8003de2:	651a      	str	r2, [r3, #80]	; 0x50
  range_msg.range_right.min_range = 0.03;
 8003de4:	4b2b      	ldr	r3, [pc, #172]	; (8003e94 <setup+0xf8>)
 8003de6:	4a2d      	ldr	r2, [pc, #180]	; (8003e9c <setup+0x100>)
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24
  range_msg.range_left.max_range = 4.0;
 8003dea:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <setup+0xf8>)
 8003dec:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
  range_msg.range_right.max_range = 4.0;
 8003df2:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <setup+0xf8>)
 8003df4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28

  //nh.advertiseService(server2);
  //*e_stop_status = true;
  am_status = &g_am_status;
 8003dfa:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <setup+0x104>)
 8003dfc:	4a29      	ldr	r2, [pc, #164]	; (8003ea4 <setup+0x108>)
 8003dfe:	601a      	str	r2, [r3, #0]

  init_pin_stat = HAL_GPIO_ReadPin(e_stop_GPIO_Port, e_stop_Pin);
 8003e00:	2140      	movs	r1, #64	; 0x40
 8003e02:	4829      	ldr	r0, [pc, #164]	; (8003ea8 <setup+0x10c>)
 8003e04:	f003 fec0 	bl	8007b88 <HAL_GPIO_ReadPin>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bf14      	ite	ne
 8003e0e:	2301      	movne	r3, #1
 8003e10:	2300      	moveq	r3, #0
 8003e12:	71fb      	strb	r3, [r7, #7]
  if(init_pin_stat == false){ //estop on
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <setup+0xb0>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e20:	4822      	ldr	r0, [pc, #136]	; (8003eac <setup+0x110>)
 8003e22:	f003 fec9 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8003e26:	2200      	movs	r2, #0
 8003e28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e2c:	481f      	ldr	r0, [pc, #124]	; (8003eac <setup+0x110>)
 8003e2e:	f003 fec3 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8003e32:	2200      	movs	r2, #0
 8003e34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e38:	481c      	ldr	r0, [pc, #112]	; (8003eac <setup+0x110>)
 8003e3a:	f003 febd 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e44:	4819      	ldr	r0, [pc, #100]	; (8003eac <setup+0x110>)
 8003e46:	f003 feb7 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
  }
}
 8003e4a:	e017      	b.n	8003e7c <setup+0xe0>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e52:	4816      	ldr	r0, [pc, #88]	; (8003eac <setup+0x110>)
 8003e54:	f003 feb0 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e5e:	4813      	ldr	r0, [pc, #76]	; (8003eac <setup+0x110>)
 8003e60:	f003 feaa 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8003e64:	2201      	movs	r2, #1
 8003e66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e6a:	4810      	ldr	r0, [pc, #64]	; (8003eac <setup+0x110>)
 8003e6c:	f003 fea4 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8003e70:	2201      	movs	r2, #1
 8003e72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e76:	480d      	ldr	r0, [pc, #52]	; (8003eac <setup+0x110>)
 8003e78:	f003 fe9e 	bl	8007bb8 <HAL_GPIO_WritePin>
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20001410 	.word	0x20001410
 8003e88:	20001e7c 	.word	0x20001e7c
 8003e8c:	20001d90 	.word	0x20001d90
 8003e90:	20001e58 	.word	0x20001e58
 8003e94:	20001da4 	.word	0x20001da4
 8003e98:	3e851eb8 	.word	0x3e851eb8
 8003e9c:	3cf5c28f 	.word	0x3cf5c28f
 8003ea0:	20001e74 	.word	0x20001e74
 8003ea4:	20001e6c 	.word	0x20001e6c
 8003ea8:	40020000 	.word	0x40020000
 8003eac:	40021000 	.word	0x40021000

08003eb0 <loop>:

// Loop:
uint8_t loop(uint32_t x_val, uint32_t y_val, double r_val, double l_val) {
 8003eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb2:	b091      	sub	sp, #68	; 0x44
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	6178      	str	r0, [r7, #20]
 8003eb8:	6139      	str	r1, [r7, #16]
 8003eba:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ebe:	ed87 1b00 	vstr	d1, [r7]
	static uint8_t r_led_mode = 0;
	double axis_X, axis_Y;
	//bool axis_B = true;
	double l_scale_ = 0.3;
 8003ec2:	a379      	add	r3, pc, #484	; (adr r3, 80040a8 <loop+0x1f8>)
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double a_scale_ = 0.4;
 8003ecc:	a378      	add	r3, pc, #480	; (adr r3, 80040b0 <loop+0x200>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28


	range_msg.range_left.range   = l_val;
 8003ed6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eda:	f7fc fde7 	bl	8000aac <__aeabi_d2f>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a63      	ldr	r2, [pc, #396]	; (8004070 <loop+0x1c0>)
 8003ee2:	6593      	str	r3, [r2, #88]	; 0x58
	range_msg.range_right.range  = r_val;
 8003ee4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ee8:	f7fc fde0 	bl	8000aac <__aeabi_d2f>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4a60      	ldr	r2, [pc, #384]	; (8004070 <loop+0x1c0>)
 8003ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

	pin_stat = HAL_GPIO_ReadPin(e_stop_GPIO_Port, e_stop_Pin);
 8003ef2:	2140      	movs	r1, #64	; 0x40
 8003ef4:	485f      	ldr	r0, [pc, #380]	; (8004074 <loop+0x1c4>)
 8003ef6:	f003 fe47 	bl	8007b88 <HAL_GPIO_ReadPin>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	4b5c      	ldr	r3, [pc, #368]	; (8004078 <loop+0x1c8>)
 8003f08:	701a      	strb	r2, [r3, #0]
	e_stop_status = &pin_stat;
 8003f0a:	4b5c      	ldr	r3, [pc, #368]	; (800407c <loop+0x1cc>)
 8003f0c:	4a5a      	ldr	r2, [pc, #360]	; (8004078 <loop+0x1c8>)
 8003f0e:	601a      	str	r2, [r3, #0]

	if(previous_time + pub_period_time <= HAL_GetTick()) {
 8003f10:	4b5b      	ldr	r3, [pc, #364]	; (8004080 <loop+0x1d0>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b5b      	ldr	r3, [pc, #364]	; (8004084 <loop+0x1d4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	18d6      	adds	r6, r2, r3
 8003f1a:	f001 fffb 	bl	8005f14 <HAL_GetTick>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	429e      	cmp	r6, r3
 8003f22:	bf94      	ite	ls
 8003f24:	2301      	movls	r3, #1
 8003f26:	2300      	movhi	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 8097 	beq.w	800405e <loop+0x1ae>
	  if (*e_stop_status==true && *am_status==true) { //if var 'am_status == true' , it defines manual mode
 8003f30:	4b52      	ldr	r3, [pc, #328]	; (800407c <loop+0x1cc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d168      	bne.n	800400c <loop+0x15c>
 8003f3a:	4b53      	ldr	r3, [pc, #332]	; (8004088 <loop+0x1d8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d163      	bne.n	800400c <loop+0x15c>
		  axis_X = map(x_val,0,4095,-10000,10000) / (float)10000.0;
 8003f44:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	4b50      	ldr	r3, [pc, #320]	; (800408c <loop+0x1dc>)
 8003f4c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003f50:	2100      	movs	r1, #0
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f7ff ff06 	bl	8003d64 <map>
 8003f58:	ee07 0a90 	vmov	s15, r0
 8003f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f60:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004090 <loop+0x1e0>
 8003f64:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f68:	ee16 0a90 	vmov	r0, s13
 8003f6c:	f7fc faac 	bl	80004c8 <__aeabi_f2d>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  axis_Y = map(y_val,0,4095,-10000,10000) / (float)10000.0;
 8003f78:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	4b43      	ldr	r3, [pc, #268]	; (800408c <loop+0x1dc>)
 8003f80:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003f84:	2100      	movs	r1, #0
 8003f86:	6938      	ldr	r0, [r7, #16]
 8003f88:	f7ff feec 	bl	8003d64 <map>
 8003f8c:	ee07 0a90 	vmov	s15, r0
 8003f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f94:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004090 <loop+0x1e0>
 8003f98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f9c:	ee16 0a90 	vmov	r0, s13
 8003fa0:	f7fc fa92 	bl	80004c8 <__aeabi_f2d>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	e9c7 2306 	strd	r2, r3, [r7, #24]

		  //cmd_vel_msg.linear.x = l_scale_ * axis_X;
		  //cmd_vel_msg.angular.z = a_scale_ * axis_Y;
		  stm_pub_msg.am_status = true;
 8003fac:	4b39      	ldr	r3, [pc, #228]	; (8004094 <loop+0x1e4>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	711a      	strb	r2, [r3, #4]
		  stm_pub_msg.e_stop_status = true;
 8003fb2:	4b38      	ldr	r3, [pc, #224]	; (8004094 <loop+0x1e4>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	715a      	strb	r2, [r3, #5]
		  stm_pub_msg.cmd_vel_mcu.linear.x = l_scale_ * axis_X;
 8003fb8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fbc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003fc0:	f7fc fada 	bl	8000578 <__aeabi_dmul>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f7fc fd6e 	bl	8000aac <__aeabi_d2f>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4a30      	ldr	r2, [pc, #192]	; (8004094 <loop+0x1e4>)
 8003fd4:	6113      	str	r3, [r2, #16]
		  stm_pub_msg.cmd_vel_mcu.angular.z = -a_scale_ * axis_Y;
 8003fd6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003fde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	f7fc fac7 	bl	8000578 <__aeabi_dmul>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f7fc fd5b 	bl	8000aac <__aeabi_d2f>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a26      	ldr	r2, [pc, #152]	; (8004094 <loop+0x1e4>)
 8003ffa:	6293      	str	r3, [r2, #40]	; 0x28

		  freeway_diagnostics.publish(&stm_pub_msg);
 8003ffc:	4925      	ldr	r1, [pc, #148]	; (8004094 <loop+0x1e4>)
 8003ffe:	4826      	ldr	r0, [pc, #152]	; (8004098 <loop+0x1e8>)
 8004000:	f7ff f86f 	bl	80030e2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		  r_led_mode = 2;
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <loop+0x1ec>)
 8004006:	2202      	movs	r2, #2
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e01f      	b.n	800404c <loop+0x19c>

		  //HAL_UART_Transmit_IT(&huart3, stm_pub_msg, sizeof(stm_pub_msg));
	  }
	  else if (*e_stop_status==false) // e_stop is on & *am_status is on/off
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <loop+0x1cc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d117      	bne.n	8004046 <loop+0x196>
	  {
		  stm_pub_msg.am_status = *am_status;
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <loop+0x1d8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <loop+0x1e4>)
 800401e:	711a      	strb	r2, [r3, #4]
		  stm_pub_msg.e_stop_status = false;
 8004020:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <loop+0x1e4>)
 8004022:	2200      	movs	r2, #0
 8004024:	715a      	strb	r2, [r3, #5]
		  stm_pub_msg.cmd_vel_mcu.linear.x = 0;
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <loop+0x1e4>)
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	611a      	str	r2, [r3, #16]
		  stm_pub_msg.cmd_vel_mcu.angular.z = 0;
 800402e:	4b19      	ldr	r3, [pc, #100]	; (8004094 <loop+0x1e4>)
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	629a      	str	r2, [r3, #40]	; 0x28

		  freeway_diagnostics.publish(&stm_pub_msg);
 8004036:	4917      	ldr	r1, [pc, #92]	; (8004094 <loop+0x1e4>)
 8004038:	4817      	ldr	r0, [pc, #92]	; (8004098 <loop+0x1e8>)
 800403a:	f7ff f852 	bl	80030e2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

		  r_led_mode = 1;
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <loop+0x1ec>)
 8004040:	2201      	movs	r2, #1
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	e002      	b.n	800404c <loop+0x19c>

		  //HAL_UART_Transmit_IT(&huart3, stm_pub_msg, sizeof(stm_pub_msg));
	  }
	  else r_led_mode = 0;
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <loop+0x1ec>)
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]

	  pub_range.publish(&range_msg);
 800404c:	4908      	ldr	r1, [pc, #32]	; (8004070 <loop+0x1c0>)
 800404e:	4814      	ldr	r0, [pc, #80]	; (80040a0 <loop+0x1f0>)
 8004050:	f7ff f847 	bl	80030e2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  previous_time = HAL_GetTick();
 8004054:	f001 ff5e 	bl	8005f14 <HAL_GetTick>
 8004058:	4603      	mov	r3, r0
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <loop+0x1d0>)
 800405c:	6013      	str	r3, [r2, #0]
	}

	  nh.spinOnce();
 800405e:	4811      	ldr	r0, [pc, #68]	; (80040a4 <loop+0x1f4>)
 8004060:	f000 f9d0 	bl	8004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

	  return r_led_mode;
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <loop+0x1ec>)
 8004066:	781b      	ldrb	r3, [r3, #0]
	}
 8004068:	4618      	mov	r0, r3
 800406a:	373c      	adds	r7, #60	; 0x3c
 800406c:	46bd      	mov	sp, r7
 800406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004070:	20001da4 	.word	0x20001da4
 8004074:	40020000 	.word	0x40020000
 8004078:	20001e78 	.word	0x20001e78
 800407c:	20001e70 	.word	0x20001e70
 8004080:	20001e98 	.word	0x20001e98
 8004084:	20000000 	.word	0x20000000
 8004088:	20001e74 	.word	0x20001e74
 800408c:	ffffd8f0 	.word	0xffffd8f0
 8004090:	461c4000 	.word	0x461c4000
 8004094:	20001d64 	.word	0x20001d64
 8004098:	20001d90 	.word	0x20001d90
 800409c:	20001e9c 	.word	0x20001e9c
 80040a0:	20001e58 	.word	0x20001e58
 80040a4:	20001410 	.word	0x20001410
 80040a8:	33333333 	.word	0x33333333
 80040ac:	3fd33333 	.word	0x3fd33333
 80040b0:	9999999a 	.word	0x9999999a
 80040b4:	3fd99999 	.word	0x3fd99999

080040b8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  for (int i=0; i<1; i++){
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	dc0f      	bgt.n	80040ec <HAL_GPIO_EXTI_Callback+0x34>
	pin_stat = HAL_GPIO_ReadPin(e_stop_GPIO_Port, e_stop_Pin);
 80040cc:	2140      	movs	r1, #64	; 0x40
 80040ce:	480b      	ldr	r0, [pc, #44]	; (80040fc <HAL_GPIO_EXTI_Callback+0x44>)
 80040d0:	f003 fd5a 	bl	8007b88 <HAL_GPIO_ReadPin>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf14      	ite	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	2300      	moveq	r3, #0
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <HAL_GPIO_EXTI_Callback+0x48>)
 80040e2:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<1; i++){
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e7ec      	b.n	80040c6 <HAL_GPIO_EXTI_Callback+0xe>
  }
  e_stop_status = &pin_stat;
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_GPIO_EXTI_Callback+0x4c>)
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <HAL_GPIO_EXTI_Callback+0x48>)
 80040f0:	601a      	str	r2, [r3, #0]
//  RESULT.result = 1;
//
//  clt.call(ESTOP_STATUS, RESULT);
  //HAL_Delay(1);

}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40020000 	.word	0x40020000
 8004100:	20001e78 	.word	0x20001e78
 8004104:	20001e70 	.word	0x20001e70

08004108 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d80d      	bhi.n	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	fa22 f103 	lsr.w	r1, r2, r3
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	b2ca      	uxtb	r2, r1
 800412e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e7ee      	b.n	8004116 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d811      	bhi.n	8004182 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6839      	ldr	r1, [r7, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	440a      	add	r2, r1
 8004168:	7812      	ldrb	r2, [r2, #0]
 800416a:	4611      	mov	r1, r2
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	00d2      	lsls	r2, r2, #3
 8004170:	fa01 f202 	lsl.w	r2, r1, r2
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3301      	adds	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e7ea      	b.n	8004158 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	0800d3d4 	.word	0x0800d3d4

080041b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff ffe8 	bl	8004190 <_ZN3ros15NodeHandleBase_C1Ev>
 80041c0:	4a39      	ldr	r2, [pc, #228]	; (80042a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xf8>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe f816 	bl	80021fc <_ZN13STM32HardwareC1Ev>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fca6 	bl	8002b30 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b18      	cmp	r3, #24
 80041ec:	d80a      	bhi.n	8004204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x54>
      publishers[i] = 0;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	f202 2206 	addw	r2, r2, #518	; 0x206
 80041f6:	2100      	movs	r1, #0
 80041f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3301      	adds	r3, #1
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e7f1      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b18      	cmp	r3, #24
 800420c:	d80b      	bhi.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x76>
      subscribers[i] = 0;
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	2200      	movs	r2, #0
 800421c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3301      	adds	r3, #1
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	e7f0      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004230:	d209      	bcs.n	8004246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x96>
      message_in[i] = 0;
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	3318      	adds	r3, #24
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3301      	adds	r3, #1
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e7f1      	b.n	800422a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004250:	d20a      	bcs.n	8004268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xb8>
      message_out[i] = 0;
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	3301      	adds	r3, #1
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	e7f0      	b.n	800424a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
    req_param_resp.ints = NULL;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
    req_param_resp.floats_length = 0;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.floats = NULL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.ints_length = 0;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
    req_param_resp.ints = NULL;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914

    spin_timeout_ = 0;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]
  }
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	0800d300 	.word	0x0800d300

080042ac <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	0800d3bc 	.word	0x0800d3bc

080042cc <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ffe5 	bl	80042ac <_ZN3ros11Subscriber_C1Ev>
 80042e2:	4a0b      	ldr	r2, [pc, #44]	; (8004310 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei+0x44>)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	330c      	adds	r3, #12
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff f8e3 	bl	80034b8 <_ZN13freeway_joyfw10stm_am_msgC1Ev>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	615a      	str	r2, [r3, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	609a      	str	r2, [r3, #8]
  };
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	0800d2e8 	.word	0x0800d2e8

08004314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4618      	mov	r0, r3
 8004322:	f7fd ff7b 	bl	800221c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
    bytes_ = 0;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
    index_ = 0;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    topic_ = 0;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
  };
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b18      	cmp	r3, #24
 8004360:	dc1b      	bgt.n	800439a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10e      	bne.n	8004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	605a      	str	r2, [r3, #4]
        return true;
 800438e:	2301      	movs	r3, #1
 8004390:	e004      	b.n	800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3301      	adds	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	e7e0      	b.n	800435c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0xe>
      }
    }
    return false;
 800439a:	2300      	movs	r3, #0
  }
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b18      	cmp	r3, #24
 80043ba:	dc1c      	bgt.n	80043f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	f202 2206 	addw	r2, r2, #518	; 0x206
 80043c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d110      	bne.n	80043ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	f202 2206 	addw	r2, r2, #518	; 0x206
 80043d4:	6839      	ldr	r1, [r7, #0]
 80043d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	60da      	str	r2, [r3, #12]
        return true;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e004      	b.n	80043f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e7df      	b.n	80043b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80043f6:	2300      	movs	r3, #0
  }
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4618      	mov	r0, r3
 8004412:	f7fd ff2f 	bl	8002274 <_ZN13STM32Hardware4timeEv>
 8004416:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004426:	4293      	cmp	r3, r2
 8004428:	d903      	bls.n	8004432 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
    if (mode_ != MODE_FIRST_FF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d903      	bls.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
      if (spin_timeout_ > 0)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	4618      	mov	r0, r3
 800445e:	f7fd ff09 	bl	8002274 <_ZN13STM32Hardware4timeEv>
 8004462:	4602      	mov	r2, r0
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1ad2      	subs	r2, r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	429a      	cmp	r2, r3
 800446e:	bf8c      	ite	hi
 8004470:	2301      	movhi	r3, #1
 8004472:	2300      	movls	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 800447a:	f06f 0301 	mvn.w	r3, #1
 800447e:	e190      	b.n	80047a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fed6 	bl	8002236 <_ZN13STM32Hardware4readEv>
 800448a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f2c0 8170 	blt.w	8004774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x370>
      checksum_ += data;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80044aa:	2b07      	cmp	r3, #7
 80044ac:	d11d      	bne.n	80044ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044b4:	1c59      	adds	r1, r3, #1
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	f8c2 18ec 	str.w	r1, [r2, #2284]	; 0x8ec
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	b2d1      	uxtb	r1, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	460a      	mov	r2, r1
 80044c6:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 80044ce:	1e5a      	subs	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1b7      	bne.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2208      	movs	r2, #8
 80044e4:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 80044e8:	e7b2      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d128      	bne.n	8004546 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x142>
        if (data == 0xff)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2bff      	cmp	r3, #255	; 0xff
 80044f8:	d10d      	bne.n	8004516 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x112>
          mode_++;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f103 0214 	add.w	r2, r3, #20
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8004514:	e79c      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	4618      	mov	r0, r3
 800451c:	f7fd feaa 	bl	8002274 <_ZN13STM32Hardware4timeEv>
 8004520:	4602      	mov	r2, r0
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	; 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	bf8c      	ite	hi
 800452e:	2301      	movhi	r3, #1
 8004530:	2300      	movls	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d08b      	beq.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
          return SPIN_TIMEOUT;
 8004540:	f06f 0301 	mvn.w	r3, #1
 8004544:	e12d      	b.n	80047a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 800454c:	2b01      	cmp	r3, #1
 800454e:	d118      	bne.n	8004582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2bfe      	cmp	r3, #254	; 0xfe
 8004554:	d107      	bne.n	8004566 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8004564:	e774      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
          if (configured_ == false)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 8004574:	2b00      	cmp	r3, #0
 8004576:	f47f af6b 	bne.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f915 	bl	80047aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8004580:	e766      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004588:	2b02      	cmp	r3, #2
 800458a:	d113      	bne.n	80045b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1b0>
        bytes_ = data;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        index_ = 0;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        mode_++;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        checksum_ = data;               /* first byte for calculating size checksum */
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80045b2:	e74d      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d110      	bne.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 28e4 	ldr.w	r2, [r3, #2276]	; 0x8e4
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	441a      	add	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        mode_++;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 80045de:	e737      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d116      	bne.n	8004618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80045f0:	425a      	negs	r2, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	bf58      	it	pl
 80045f8:	4253      	negpl	r3, r2
 80045fa:	2bff      	cmp	r3, #255	; 0xff
 80045fc:	d107      	bne.n	800460e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x20a>
          mode_++;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 800460c:	e720      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8004616:	e71b      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 800461e:	2b05      	cmp	r3, #5
 8004620:	d10f      	bne.n	8004642 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23e>
        topic_ = data;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_++;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        checksum_ = data;               /* first byte included in checksum */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8004640:	e706      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004648:	2b06      	cmp	r3, #6
 800464a:	d117      	bne.n	800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x278>
        topic_ += data << 8;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 28e8 	ldr.w	r2, [r3, #2280]	; 0x8e8
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	441a      	add	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_ = MODE_MESSAGE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2207      	movs	r2, #7
 8004662:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        if (bytes_ == 0)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800466c:	2b00      	cmp	r3, #0
 800466e:	f47f aeef 	bne.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2208      	movs	r2, #8
 8004676:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 800467a:	e6e9      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004682:	2b08      	cmp	r3, #8
 8004684:	f47f aee4 	bne.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        if ((checksum_ % 256) == 255)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004696:	425a      	negs	r2, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	bf58      	it	pl
 800469e:	4253      	negpl	r3, r2
 80046a0:	2bff      	cmp	r3, #255	; 0xff
 80046a2:	f47f aed5 	bne.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d110      	bne.n	80046d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2ce>
            requestSyncTime();
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f87a 	bl	80047aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f894 	bl	80047e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
            last_sync_receive_time = c_time;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
            return SPIN_ERR;
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295
 80046d0:	e067      	b.n	80047a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 80046d8:	2b0a      	cmp	r3, #10
 80046da:	d106      	bne.n	80046ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3318      	adds	r3, #24
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f95e 	bl	80049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80046e8:	e6b2      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 80046f0:	2b06      	cmp	r3, #6
 80046f2:	d10d      	bne.n	8004710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f603 1208 	addw	r2, r3, #2312	; 0x908
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3318      	adds	r3, #24
 80046fe:	4619      	mov	r1, r3
 8004700:	4610      	mov	r0, r2
 8004702:	f7fe fb4a 	bl	8002d9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 800470e:	e69f      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8004716:	2b0b      	cmp	r3, #11
 8004718:	d104      	bne.n	8004724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x320>
            configured_ = false;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8004722:	e695      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 800472a:	3b64      	subs	r3, #100	; 0x64
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f43f ae89 	beq.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8004744:	3b64      	subs	r3, #100	; 0x64
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	6858      	ldr	r0, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8004758:	3b64      	subs	r3, #100	; 0x64
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	3218      	adds	r2, #24
 800476e:	4611      	mov	r1, r2
 8004770:	4798      	blx	r3
    while (true)
 8004772:	e66d      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 8004774:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00f      	beq.n	80047a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800478e:	4293      	cmp	r3, r2
 8004790:	d906      	bls.n	80047a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39c>
      requestSyncTime();
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f809 	bl	80047aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    return SPIN_OK;
 80047a0:	2300      	movs	r3, #0
  }
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80047b2:	f107 030c 	add.w	r3, r7, #12
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd fe56 	bl	8002468 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f107 020c 	add.w	r2, r7, #12
 80047c6:	210a      	movs	r1, #10
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4798      	blx	r3
    rt_time = hardware_.time();
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fd fd4f 	bl	8002274 <_ZN13STM32Hardware4timeEv>
 80047d6:	4602      	mov	r2, r0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	609a      	str	r2, [r3, #8]
  }
 80047dc:	bf00      	nop
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80047e4:	b590      	push	{r4, r7, lr}
 80047e6:	b08b      	sub	sp, #44	; 0x2c
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80047ec:	f107 030c 	add.w	r3, r7, #12
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fd ff29 	bl	8002648 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	2b18      	cmp	r3, #24
 80047fe:	dc5b      	bgt.n	80048b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004804:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d04f      	beq.n	80048b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004814:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	b29b      	uxth	r3, r3
 8004820:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	f202 2206 	addw	r2, r2, #518	; 0x206
 800482a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004836:	f202 2206 	addw	r2, r2, #518	; 0x206
 800483a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004844:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4608      	mov	r0, r1
 8004856:	4798      	blx	r3
 8004858:	4603      	mov	r3, r0
 800485a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004860:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004868:	6859      	ldr	r1, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486e:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4608      	mov	r0, r1
 8004880:	4798      	blx	r3
 8004882:	4603      	mov	r3, r0
 8004884:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800488a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681c      	ldr	r4, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	f202 2206 	addw	r2, r2, #518	; 0x206
 800489a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fc33 	bl	800310a <_ZN3ros9Publisher15getEndpointTypeEv>
 80048a4:	4601      	mov	r1, r0
 80048a6:	f107 030c 	add.w	r3, r7, #12
 80048aa:	461a      	mov	r2, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	3301      	adds	r3, #1
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
 80048b6:	e7a0      	b.n	80047fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80048b8:	2300      	movs	r3, #0
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	2b18      	cmp	r3, #24
 80048c0:	dc68      	bgt.n	8004994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d05b      	beq.n	800498c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	6859      	ldr	r1, [r3, #4]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4608      	mov	r0, r1
 800491e:	4798      	blx	r3
 8004920:	4603      	mov	r3, r0
 8004922:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	6859      	ldr	r1, [r3, #4]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4608      	mov	r0, r1
 8004948:	4798      	blx	r3
 800494a:	4603      	mov	r3, r0
 800494c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800494e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004952:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681c      	ldr	r4, [r3, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	6859      	ldr	r1, [r3, #4]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3304      	adds	r3, #4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4608      	mov	r0, r1
 800497e:	4798      	blx	r3
 8004980:	4601      	mov	r1, r0
 8004982:	f107 030c 	add.w	r3, r7, #12
 8004986:	461a      	mov	r2, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	3301      	adds	r3, #1
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
 8004992:	e793      	b.n	80048bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
  }
 800499c:	bf00      	nop
 800499e:	372c      	adds	r7, #44	; 0x2c
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd90      	pop	{r4, r7, pc}

080049a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80049ae:	f107 0308 	add.w	r3, r7, #8
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fd fd58 	bl	8002468 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fd fc59 	bl	8002274 <_ZN13STM32Hardware4timeEv>
 80049c2:	4602      	mov	r2, r0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80049cc:	f107 0308 	add.w	r3, r7, #8
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd fdb8 	bl	8002548 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4914      	ldr	r1, [pc, #80]	; (8004a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 80049de:	fba1 1303 	umull	r1, r3, r1, r3
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	4413      	add	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80049e8:	6939      	ldr	r1, [r7, #16]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 80049ee:	fba3 0302 	umull	r0, r3, r3, r2
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049f8:	fb00 f303 	mul.w	r3, r0, r3
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	4a0d      	ldr	r2, [pc, #52]	; (8004a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x90>)
 8004a00:	fb02 f303 	mul.w	r3, r2, r3
 8004a04:	440b      	add	r3, r1
 8004a06:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004a08:	f107 0308 	add.w	r3, r7, #8
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f8a5 	bl	8004b60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fd fc2a 	bl	8002274 <_ZN13STM32Hardware4timeEv>
 8004a20:	4602      	mov	r2, r0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
  }
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	10624dd3 	.word	0x10624dd3
 8004a34:	000f4240 	.word	0x000f4240

08004a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b63      	cmp	r3, #99	; 0x63
 8004a48:	dd09      	ble.n	8004a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 8004a50:	f083 0301 	eor.w	r3, r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e079      	b.n	8004b52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	f502 6283 	add.w	r2, r2, #1048	; 0x418
 8004a6a:	3207      	adds	r2, #7
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
 8004a72:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	22ff      	movs	r2, #255	; 0xff
 8004a78:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    message_out[1] = PROTOCOL_VER;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	22fe      	movs	r2, #254	; 0xfe
 8004a80:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 241a 	ldrb.w	r2, [r3, #1050]	; 0x41a
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8004aaa:	4413      	add	r3, r2
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	b21b      	sxth	r3, r3
 8004ac6:	121b      	asrs	r3, r3, #8
 8004ac8:	b21b      	sxth	r3, r3
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e

    /* calculate checksum */
    int chk = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004ad6:	2305      	movs	r3, #5
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	3306      	adds	r3, #6
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	dc0d      	bgt.n	8004b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	3301      	adds	r3, #1
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	e7ec      	b.n	8004ada <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	3307      	adds	r3, #7
 8004b04:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	425a      	negs	r2, r3
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	bf58      	it	pl
 8004b10:	4253      	negpl	r3, r2
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	1c59      	adds	r1, r3, #1
 8004b18:	6179      	str	r1, [r7, #20]
 8004b1a:	43d2      	mvns	r2, r2
 8004b1c:	b2d1      	uxtb	r1, r2
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	460a      	mov	r2, r1
 8004b24:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    if (l <= OUTPUT_SIZE)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2e:	dc0a      	bgt.n	8004b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1d18      	adds	r0, r3, #4
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f7fd fb88 	bl	8002252 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	e005      	b.n	8004b52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004b46:	4905      	ldr	r1, [pc, #20]	; (8004b5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f847 	bl	8004bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	0800d24c 	.word	0x0800d24c

08004b60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fd fb80 	bl	8002274 <_ZN13STM32Hardware4timeEv>
 8004b74:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4914      	ldr	r1, [pc, #80]	; (8004bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 8004b7e:	fba1 1303 	umull	r1, r3, r1, r3
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	1e5a      	subs	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 8004b94:	fba3 0302 	umull	r0, r3, r3, r2
 8004b98:	099b      	lsrs	r3, r3, #6
 8004b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b9e:	fb00 f303 	mul.w	r3, r0, r3
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	4a0b      	ldr	r2, [pc, #44]	; (8004bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	1aca      	subs	r2, r1, r3
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8004bae:	4413      	add	r3, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f103 020c 	add.w	r2, r3, #12
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3310      	adds	r3, #16
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f7fc faf5 	bl	80011b0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	10624dd3 	.word	0x10624dd3
 8004bd4:	000f4240 	.word	0x000f4240
 8004bd8:	3b9aca00 	.word	0x3b9aca00

08004bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	2103      	movs	r1, #3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f804 	bl	8004bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	460b      	mov	r3, r1
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004c06:	f107 0314 	add.w	r3, r7, #20
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fd fee0 	bl	80029d0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004c10:	7afb      	ldrb	r3, [r7, #11]
 8004c12:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f107 0214 	add.w	r2, r7, #20
 8004c22:	2107      	movs	r1, #7
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	4798      	blx	r3
  }
 8004c28:	bf00      	nop
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <_Z41__static_initialization_and_destruction_0ii>:
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d128      	bne.n	8004c92 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d123      	bne.n	8004c92 <_Z41__static_initialization_and_destruction_0ii+0x62>
ros::NodeHandle nh;
 8004c4a:	4814      	ldr	r0, [pc, #80]	; (8004c9c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004c4c:	f7ff fab0 	bl	80041b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Twist cmd_vel_msg;
 8004c50:	4813      	ldr	r0, [pc, #76]	; (8004ca0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004c52:	f7fe fb0d 	bl	8003270 <_ZN13geometry_msgs5TwistC1Ev>
freeway_joyfw::stm_fw_msg stm_pub_msg;
 8004c56:	4813      	ldr	r0, [pc, #76]	; (8004ca4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004c58:	f7fe fb8c 	bl	8003374 <_ZN13freeway_joyfw10stm_fw_msgC1Ev>
ros::Publisher freeway_diagnostics("freeway/diagnostics", &stm_pub_msg);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004c60:	4911      	ldr	r1, [pc, #68]	; (8004ca8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004c62:	4812      	ldr	r0, [pc, #72]	; (8004cac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004c64:	f7fe fa26 	bl	80030b4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
freeway_joyfw::stm_fw_sonar_msg range_msg;
 8004c68:	4811      	ldr	r0, [pc, #68]	; (8004cb0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004c6a:	f7fe ffe3 	bl	8003c34 <_ZN13freeway_joyfw16stm_fw_sonar_msgC1Ev>
sensor_msgs::Range range_left;
 8004c6e:	4811      	ldr	r0, [pc, #68]	; (8004cb4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004c70:	f7fe fe20 	bl	80038b4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range range_right;
 8004c74:	4810      	ldr	r0, [pc, #64]	; (8004cb8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004c76:	f7fe fe1d 	bl	80038b4 <_ZN11sensor_msgs5RangeC1Ev>
ros::Publisher pub_range("freeway/ultrasound", &range_msg);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004c7e:	490f      	ldr	r1, [pc, #60]	; (8004cbc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004c80:	480f      	ldr	r0, [pc, #60]	; (8004cc0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004c82:	f7fe fa17 	bl	80030b4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<freeway_joyfw::stm_am_msg> am_status_sub("freeway/am_status", &am_status_cb);
 8004c86:	2301      	movs	r3, #1
 8004c88:	4a0e      	ldr	r2, [pc, #56]	; (8004cc4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004c8a:	490f      	ldr	r1, [pc, #60]	; (8004cc8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004c8c:	480f      	ldr	r0, [pc, #60]	; (8004ccc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004c8e:	f7ff fb1d 	bl	80042cc <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20001410 	.word	0x20001410
 8004ca0:	20001d40 	.word	0x20001d40
 8004ca4:	20001d64 	.word	0x20001d64
 8004ca8:	0800d288 	.word	0x0800d288
 8004cac:	20001d90 	.word	0x20001d90
 8004cb0:	20001da4 	.word	0x20001da4
 8004cb4:	20001e00 	.word	0x20001e00
 8004cb8:	20001e2c 	.word	0x20001e2c
 8004cbc:	0800d29c 	.word	0x0800d29c
 8004cc0:	20001e58 	.word	0x20001e58
 8004cc4:	08003d39 	.word	0x08003d39
 8004cc8:	0800d2b0 	.word	0x0800d2b0
 8004ccc:	20001e7c 	.word	0x20001e7c

08004cd0 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	6839      	ldr	r1, [r7, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fc18 	bl	8003516 <_ZN13freeway_joyfw10stm_am_msg11deserializeEPh>
    this->cb_(msg);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	320c      	adds	r2, #12
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4798      	blx	r3
  }
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
  }
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fc18 	bl	8003554 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv>
 8004d24:	4603      	mov	r3, r0
  }
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe fc18 	bl	8003570 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev>
 8004d40:	4603      	mov	r3, r0
  }
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
    return configured_;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
  };
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <_GLOBAL__sub_I_nh>:
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	f7ff ff5f 	bl	8004c30 <_Z41__static_initialization_and_destruction_0ii>
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <HAL_MspInit+0x4c>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	4a0f      	ldr	r2, [pc, #60]	; (8004dc0 <HAL_MspInit+0x4c>)
 8004d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d88:	6453      	str	r3, [r2, #68]	; 0x44
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <HAL_MspInit+0x4c>)
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	603b      	str	r3, [r7, #0]
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <HAL_MspInit+0x4c>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <HAL_MspInit+0x4c>)
 8004da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da4:	6413      	str	r3, [r2, #64]	; 0x40
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_MspInit+0x4c>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800

08004dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dcc:	f107 0314 	add.w	r3, r7, #20
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a2f      	ldr	r2, [pc, #188]	; (8004ea0 <HAL_ADC_MspInit+0xdc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d157      	bne.n	8004e96 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	4b2e      	ldr	r3, [pc, #184]	; (8004ea4 <HAL_ADC_MspInit+0xe0>)
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	4a2d      	ldr	r2, [pc, #180]	; (8004ea4 <HAL_ADC_MspInit+0xe0>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df4:	6453      	str	r3, [r2, #68]	; 0x44
 8004df6:	4b2b      	ldr	r3, [pc, #172]	; (8004ea4 <HAL_ADC_MspInit+0xe0>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <HAL_ADC_MspInit+0xe0>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <HAL_ADC_MspInit+0xe0>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	6313      	str	r3, [r2, #48]	; 0x30
 8004e12:	4b24      	ldr	r3, [pc, #144]	; (8004ea4 <HAL_ADC_MspInit+0xe0>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004e1e:	2330      	movs	r3, #48	; 0x30
 8004e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e22:	2303      	movs	r3, #3
 8004e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2a:	f107 0314 	add.w	r3, r7, #20
 8004e2e:	4619      	mov	r1, r3
 8004e30:	481d      	ldr	r0, [pc, #116]	; (8004ea8 <HAL_ADC_MspInit+0xe4>)
 8004e32:	f002 fcfd 	bl	8007830 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8004e36:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e38:	4a1d      	ldr	r2, [pc, #116]	; (8004eb0 <HAL_ADC_MspInit+0xec>)
 8004e3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e42:	4b1a      	ldr	r3, [pc, #104]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e48:	4b18      	ldr	r3, [pc, #96]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e4e:	4b17      	ldr	r3, [pc, #92]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e56:	4b15      	ldr	r3, [pc, #84]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e66:	4b11      	ldr	r3, [pc, #68]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e74:	4b0d      	ldr	r3, [pc, #52]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004e7a:	480c      	ldr	r0, [pc, #48]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e7c:	f001 fdae 	bl	80069dc <HAL_DMA_Init>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004e86:	f7fd f9b3 	bl	80021f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a07      	ldr	r2, [pc, #28]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38
 8004e90:	4a06      	ldr	r2, [pc, #24]	; (8004eac <HAL_ADC_MspInit+0xe8>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004e96:	bf00      	nop
 8004e98:	3728      	adds	r7, #40	; 0x28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40012000 	.word	0x40012000
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40020000 	.word	0x40020000
 8004eac:	20000a6c 	.word	0x20000a6c
 8004eb0:	40026470 	.word	0x40026470

08004eb4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08e      	sub	sp, #56	; 0x38
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a55      	ldr	r2, [pc, #340]	; (8005028 <HAL_ETH_MspInit+0x174>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	f040 80a4 	bne.w	8005020 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004ed8:	2300      	movs	r3, #0
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	4b53      	ldr	r3, [pc, #332]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	4a52      	ldr	r2, [pc, #328]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee8:	4b50      	ldr	r3, [pc, #320]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef0:	623b      	str	r3, [r7, #32]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	4b4c      	ldr	r3, [pc, #304]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	4a4b      	ldr	r2, [pc, #300]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f02:	6313      	str	r3, [r2, #48]	; 0x30
 8004f04:	4b49      	ldr	r3, [pc, #292]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	2300      	movs	r3, #0
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	4b45      	ldr	r3, [pc, #276]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	4a44      	ldr	r2, [pc, #272]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f20:	4b42      	ldr	r3, [pc, #264]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	4b3e      	ldr	r3, [pc, #248]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	4a3d      	ldr	r2, [pc, #244]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f3c:	4b3b      	ldr	r3, [pc, #236]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	4b37      	ldr	r3, [pc, #220]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	4a36      	ldr	r2, [pc, #216]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6313      	str	r3, [r2, #48]	; 0x30
 8004f58:	4b34      	ldr	r3, [pc, #208]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	4b30      	ldr	r3, [pc, #192]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f6e:	f043 0302 	orr.w	r3, r3, #2
 8004f72:	6313      	str	r3, [r2, #48]	; 0x30
 8004f74:	4b2d      	ldr	r3, [pc, #180]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	4b29      	ldr	r3, [pc, #164]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	4a28      	ldr	r2, [pc, #160]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f90:	4b26      	ldr	r3, [pc, #152]	; (800502c <HAL_ETH_MspInit+0x178>)
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004f9c:	2332      	movs	r3, #50	; 0x32
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fac:	230b      	movs	r3, #11
 8004fae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	481e      	ldr	r0, [pc, #120]	; (8005030 <HAL_ETH_MspInit+0x17c>)
 8004fb8:	f002 fc3a 	bl	8007830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004fbc:	2386      	movs	r3, #134	; 0x86
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fcc:	230b      	movs	r3, #11
 8004fce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4817      	ldr	r0, [pc, #92]	; (8005034 <HAL_ETH_MspInit+0x180>)
 8004fd8:	f002 fc2a 	bl	8007830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fea:	2303      	movs	r3, #3
 8004fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fee:	230b      	movs	r3, #11
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	480f      	ldr	r0, [pc, #60]	; (8005038 <HAL_ETH_MspInit+0x184>)
 8004ffa:	f002 fc19 	bl	8007830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004ffe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005004:	2302      	movs	r3, #2
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005008:	2300      	movs	r3, #0
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800500c:	2303      	movs	r3, #3
 800500e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005010:	230b      	movs	r3, #11
 8005012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005018:	4619      	mov	r1, r3
 800501a:	4808      	ldr	r0, [pc, #32]	; (800503c <HAL_ETH_MspInit+0x188>)
 800501c:	f002 fc08 	bl	8007830 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8005020:	bf00      	nop
 8005022:	3738      	adds	r7, #56	; 0x38
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40028000 	.word	0x40028000
 800502c:	40023800 	.word	0x40023800
 8005030:	40020800 	.word	0x40020800
 8005034:	40020000 	.word	0x40020000
 8005038:	40020400 	.word	0x40020400
 800503c:	40021800 	.word	0x40021800

08005040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08a      	sub	sp, #40	; 0x28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	605a      	str	r2, [r3, #4]
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a19      	ldr	r2, [pc, #100]	; (80050c4 <HAL_I2C_MspInit+0x84>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d12c      	bne.n	80050bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <HAL_I2C_MspInit+0x88>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <HAL_I2C_MspInit+0x88>)
 800506c:	f043 0302 	orr.w	r3, r3, #2
 8005070:	6313      	str	r3, [r2, #48]	; 0x30
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <HAL_I2C_MspInit+0x88>)
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800507e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005084:	2312      	movs	r3, #18
 8005086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508c:	2303      	movs	r3, #3
 800508e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005090:	2304      	movs	r3, #4
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005094:	f107 0314 	add.w	r3, r7, #20
 8005098:	4619      	mov	r1, r3
 800509a:	480c      	ldr	r0, [pc, #48]	; (80050cc <HAL_I2C_MspInit+0x8c>)
 800509c:	f002 fbc8 	bl	8007830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <HAL_I2C_MspInit+0x88>)
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	4a07      	ldr	r2, [pc, #28]	; (80050c8 <HAL_I2C_MspInit+0x88>)
 80050aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050ae:	6413      	str	r3, [r2, #64]	; 0x40
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_I2C_MspInit+0x88>)
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80050bc:	bf00      	nop
 80050be:	3728      	adds	r7, #40	; 0x28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40005400 	.word	0x40005400
 80050c8:	40023800 	.word	0x40023800
 80050cc:	40020400 	.word	0x40020400

080050d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a23      	ldr	r2, [pc, #140]	; (800516c <HAL_TIM_PWM_MspInit+0x9c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d13f      	bne.n	8005162 <HAL_TIM_PWM_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	4b22      	ldr	r3, [pc, #136]	; (8005170 <HAL_TIM_PWM_MspInit+0xa0>)
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	4a21      	ldr	r2, [pc, #132]	; (8005170 <HAL_TIM_PWM_MspInit+0xa0>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	6453      	str	r3, [r2, #68]	; 0x44
 80050f2:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <HAL_TIM_PWM_MspInit+0xa0>)
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 80050fe:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 8005100:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <HAL_TIM_PWM_MspInit+0xa8>)
 8005102:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 8005106:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800510a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 800510e:	2240      	movs	r2, #64	; 0x40
 8005110:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005112:	4b18      	ldr	r3, [pc, #96]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 8005114:	2200      	movs	r2, #0
 8005116:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005118:	4b16      	ldr	r3, [pc, #88]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 800511a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800511e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005120:	4b14      	ldr	r3, [pc, #80]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 8005122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005126:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 800512a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800512e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8005130:	4b10      	ldr	r3, [pc, #64]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 8005132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005136:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8005138:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 800513a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800513e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 8005142:	2200      	movs	r2, #0
 8005144:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8005146:	480b      	ldr	r0, [pc, #44]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 8005148:	f001 fc48 	bl	80069dc <HAL_DMA_Init>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8005152:	f7fd f84d 	bl	80021f0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a06      	ldr	r2, [pc, #24]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 800515a:	625a      	str	r2, [r3, #36]	; 0x24
 800515c:	4a05      	ldr	r2, [pc, #20]	; (8005174 <HAL_TIM_PWM_MspInit+0xa4>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40023800 	.word	0x40023800
 8005174:	20000ca8 	.word	0x20000ca8
 8005178:	40026458 	.word	0x40026458

0800517c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	; 0x30
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005184:	f107 031c 	add.w	r3, r7, #28
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a3a      	ldr	r2, [pc, #232]	; (8005284 <HAL_TIM_Base_MspInit+0x108>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d134      	bne.n	8005208 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	4b39      	ldr	r3, [pc, #228]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4a38      	ldr	r2, [pc, #224]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 80051a8:	f043 0302 	orr.w	r3, r3, #2
 80051ac:	6413      	str	r3, [r2, #64]	; 0x40
 80051ae:	4b36      	ldr	r3, [pc, #216]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	4b32      	ldr	r3, [pc, #200]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	4a31      	ldr	r2, [pc, #196]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 80051c4:	f043 0302 	orr.w	r3, r3, #2
 80051c8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ca:	4b2f      	ldr	r3, [pc, #188]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80051d6:	2310      	movs	r3, #16
 80051d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051da:	2302      	movs	r3, #2
 80051dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e2:	2300      	movs	r3, #0
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051e6:	2302      	movs	r3, #2
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051ea:	f107 031c 	add.w	r3, r7, #28
 80051ee:	4619      	mov	r1, r3
 80051f0:	4826      	ldr	r0, [pc, #152]	; (800528c <HAL_TIM_Base_MspInit+0x110>)
 80051f2:	f002 fb1d 	bl	8007830 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80051f6:	2200      	movs	r2, #0
 80051f8:	2100      	movs	r1, #0
 80051fa:	201d      	movs	r0, #29
 80051fc:	f001 fbb7 	bl	800696e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005200:	201d      	movs	r0, #29
 8005202:	f001 fbd0 	bl	80069a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005206:	e039      	b.n	800527c <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM4)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a20      	ldr	r2, [pc, #128]	; (8005290 <HAL_TIM_Base_MspInit+0x114>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d134      	bne.n	800527c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	4a1b      	ldr	r2, [pc, #108]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 800521c:	f043 0304 	orr.w	r3, r3, #4
 8005220:	6413      	str	r3, [r2, #64]	; 0x40
 8005222:	4b19      	ldr	r3, [pc, #100]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	4a14      	ldr	r2, [pc, #80]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 8005238:	f043 0308 	orr.w	r3, r3, #8
 800523c:	6313      	str	r3, [r2, #48]	; 0x30
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <HAL_TIM_Base_MspInit+0x10c>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800524a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800524e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005250:	2302      	movs	r3, #2
 8005252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005254:	2300      	movs	r3, #0
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005258:	2300      	movs	r3, #0
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800525c:	2302      	movs	r3, #2
 800525e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005260:	f107 031c 	add.w	r3, r7, #28
 8005264:	4619      	mov	r1, r3
 8005266:	480b      	ldr	r0, [pc, #44]	; (8005294 <HAL_TIM_Base_MspInit+0x118>)
 8005268:	f002 fae2 	bl	8007830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800526c:	2200      	movs	r2, #0
 800526e:	2100      	movs	r1, #0
 8005270:	201e      	movs	r0, #30
 8005272:	f001 fb7c 	bl	800696e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005276:	201e      	movs	r0, #30
 8005278:	f001 fb95 	bl	80069a6 <HAL_NVIC_EnableIRQ>
}
 800527c:	bf00      	nop
 800527e:	3730      	adds	r7, #48	; 0x30
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40000400 	.word	0x40000400
 8005288:	40023800 	.word	0x40023800
 800528c:	40020400 	.word	0x40020400
 8005290:	40000800 	.word	0x40000800
 8005294:	40020c00 	.word	0x40020c00

08005298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	f107 030c 	add.w	r3, r7, #12
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	605a      	str	r2, [r3, #4]
 80052aa:	609a      	str	r2, [r3, #8]
 80052ac:	60da      	str	r2, [r3, #12]
 80052ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a12      	ldr	r2, [pc, #72]	; (8005300 <HAL_TIM_MspPostInit+0x68>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d11e      	bne.n	80052f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	4b11      	ldr	r3, [pc, #68]	; (8005304 <HAL_TIM_MspPostInit+0x6c>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4a10      	ldr	r2, [pc, #64]	; (8005304 <HAL_TIM_MspPostInit+0x6c>)
 80052c4:	f043 0310 	orr.w	r3, r3, #16
 80052c8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ca:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <HAL_TIM_MspPostInit+0x6c>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	60bb      	str	r3, [r7, #8]
 80052d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052dc:	2302      	movs	r3, #2
 80052de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052e8:	2301      	movs	r3, #1
 80052ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052ec:	f107 030c 	add.w	r3, r7, #12
 80052f0:	4619      	mov	r1, r3
 80052f2:	4805      	ldr	r0, [pc, #20]	; (8005308 <HAL_TIM_MspPostInit+0x70>)
 80052f4:	f002 fa9c 	bl	8007830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80052f8:	bf00      	nop
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40010000 	.word	0x40010000
 8005304:	40023800 	.word	0x40023800
 8005308:	40021000 	.word	0x40021000

0800530c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08c      	sub	sp, #48	; 0x30
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005314:	f107 031c 	add.w	r3, r7, #28
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a65      	ldr	r2, [pc, #404]	; (80054c0 <HAL_UART_MspInit+0x1b4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d12d      	bne.n	800538a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	4b64      	ldr	r3, [pc, #400]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	4a63      	ldr	r2, [pc, #396]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 8005338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800533c:	6413      	str	r3, [r2, #64]	; 0x40
 800533e:	4b61      	ldr	r3, [pc, #388]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	4b5d      	ldr	r3, [pc, #372]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	4a5c      	ldr	r2, [pc, #368]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 8005354:	f043 0308 	orr.w	r3, r3, #8
 8005358:	6313      	str	r3, [r2, #48]	; 0x30
 800535a:	4b5a      	ldr	r3, [pc, #360]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005366:	f44f 7340 	mov.w	r3, #768	; 0x300
 800536a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536c:	2302      	movs	r3, #2
 800536e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005370:	2300      	movs	r3, #0
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005374:	2303      	movs	r3, #3
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005378:	2307      	movs	r3, #7
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800537c:	f107 031c 	add.w	r3, r7, #28
 8005380:	4619      	mov	r1, r3
 8005382:	4851      	ldr	r0, [pc, #324]	; (80054c8 <HAL_UART_MspInit+0x1bc>)
 8005384:	f002 fa54 	bl	8007830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005388:	e096      	b.n	80054b8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART6)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a4f      	ldr	r2, [pc, #316]	; (80054cc <HAL_UART_MspInit+0x1c0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	f040 8091 	bne.w	80054b8 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	4b4a      	ldr	r3, [pc, #296]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	4a49      	ldr	r2, [pc, #292]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 80053a0:	f043 0320 	orr.w	r3, r3, #32
 80053a4:	6453      	str	r3, [r2, #68]	; 0x44
 80053a6:	4b47      	ldr	r3, [pc, #284]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	4b43      	ldr	r3, [pc, #268]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	4a42      	ldr	r2, [pc, #264]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 80053bc:	f043 0304 	orr.w	r3, r3, #4
 80053c0:	6313      	str	r3, [r2, #48]	; 0x30
 80053c2:	4b40      	ldr	r3, [pc, #256]	; (80054c4 <HAL_UART_MspInit+0x1b8>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053ce:	23c0      	movs	r3, #192	; 0xc0
 80053d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d2:	2302      	movs	r3, #2
 80053d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053da:	2303      	movs	r3, #3
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80053de:	2308      	movs	r3, #8
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053e2:	f107 031c 	add.w	r3, r7, #28
 80053e6:	4619      	mov	r1, r3
 80053e8:	4839      	ldr	r0, [pc, #228]	; (80054d0 <HAL_UART_MspInit+0x1c4>)
 80053ea:	f002 fa21 	bl	8007830 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80053ee:	4b39      	ldr	r3, [pc, #228]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 80053f0:	4a39      	ldr	r2, [pc, #228]	; (80054d8 <HAL_UART_MspInit+0x1cc>)
 80053f2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80053f4:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 80053f6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80053fa:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053fc:	4b35      	ldr	r3, [pc, #212]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 80053fe:	2200      	movs	r2, #0
 8005400:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005402:	4b34      	ldr	r3, [pc, #208]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 8005404:	2200      	movs	r2, #0
 8005406:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005408:	4b32      	ldr	r3, [pc, #200]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 800540a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800540e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005410:	4b30      	ldr	r3, [pc, #192]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 8005412:	2200      	movs	r2, #0
 8005414:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005416:	4b2f      	ldr	r3, [pc, #188]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 8005418:	2200      	movs	r2, #0
 800541a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800541c:	4b2d      	ldr	r3, [pc, #180]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 800541e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005422:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005424:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 8005426:	2200      	movs	r2, #0
 8005428:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800542a:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 800542c:	2200      	movs	r2, #0
 800542e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005430:	4828      	ldr	r0, [pc, #160]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 8005432:	f001 fad3 	bl	80069dc <HAL_DMA_Init>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_UART_MspInit+0x134>
      Error_Handler();
 800543c:	f7fc fed8 	bl	80021f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a24      	ldr	r2, [pc, #144]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
 8005446:	4a23      	ldr	r2, [pc, #140]	; (80054d4 <HAL_UART_MspInit+0x1c8>)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800544c:	4b23      	ldr	r3, [pc, #140]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 800544e:	4a24      	ldr	r2, [pc, #144]	; (80054e0 <HAL_UART_MspInit+0x1d4>)
 8005450:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8005452:	4b22      	ldr	r3, [pc, #136]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 8005454:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005458:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800545a:	4b20      	ldr	r3, [pc, #128]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 800545c:	2240      	movs	r2, #64	; 0x40
 800545e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005460:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 8005462:	2200      	movs	r2, #0
 8005464:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005466:	4b1d      	ldr	r3, [pc, #116]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 8005468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800546c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800546e:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 8005470:	2200      	movs	r2, #0
 8005472:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 8005476:	2200      	movs	r2, #0
 8005478:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800547a:	4b18      	ldr	r3, [pc, #96]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 800547c:	2200      	movs	r2, #0
 800547e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005480:	4b16      	ldr	r3, [pc, #88]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 8005482:	2200      	movs	r2, #0
 8005484:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005486:	4b15      	ldr	r3, [pc, #84]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 8005488:	2200      	movs	r2, #0
 800548a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800548c:	4813      	ldr	r0, [pc, #76]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 800548e:	f001 faa5 	bl	80069dc <HAL_DMA_Init>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_UART_MspInit+0x190>
      Error_Handler();
 8005498:	f7fc feaa 	bl	80021f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a0f      	ldr	r2, [pc, #60]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 80054a0:	635a      	str	r2, [r3, #52]	; 0x34
 80054a2:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <HAL_UART_MspInit+0x1d0>)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80054a8:	2200      	movs	r2, #0
 80054aa:	2100      	movs	r1, #0
 80054ac:	2047      	movs	r0, #71	; 0x47
 80054ae:	f001 fa5e 	bl	800696e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80054b2:	2047      	movs	r0, #71	; 0x47
 80054b4:	f001 fa77 	bl	80069a6 <HAL_NVIC_EnableIRQ>
}
 80054b8:	bf00      	nop
 80054ba:	3730      	adds	r7, #48	; 0x30
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40004800 	.word	0x40004800
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40020c00 	.word	0x40020c00
 80054cc:	40011400 	.word	0x40011400
 80054d0:	40020800 	.word	0x40020800
 80054d4:	20000d90 	.word	0x20000d90
 80054d8:	40026428 	.word	0x40026428
 80054dc:	20000df0 	.word	0x20000df0
 80054e0:	400264a0 	.word	0x400264a0

080054e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	; 0x28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ec:	f107 0314 	add.w	r3, r7, #20
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	609a      	str	r2, [r3, #8]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005504:	d13f      	bne.n	8005586 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	4b21      	ldr	r3, [pc, #132]	; (8005590 <HAL_PCD_MspInit+0xac>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	4a20      	ldr	r2, [pc, #128]	; (8005590 <HAL_PCD_MspInit+0xac>)
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	6313      	str	r3, [r2, #48]	; 0x30
 8005516:	4b1e      	ldr	r3, [pc, #120]	; (8005590 <HAL_PCD_MspInit+0xac>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	613b      	str	r3, [r7, #16]
 8005520:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005522:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005528:	2302      	movs	r3, #2
 800552a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552c:	2300      	movs	r3, #0
 800552e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005530:	2303      	movs	r3, #3
 8005532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005534:	230a      	movs	r3, #10
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005538:	f107 0314 	add.w	r3, r7, #20
 800553c:	4619      	mov	r1, r3
 800553e:	4815      	ldr	r0, [pc, #84]	; (8005594 <HAL_PCD_MspInit+0xb0>)
 8005540:	f002 f976 	bl	8007830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800554a:	2300      	movs	r3, #0
 800554c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005552:	f107 0314 	add.w	r3, r7, #20
 8005556:	4619      	mov	r1, r3
 8005558:	480e      	ldr	r0, [pc, #56]	; (8005594 <HAL_PCD_MspInit+0xb0>)
 800555a:	f002 f969 	bl	8007830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <HAL_PCD_MspInit+0xac>)
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	4a0b      	ldr	r2, [pc, #44]	; (8005590 <HAL_PCD_MspInit+0xac>)
 8005564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005568:	6353      	str	r3, [r2, #52]	; 0x34
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <HAL_PCD_MspInit+0xac>)
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	4a07      	ldr	r2, [pc, #28]	; (8005590 <HAL_PCD_MspInit+0xac>)
 8005574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005578:	6453      	str	r3, [r2, #68]	; 0x44
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <HAL_PCD_MspInit+0xac>)
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005586:	bf00      	nop
 8005588:	3728      	adds	r7, #40	; 0x28
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40023800 	.word	0x40023800
 8005594:	40020000 	.word	0x40020000

08005598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800559c:	e7fe      	b.n	800559c <NMI_Handler+0x4>

0800559e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800559e:	b480      	push	{r7}
 80055a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055a2:	e7fe      	b.n	80055a2 <HardFault_Handler+0x4>

080055a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055a8:	e7fe      	b.n	80055a8 <MemManage_Handler+0x4>

080055aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055aa:	b480      	push	{r7}
 80055ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055ae:	e7fe      	b.n	80055ae <BusFault_Handler+0x4>

080055b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055b4:	e7fe      	b.n	80055b4 <UsageFault_Handler+0x4>

080055b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055b6:	b480      	push	{r7}
 80055b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055ba:	bf00      	nop
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055c8:	bf00      	nop
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055d2:	b480      	push	{r7}
 80055d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055d6:	bf00      	nop
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055e4:	f000 fc82 	bl	8005eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055e8:	bf00      	nop
 80055ea:	bd80      	pop	{r7, pc}

080055ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(e_stop_Pin);
 80055f0:	2040      	movs	r0, #64	; 0x40
 80055f2:	f002 fafb 	bl	8007bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005600:	4802      	ldr	r0, [pc, #8]	; (800560c <TIM3_IRQHandler+0x10>)
 8005602:	f003 ff39 	bl	8009478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000c18 	.word	0x20000c18

08005610 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005614:	4802      	ldr	r0, [pc, #8]	; (8005620 <TIM4_IRQHandler+0x10>)
 8005616:	f003 ff2f 	bl	8009478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000c60 	.word	0x20000c60

08005624 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005628:	4802      	ldr	r0, [pc, #8]	; (8005634 <DMA2_Stream1_IRQHandler+0x10>)
 800562a:	f001 fb6f 	bl	8006d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000d90 	.word	0x20000d90

08005638 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800563c:	4802      	ldr	r0, [pc, #8]	; (8005648 <DMA2_Stream3_IRQHandler+0x10>)
 800563e:	f001 fb65 	bl	8006d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000ca8 	.word	0x20000ca8

0800564c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005650:	4802      	ldr	r0, [pc, #8]	; (800565c <DMA2_Stream4_IRQHandler+0x10>)
 8005652:	f001 fb5b 	bl	8006d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005656:	bf00      	nop
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000a6c 	.word	0x20000a6c

08005660 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005664:	4802      	ldr	r0, [pc, #8]	; (8005670 <DMA2_Stream6_IRQHandler+0x10>)
 8005666:	f001 fb51 	bl	8006d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000df0 	.word	0x20000df0

08005674 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005678:	4802      	ldr	r0, [pc, #8]	; (8005684 <USART6_IRQHandler+0x10>)
 800567a:	f005 f981 	bl	800a980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000d4c 	.word	0x20000d4c

08005688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
	return 1;
 800568c:	2301      	movs	r3, #1
}
 800568e:	4618      	mov	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <_kill>:

int _kill(int pid, int sig)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80056a2:	f007 fac9 	bl	800cc38 <__errno>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2216      	movs	r2, #22
 80056aa:	601a      	str	r2, [r3, #0]
	return -1;
 80056ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <_exit>:

void _exit (int status)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056c0:	f04f 31ff 	mov.w	r1, #4294967295
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ffe7 	bl	8005698 <_kill>
	while (1) {}		/* Make sure we hang here */
 80056ca:	e7fe      	b.n	80056ca <_exit+0x12>

080056cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056d4:	4a14      	ldr	r2, [pc, #80]	; (8005728 <_sbrk+0x5c>)
 80056d6:	4b15      	ldr	r3, [pc, #84]	; (800572c <_sbrk+0x60>)
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056e0:	4b13      	ldr	r3, [pc, #76]	; (8005730 <_sbrk+0x64>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056e8:	4b11      	ldr	r3, [pc, #68]	; (8005730 <_sbrk+0x64>)
 80056ea:	4a12      	ldr	r2, [pc, #72]	; (8005734 <_sbrk+0x68>)
 80056ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <_sbrk+0x64>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4413      	add	r3, r2
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d207      	bcs.n	800570c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056fc:	f007 fa9c 	bl	800cc38 <__errno>
 8005700:	4603      	mov	r3, r0
 8005702:	220c      	movs	r2, #12
 8005704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	e009      	b.n	8005720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <_sbrk+0x64>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005712:	4b07      	ldr	r3, [pc, #28]	; (8005730 <_sbrk+0x64>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	4a05      	ldr	r2, [pc, #20]	; (8005730 <_sbrk+0x64>)
 800571c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800571e:	68fb      	ldr	r3, [r7, #12]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20030000 	.word	0x20030000
 800572c:	00000400 	.word	0x00000400
 8005730:	20001ea0 	.word	0x20001ea0
 8005734:	20001fe8 	.word	0x20001fe8

08005738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <SystemInit+0x20>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	4a05      	ldr	r2, [pc, #20]	; (8005758 <SystemInit+0x20>)
 8005744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	e000ed00 	.word	0xe000ed00

0800575c <init_neopixel>:

	return hsv;
}

void init_neopixel(type_led in_type_of_led)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	71fb      	strb	r3, [r7, #7]
	type_of_led=in_type_of_led;
 8005766:	4a0c      	ldr	r2, [pc, #48]	; (8005798 <init_neopixel+0x3c>)
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	7013      	strb	r3, [r2, #0]
	switch (type_of_led) {
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <init_neopixel+0x3c>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d002      	beq.n	800577a <init_neopixel+0x1e>
 8005774:	2b02      	cmp	r3, #2
 8005776:	d004      	beq.n	8005782 <init_neopixel+0x26>
			break;
		case WS2812B:
			dutyoff=WSBOFF;
			break;
		default:
			break;
 8005778:	e007      	b.n	800578a <init_neopixel+0x2e>
			dutyoff=WSOFF;
 800577a:	4b08      	ldr	r3, [pc, #32]	; (800579c <init_neopixel+0x40>)
 800577c:	221d      	movs	r2, #29
 800577e:	701a      	strb	r2, [r3, #0]
			break;
 8005780:	e003      	b.n	800578a <init_neopixel+0x2e>
			dutyoff=WSBOFF;
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <init_neopixel+0x40>)
 8005784:	2221      	movs	r2, #33	; 0x21
 8005786:	701a      	strb	r2, [r3, #0]
			break;
 8005788:	bf00      	nop
	}
	all_black_render();
 800578a:	f000 f809 	bl	80057a0 <all_black_render>
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20001ea4 	.word	0x20001ea4
 800579c:	2000000a 	.word	0x2000000a

080057a0 <all_black_render>:

void all_black_render(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
	uint_fast16_t var;
	for (var = 0; var < ENDBUFFERLED; ++var)
 80057a6:	2300      	movs	r3, #0
 80057a8:	607b      	str	r3, [r7, #4]
 80057aa:	e01c      	b.n	80057e6 <all_black_render+0x46>
	{
		allrgb[var].blue=0;
 80057ac:	4912      	ldr	r1, [pc, #72]	; (80057f8 <all_black_render+0x58>)
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4613      	mov	r3, r2
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4413      	add	r3, r2
 80057b6:	440b      	add	r3, r1
 80057b8:	3301      	adds	r3, #1
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
		allrgb[var].red=0;
 80057be:	490e      	ldr	r1, [pc, #56]	; (80057f8 <all_black_render+0x58>)
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	4413      	add	r3, r2
 80057c8:	440b      	add	r3, r1
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
		allrgb[var].green=0;
 80057ce:	490a      	ldr	r1, [pc, #40]	; (80057f8 <all_black_render+0x58>)
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	440b      	add	r3, r1
 80057da:	3302      	adds	r3, #2
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
	for (var = 0; var < ENDBUFFERLED; ++var)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3301      	adds	r3, #1
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b3d      	cmp	r3, #61	; 0x3d
 80057ea:	d9df      	bls.n	80057ac <all_black_render+0xc>
	}
	render_neopixel();
 80057ec:	f000 f92e 	bl	8005a4c <render_neopixel>
}
 80057f0:	bf00      	nop
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20001f10 	.word	0x20001f10

080057fc <one_color_render>:

void one_color_render(uint8_t red,uint8_t green,uint8_t blue)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
 8005806:	460b      	mov	r3, r1
 8005808:	71bb      	strb	r3, [r7, #6]
 800580a:	4613      	mov	r3, r2
 800580c:	717b      	strb	r3, [r7, #5]
	uint_fast16_t var;
	for (var = STARTBUFFERLED; var < ENDBUFFERLED; ++var)
 800580e:	2302      	movs	r3, #2
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e01c      	b.n	800584e <one_color_render+0x52>
	{
		allrgb[var].blue=blue;
 8005814:	4912      	ldr	r1, [pc, #72]	; (8005860 <one_color_render+0x64>)
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4613      	mov	r3, r2
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4413      	add	r3, r2
 800581e:	440b      	add	r3, r1
 8005820:	3301      	adds	r3, #1
 8005822:	797a      	ldrb	r2, [r7, #5]
 8005824:	701a      	strb	r2, [r3, #0]
		allrgb[var].red=red;
 8005826:	490e      	ldr	r1, [pc, #56]	; (8005860 <one_color_render+0x64>)
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4613      	mov	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	440b      	add	r3, r1
 8005832:	79fa      	ldrb	r2, [r7, #7]
 8005834:	701a      	strb	r2, [r3, #0]
		allrgb[var].green=green;
 8005836:	490a      	ldr	r1, [pc, #40]	; (8005860 <one_color_render+0x64>)
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4613      	mov	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	4413      	add	r3, r2
 8005840:	440b      	add	r3, r1
 8005842:	3302      	adds	r3, #2
 8005844:	79ba      	ldrb	r2, [r7, #6]
 8005846:	701a      	strb	r2, [r3, #0]
	for (var = STARTBUFFERLED; var < ENDBUFFERLED; ++var)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3301      	adds	r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b3d      	cmp	r3, #61	; 0x3d
 8005852:	d9df      	bls.n	8005814 <one_color_render+0x18>
	}
	render_neopixel();
 8005854:	f000 f8fa 	bl	8005a4c <render_neopixel>
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20001f10 	.word	0x20001f10
 8005864:	00000000 	.word	0x00000000

08005868 <render_breath_mode>:
	HAL_Delay(delay);
	render_neopixel();
}

void render_breath_mode(uint8_t red, uint8_t green, uint8_t blue, uint16_t delay)
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b089      	sub	sp, #36	; 0x24
 800586c:	af00      	add	r7, sp, #0
 800586e:	4604      	mov	r4, r0
 8005870:	4608      	mov	r0, r1
 8005872:	4611      	mov	r1, r2
 8005874:	461a      	mov	r2, r3
 8005876:	4623      	mov	r3, r4
 8005878:	73fb      	strb	r3, [r7, #15]
 800587a:	4603      	mov	r3, r0
 800587c:	73bb      	strb	r3, [r7, #14]
 800587e:	460b      	mov	r3, r1
 8005880:	737b      	strb	r3, [r7, #13]
 8005882:	4613      	mov	r3, r2
 8005884:	817b      	strh	r3, [r7, #10]
    uint_fast16_t var,var1;
    static uint16_t angle,angle_cache;

    for (var = 0; var < ZONE; ++var) {
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	e0b2      	b.n	80059f2 <render_breath_mode+0x18a>
        angle_cache = angle + (360 / ZONE) * var;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	b29b      	uxth	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	0052      	lsls	r2, r2, #1
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	b29a      	uxth	r2, r3
 800589a:	4b67      	ldr	r3, [pc, #412]	; (8005a38 <render_breath_mode+0x1d0>)
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	4413      	add	r3, r2
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	4b66      	ldr	r3, [pc, #408]	; (8005a3c <render_breath_mode+0x1d4>)
 80058a4:	801a      	strh	r2, [r3, #0]
        if (angle_cache > 360) {
 80058a6:	4b65      	ldr	r3, [pc, #404]	; (8005a3c <render_breath_mode+0x1d4>)
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80058ae:	d90f      	bls.n	80058d0 <render_breath_mode+0x68>
            angle_cache = (angle + (360 / ZONE) * var) - 360;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	0052      	lsls	r2, r2, #1
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	b29a      	uxth	r2, r3
 80058be:	4b5e      	ldr	r3, [pc, #376]	; (8005a38 <render_breath_mode+0x1d0>)
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	4413      	add	r3, r2
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	4b5b      	ldr	r3, [pc, #364]	; (8005a3c <render_breath_mode+0x1d4>)
 80058ce:	801a      	strh	r2, [r3, #0]
        }

        // Calculate brightness based on sine wave
        float brightness = sinf(angle_cache * M_PI / 180.0) * 0.5 + 0.5;
 80058d0:	4b5a      	ldr	r3, [pc, #360]	; (8005a3c <render_breath_mode+0x1d4>)
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fa fde5 	bl	80004a4 <__aeabi_i2d>
 80058da:	a355      	add	r3, pc, #340	; (adr r3, 8005a30 <render_breath_mode+0x1c8>)
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f7fa fe4a 	bl	8000578 <__aeabi_dmul>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4610      	mov	r0, r2
 80058ea:	4619      	mov	r1, r3
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	4b53      	ldr	r3, [pc, #332]	; (8005a40 <render_breath_mode+0x1d8>)
 80058f2:	f7fa ff6b 	bl	80007cc <__aeabi_ddiv>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4610      	mov	r0, r2
 80058fc:	4619      	mov	r1, r3
 80058fe:	f7fb f8d5 	bl	8000aac <__aeabi_d2f>
 8005902:	4603      	mov	r3, r0
 8005904:	ee00 3a10 	vmov	s0, r3
 8005908:	f006 fc32 	bl	800c170 <sinf>
 800590c:	ee10 3a10 	vmov	r3, s0
 8005910:	4618      	mov	r0, r3
 8005912:	f7fa fdd9 	bl	80004c8 <__aeabi_f2d>
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	4b4a      	ldr	r3, [pc, #296]	; (8005a44 <render_breath_mode+0x1dc>)
 800591c:	f7fa fe2c 	bl	8000578 <__aeabi_dmul>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4610      	mov	r0, r2
 8005926:	4619      	mov	r1, r3
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	4b45      	ldr	r3, [pc, #276]	; (8005a44 <render_breath_mode+0x1dc>)
 800592e:	f7fa fc6d 	bl	800020c <__adddf3>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	f7fb f8b7 	bl	8000aac <__aeabi_d2f>
 800593e:	4603      	mov	r3, r0
 8005940:	617b      	str	r3, [r7, #20]

        uint8_t r = red * brightness;
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800594c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005958:	edc7 7a01 	vstr	s15, [r7, #4]
 800595c:	793b      	ldrb	r3, [r7, #4]
 800595e:	74fb      	strb	r3, [r7, #19]
        uint8_t g = green * brightness;
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800596a:	edd7 7a05 	vldr	s15, [r7, #20]
 800596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005976:	edc7 7a01 	vstr	s15, [r7, #4]
 800597a:	793b      	ldrb	r3, [r7, #4]
 800597c:	74bb      	strb	r3, [r7, #18]
        uint8_t b = blue * brightness;
 800597e:	7b7b      	ldrb	r3, [r7, #13]
 8005980:	ee07 3a90 	vmov	s15, r3
 8005984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005988:	edd7 7a05 	vldr	s15, [r7, #20]
 800598c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005994:	edc7 7a01 	vstr	s15, [r7, #4]
 8005998:	793b      	ldrb	r3, [r7, #4]
 800599a:	747b      	strb	r3, [r7, #17]

        for (var1 = var * LEDPERZONE + 2; var1 < (var+1) * LEDPERZONE + 2; ++var1) {
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	3301      	adds	r3, #1
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	e01c      	b.n	80059e0 <render_breath_mode+0x178>
            allrgb[var1].red = r;
 80059a6:	4928      	ldr	r1, [pc, #160]	; (8005a48 <render_breath_mode+0x1e0>)
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	440b      	add	r3, r1
 80059b2:	7cfa      	ldrb	r2, [r7, #19]
 80059b4:	701a      	strb	r2, [r3, #0]
            allrgb[var1].green = g;
 80059b6:	4924      	ldr	r1, [pc, #144]	; (8005a48 <render_breath_mode+0x1e0>)
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4613      	mov	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4413      	add	r3, r2
 80059c0:	440b      	add	r3, r1
 80059c2:	3302      	adds	r3, #2
 80059c4:	7cba      	ldrb	r2, [r7, #18]
 80059c6:	701a      	strb	r2, [r3, #0]
            allrgb[var1].blue = b;
 80059c8:	491f      	ldr	r1, [pc, #124]	; (8005a48 <render_breath_mode+0x1e0>)
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4613      	mov	r3, r2
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	4413      	add	r3, r2
 80059d2:	440b      	add	r3, r1
 80059d4:	3301      	adds	r3, #1
 80059d6:	7c7a      	ldrb	r2, [r7, #17]
 80059d8:	701a      	strb	r2, [r3, #0]
        for (var1 = var * LEDPERZONE + 2; var1 < (var+1) * LEDPERZONE + 2; ++var1) {
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	3301      	adds	r3, #1
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	3302      	adds	r3, #2
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d3dc      	bcc.n	80059a6 <render_breath_mode+0x13e>
    for (var = 0; var < ZONE; ++var) {
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	3301      	adds	r3, #1
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	2b1d      	cmp	r3, #29
 80059f6:	f67f af49 	bls.w	800588c <render_breath_mode+0x24>
        }
    }

    if (++angle > 360) {
 80059fa:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <render_breath_mode+0x1d0>)
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	3301      	adds	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <render_breath_mode+0x1d0>)
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <render_breath_mode+0x1d0>)
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8005a0e:	d902      	bls.n	8005a16 <render_breath_mode+0x1ae>
        angle = 0;
 8005a10:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <render_breath_mode+0x1d0>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	801a      	strh	r2, [r3, #0]
    }

    HAL_Delay(delay);
 8005a16:	897b      	ldrh	r3, [r7, #10]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fa87 	bl	8005f2c <HAL_Delay>
    render_neopixel();
 8005a1e:	f000 f815 	bl	8005a4c <render_neopixel>
}
 8005a22:	bf00      	nop
 8005a24:	3724      	adds	r7, #36	; 0x24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd90      	pop	{r4, r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	f3af 8000 	nop.w
 8005a30:	54442d18 	.word	0x54442d18
 8005a34:	400921fb 	.word	0x400921fb
 8005a38:	20001fcc 	.word	0x20001fcc
 8005a3c:	20001fce 	.word	0x20001fce
 8005a40:	40668000 	.word	0x40668000
 8005a44:	3fe00000 	.word	0x3fe00000
 8005a48:	20001f10 	.word	0x20001f10

08005a4c <render_neopixel>:
		render_neopixel();
	}
}

void render_neopixel()
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
	mode=START;
 8005a52:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <render_neopixel+0x8c>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
	uint_fast16_t var;
	if(type_of_led!=NOTDEFINE)
 8005a58:	4b20      	ldr	r3, [pc, #128]	; (8005adc <render_neopixel+0x90>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d035      	beq.n	8005acc <render_neopixel+0x80>
	{
		present_led_counting=0;
 8005a60:	4b1f      	ldr	r3, [pc, #124]	; (8005ae0 <render_neopixel+0x94>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var)
 8005a66:	2300      	movs	r3, #0
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	e025      	b.n	8005ab8 <render_neopixel+0x6c>
		{
			buffer[var]=0<<(((allrgb[0].green<<var)&0x80)>0);
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <render_neopixel+0x98>)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2100      	movs	r1, #0
 8005a72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=0<<(((allrgb[0].red<<var)&0x80)>0);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <render_neopixel+0x98>)
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=0<<(((allrgb[0].blue<<var)&0x80)>0);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3310      	adds	r3, #16
 8005a86:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <render_neopixel+0x98>)
 8005a88:	2100      	movs	r1, #0
 8005a8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+24]=0<<(((allrgb[1].green<<var)&0x80)>0);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3318      	adds	r3, #24
 8005a92:	4a14      	ldr	r2, [pc, #80]	; (8005ae4 <render_neopixel+0x98>)
 8005a94:	2100      	movs	r1, #0
 8005a96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=0<<(((allrgb[1].red<<var)&0x80)>0);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3320      	adds	r3, #32
 8005a9e:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <render_neopixel+0x98>)
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=0<<(((allrgb[1].blue<<var)&0x80)>0);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3328      	adds	r3, #40	; 0x28
 8005aaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ae4 <render_neopixel+0x98>)
 8005aac:	2100      	movs	r1, #0
 8005aae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	607b      	str	r3, [r7, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b07      	cmp	r3, #7
 8005abc:	d9d6      	bls.n	8005a6c <render_neopixel+0x20>
		}
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)buffer, 48);
 8005abe:	2330      	movs	r3, #48	; 0x30
 8005ac0:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <render_neopixel+0x98>)
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4808      	ldr	r0, [pc, #32]	; (8005ae8 <render_neopixel+0x9c>)
 8005ac6:	f003 f8bb 	bl	8008c40 <HAL_TIM_PWM_Start_DMA>
	}
	else
	{
		__NOP();
	}
}
 8005aca:	e000      	b.n	8005ace <render_neopixel+0x82>
		__NOP();
 8005acc:	bf00      	nop
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20001ea5 	.word	0x20001ea5
 8005adc:	20001ea4 	.word	0x20001ea4
 8005ae0:	20001f0c 	.word	0x20001f0c
 8005ae4:	20001ea8 	.word	0x20001ea8
 8005ae8:	20000bd0 	.word	0x20000bd0

08005aec <prepare_next_led>:

void prepare_next_led(uint16_t position,uint8_t alpha)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	460a      	mov	r2, r1
 8005af6:	80fb      	strh	r3, [r7, #6]
 8005af8:	4613      	mov	r3, r2
 8005afa:	717b      	strb	r3, [r7, #5]
	uint_fast8_t var;
	++position;
 8005afc:	88fb      	ldrh	r3, [r7, #6]
 8005afe:	3301      	adds	r3, #1
 8005b00:	80fb      	strh	r3, [r7, #6]
	if(alpha==1)
 8005b02:	797b      	ldrb	r3, [r7, #5]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d161      	bne.n	8005bcc <prepare_next_led+0xe0>
	{
		for (var = 0; var < 8; ++var) {
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e05a      	b.n	8005bc4 <prepare_next_led+0xd8>
			buffer[var]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
 8005b0e:	4b63      	ldr	r3, [pc, #396]	; (8005c9c <prepare_next_led+0x1b0>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	4962      	ldr	r1, [pc, #392]	; (8005ca0 <prepare_next_led+0x1b4>)
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	440b      	add	r3, r1
 8005b20:	3302      	adds	r3, #2
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	bfcc      	ite	gt
 8005b34:	2301      	movgt	r3, #1
 8005b36:	2300      	movle	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	fa00 f303 	lsl.w	r3, r0, r3
 8005b3e:	b299      	uxth	r1, r3
 8005b40:	4a58      	ldr	r2, [pc, #352]	; (8005ca4 <prepare_next_led+0x1b8>)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
 8005b48:	4b54      	ldr	r3, [pc, #336]	; (8005c9c <prepare_next_led+0x1b0>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	4953      	ldr	r1, [pc, #332]	; (8005ca0 <prepare_next_led+0x1b4>)
 8005b52:	4613      	mov	r3, r2
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	4413      	add	r3, r2
 8005b58:	440b      	add	r3, r1
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bfcc      	ite	gt
 8005b6c:	2301      	movgt	r3, #1
 8005b6e:	2300      	movle	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	fa00 f203 	lsl.w	r2, r0, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	b291      	uxth	r1, r2
 8005b7c:	4a49      	ldr	r2, [pc, #292]	; (8005ca4 <prepare_next_led+0x1b8>)
 8005b7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
 8005b82:	4b46      	ldr	r3, [pc, #280]	; (8005c9c <prepare_next_led+0x1b0>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	88fa      	ldrh	r2, [r7, #6]
 8005b8a:	4945      	ldr	r1, [pc, #276]	; (8005ca0 <prepare_next_led+0x1b4>)
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	4413      	add	r3, r2
 8005b92:	440b      	add	r3, r1
 8005b94:	3301      	adds	r3, #1
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bfcc      	ite	gt
 8005ba8:	2301      	movgt	r3, #1
 8005baa:	2300      	movle	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	fa00 f203 	lsl.w	r2, r0, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3310      	adds	r3, #16
 8005bb6:	b291      	uxth	r1, r2
 8005bb8:	4a3a      	ldr	r2, [pc, #232]	; (8005ca4 <prepare_next_led+0x1b8>)
 8005bba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b07      	cmp	r3, #7
 8005bc8:	d9a1      	bls.n	8005b0e <prepare_next_led+0x22>
			buffer[var+24]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
			buffer[var+32]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
			buffer[var+40]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
		}
	}
}
 8005bca:	e061      	b.n	8005c90 <prepare_next_led+0x1a4>
		for (var = 0; var < 8; ++var) {
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	e05b      	b.n	8005c8a <prepare_next_led+0x19e>
			buffer[var+24]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
 8005bd2:	4b32      	ldr	r3, [pc, #200]	; (8005c9c <prepare_next_led+0x1b0>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	88fa      	ldrh	r2, [r7, #6]
 8005bda:	4931      	ldr	r1, [pc, #196]	; (8005ca0 <prepare_next_led+0x1b4>)
 8005bdc:	4613      	mov	r3, r2
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	4413      	add	r3, r2
 8005be2:	440b      	add	r3, r1
 8005be4:	3302      	adds	r3, #2
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bfcc      	ite	gt
 8005bf8:	2301      	movgt	r3, #1
 8005bfa:	2300      	movle	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3318      	adds	r3, #24
 8005c06:	b291      	uxth	r1, r2
 8005c08:	4a26      	ldr	r2, [pc, #152]	; (8005ca4 <prepare_next_led+0x1b8>)
 8005c0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
 8005c0e:	4b23      	ldr	r3, [pc, #140]	; (8005c9c <prepare_next_led+0x1b0>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	4922      	ldr	r1, [pc, #136]	; (8005ca0 <prepare_next_led+0x1b4>)
 8005c18:	4613      	mov	r3, r2
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	4413      	add	r3, r2
 8005c1e:	440b      	add	r3, r1
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bfcc      	ite	gt
 8005c32:	2301      	movgt	r3, #1
 8005c34:	2300      	movle	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	fa00 f203 	lsl.w	r2, r0, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3320      	adds	r3, #32
 8005c40:	b291      	uxth	r1, r2
 8005c42:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <prepare_next_led+0x1b8>)
 8005c44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
 8005c48:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <prepare_next_led+0x1b0>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	88fa      	ldrh	r2, [r7, #6]
 8005c50:	4913      	ldr	r1, [pc, #76]	; (8005ca0 <prepare_next_led+0x1b4>)
 8005c52:	4613      	mov	r3, r2
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	4413      	add	r3, r2
 8005c58:	440b      	add	r3, r1
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bfcc      	ite	gt
 8005c6e:	2301      	movgt	r3, #1
 8005c70:	2300      	movle	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	fa00 f203 	lsl.w	r2, r0, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3328      	adds	r3, #40	; 0x28
 8005c7c:	b291      	uxth	r1, r2
 8005c7e:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <prepare_next_led+0x1b8>)
 8005c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b07      	cmp	r3, #7
 8005c8e:	d9a0      	bls.n	8005bd2 <prepare_next_led+0xe6>
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	2000000a 	.word	0x2000000a
 8005ca0:	20001f10 	.word	0x20001f10
 8005ca4:	20001ea8 	.word	0x20001ea8

08005ca8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	uint_fast8_t var;
	if(present_led_counting+2<numbers_of_led)
 8005cb0:	4b25      	ldr	r3, [pc, #148]	; (8005d48 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	4a25      	ldr	r2, [pc, #148]	; (8005d4c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8005cb8:	8812      	ldrh	r2, [r2, #0]
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	da0d      	bge.n	8005cda <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	{
		++present_led_counting;
 8005cbe:	4b22      	ldr	r3, [pc, #136]	; (8005d48 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	4b20      	ldr	r3, [pc, #128]	; (8005d48 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8005cc8:	701a      	strb	r2, [r3, #0]
		prepare_next_led(present_led_counting,0);
 8005cca:	4b1f      	ldr	r3, [pc, #124]	; (8005d48 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff ff0a 	bl	8005aec <prepare_next_led>
	{
		enable_transmit=0;
		mode=HALT;
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	}
}
 8005cd8:	e032      	b.n	8005d40 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
	else if(present_led_counting<numbers_of_led)
 8005cda:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d221      	bcs.n	8005d2c <HAL_TIM_PWM_PulseFinishedCallback+0x84>
		++present_led_counting;
 8005ce8:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8005cf2:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var) {
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e014      	b.n	8005d24 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>
			buffer[var+24]=0;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3318      	adds	r3, #24
 8005cfe:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8005d00:	2100      	movs	r1, #0
 8005d02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=0;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3320      	adds	r3, #32
 8005d0a:	4a11      	ldr	r2, [pc, #68]	; (8005d50 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=0;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3328      	adds	r3, #40	; 0x28
 8005d16:	4a0e      	ldr	r2, [pc, #56]	; (8005d50 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8005d18:	2100      	movs	r1, #0
 8005d1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b07      	cmp	r3, #7
 8005d28:	d9e7      	bls.n	8005cfa <HAL_TIM_PWM_PulseFinishedCallback+0x52>
}
 8005d2a:	e009      	b.n	8005d40 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
		enable_transmit=0;
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
		mode=HALT;
 8005d32:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4808      	ldr	r0, [pc, #32]	; (8005d5c <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 8005d3c:	f003 f948 	bl	8008fd0 <HAL_TIM_PWM_Stop_DMA>
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20001f0c 	.word	0x20001f0c
 8005d4c:	20000008 	.word	0x20000008
 8005d50:	20001ea8 	.word	0x20001ea8
 8005d54:	20001fca 	.word	0x20001fca
 8005d58:	20001ea5 	.word	0x20001ea5
 8005d5c:	20000bd0 	.word	0x20000bd0

08005d60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	uint_fast8_t var;
	if(present_led_counting+2<numbers_of_led)
 8005d68:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8c>)
 8005d70:	8812      	ldrh	r2, [r2, #0]
 8005d72:	4293      	cmp	r3, r2
 8005d74:	da0d      	bge.n	8005d92 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x32>
	{
		++present_led_counting;
 8005d76:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8005d80:	701a      	strb	r2, [r3, #0]
		prepare_next_led(present_led_counting,1);
 8005d82:	4b19      	ldr	r3, [pc, #100]	; (8005de8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff feae 	bl	8005aec <prepare_next_led>
			buffer[var]=0;
			buffer[var+8]=0;
			buffer[var+16]=0;
		}
	}
}
 8005d90:	e026      	b.n	8005de0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x80>
	else if(present_led_counting<numbers_of_led)
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	4b14      	ldr	r3, [pc, #80]	; (8005dec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8c>)
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d21f      	bcs.n	8005de0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x80>
		++present_led_counting;
 8005da0:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8005daa:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var) {
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e013      	b.n	8005dda <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x7a>
			buffer[var]=0;
 8005db2:	4a0f      	ldr	r2, [pc, #60]	; (8005df0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2100      	movs	r1, #0
 8005db8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=0;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	4a0b      	ldr	r2, [pc, #44]	; (8005df0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=0;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3310      	adds	r3, #16
 8005dcc:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 8005dce:	2100      	movs	r1, #0
 8005dd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b07      	cmp	r3, #7
 8005dde:	d9e8      	bls.n	8005db2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x52>
}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20001f0c 	.word	0x20001f0c
 8005dec:	20000008 	.word	0x20000008
 8005df0:	20001ea8 	.word	0x20001ea8

08005df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
   ldr   sp, =_estack       /* set stack pointer */
 8005df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e2c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005df8:	480d      	ldr	r0, [pc, #52]	; (8005e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005dfa:	490e      	ldr	r1, [pc, #56]	; (8005e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005dfc:	4a0e      	ldr	r2, [pc, #56]	; (8005e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e00:	e002      	b.n	8005e08 <LoopCopyDataInit>

08005e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e06:	3304      	adds	r3, #4

08005e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e0c:	d3f9      	bcc.n	8005e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e0e:	4a0b      	ldr	r2, [pc, #44]	; (8005e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005e10:	4c0b      	ldr	r4, [pc, #44]	; (8005e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e14:	e001      	b.n	8005e1a <LoopFillZerobss>

08005e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e18:	3204      	adds	r2, #4

08005e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e1c:	d3fb      	bcc.n	8005e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e1e:	f7ff fc8b 	bl	8005738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e22:	f006 ff0f 	bl	800cc44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e26:	f7fb fccf 	bl	80017c8 <main>
  bx  lr    
 8005e2a:	4770      	bx	lr
   ldr   sp, =_estack       /* set stack pointer */
 8005e2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e34:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8005e38:	0800d860 	.word	0x0800d860
  ldr r2, =_sbss
 8005e3c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005e40:	20001fe4 	.word	0x20001fe4

08005e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e44:	e7fe      	b.n	8005e44 <ADC_IRQHandler>
	...

08005e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <HAL_Init+0x40>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a0d      	ldr	r2, [pc, #52]	; (8005e88 <HAL_Init+0x40>)
 8005e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e58:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <HAL_Init+0x40>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <HAL_Init+0x40>)
 8005e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e64:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_Init+0x40>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a07      	ldr	r2, [pc, #28]	; (8005e88 <HAL_Init+0x40>)
 8005e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e70:	2003      	movs	r0, #3
 8005e72:	f000 fd71 	bl	8006958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e76:	2000      	movs	r0, #0
 8005e78:	f000 f808 	bl	8005e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e7c:	f7fe ff7a 	bl	8004d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40023c00 	.word	0x40023c00

08005e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e94:	4b12      	ldr	r3, [pc, #72]	; (8005ee0 <HAL_InitTick+0x54>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <HAL_InitTick+0x58>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fd89 	bl	80069c2 <HAL_SYSTICK_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e00e      	b.n	8005ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b0f      	cmp	r3, #15
 8005ebe:	d80a      	bhi.n	8005ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	f000 fd51 	bl	800696e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ecc:	4a06      	ldr	r2, [pc, #24]	; (8005ee8 <HAL_InitTick+0x5c>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e000      	b.n	8005ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000004 	.word	0x20000004
 8005ee4:	20000010 	.word	0x20000010
 8005ee8:	2000000c 	.word	0x2000000c

08005eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <HAL_IncTick+0x20>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_IncTick+0x24>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4413      	add	r3, r2
 8005efc:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <HAL_IncTick+0x24>)
 8005efe:	6013      	str	r3, [r2, #0]
}
 8005f00:	bf00      	nop
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000010 	.word	0x20000010
 8005f10:	20001fd0 	.word	0x20001fd0

08005f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  return uwTick;
 8005f18:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <HAL_GetTick+0x14>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	20001fd0 	.word	0x20001fd0

08005f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f34:	f7ff ffee 	bl	8005f14 <HAL_GetTick>
 8005f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d005      	beq.n	8005f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f46:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <HAL_Delay+0x44>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f52:	bf00      	nop
 8005f54:	f7ff ffde 	bl	8005f14 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d8f7      	bhi.n	8005f54 <HAL_Delay+0x28>
  {
  }
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000010 	.word	0x20000010

08005f74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e033      	b.n	8005ff2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fe ff16 	bl	8004dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d118      	bne.n	8005fe4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005fba:	f023 0302 	bic.w	r3, r3, #2
 8005fbe:	f043 0202 	orr.w	r2, r3, #2
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa78 	bl	80064bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f023 0303 	bic.w	r3, r3, #3
 8005fda:	f043 0201 	orr.w	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	641a      	str	r2, [r3, #64]	; 0x40
 8005fe2:	e001      	b.n	8005fe8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_ADC_Start_DMA+0x1e>
 8006016:	2302      	movs	r3, #2
 8006018:	e0e9      	b.n	80061ee <HAL_ADC_Start_DMA+0x1f2>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d018      	beq.n	8006062 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006040:	4b6d      	ldr	r3, [pc, #436]	; (80061f8 <HAL_ADC_Start_DMA+0x1fc>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a6d      	ldr	r2, [pc, #436]	; (80061fc <HAL_ADC_Start_DMA+0x200>)
 8006046:	fba2 2303 	umull	r2, r3, r2, r3
 800604a:	0c9a      	lsrs	r2, r3, #18
 800604c:	4613      	mov	r3, r2
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	4413      	add	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006054:	e002      	b.n	800605c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	3b01      	subs	r3, #1
 800605a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f9      	bne.n	8006056 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006070:	d107      	bne.n	8006082 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006080:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b01      	cmp	r3, #1
 800608e:	f040 80a1 	bne.w	80061d4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800609a:	f023 0301 	bic.w	r3, r3, #1
 800609e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80060bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d0:	d106      	bne.n	80060e0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	f023 0206 	bic.w	r2, r3, #6
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	645a      	str	r2, [r3, #68]	; 0x44
 80060de:	e002      	b.n	80060e6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060ee:	4b44      	ldr	r3, [pc, #272]	; (8006200 <HAL_ADC_Start_DMA+0x204>)
 80060f0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	4a43      	ldr	r2, [pc, #268]	; (8006204 <HAL_ADC_Start_DMA+0x208>)
 80060f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	4a42      	ldr	r2, [pc, #264]	; (8006208 <HAL_ADC_Start_DMA+0x20c>)
 8006100:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	4a41      	ldr	r2, [pc, #260]	; (800620c <HAL_ADC_Start_DMA+0x210>)
 8006108:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006112:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006122:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006132:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	334c      	adds	r3, #76	; 0x4c
 800613e:	4619      	mov	r1, r3
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f000 fcf8 	bl	8006b38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	2b00      	cmp	r3, #0
 8006152:	d12a      	bne.n	80061aa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2d      	ldr	r2, [pc, #180]	; (8006210 <HAL_ADC_Start_DMA+0x214>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d015      	beq.n	800618a <HAL_ADC_Start_DMA+0x18e>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2c      	ldr	r2, [pc, #176]	; (8006214 <HAL_ADC_Start_DMA+0x218>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d105      	bne.n	8006174 <HAL_ADC_Start_DMA+0x178>
 8006168:	4b25      	ldr	r3, [pc, #148]	; (8006200 <HAL_ADC_Start_DMA+0x204>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 031f 	and.w	r3, r3, #31
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a27      	ldr	r2, [pc, #156]	; (8006218 <HAL_ADC_Start_DMA+0x21c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d136      	bne.n	80061ec <HAL_ADC_Start_DMA+0x1f0>
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <HAL_ADC_Start_DMA+0x204>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	2b00      	cmp	r3, #0
 8006188:	d130      	bne.n	80061ec <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d129      	bne.n	80061ec <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061a6:	609a      	str	r2, [r3, #8]
 80061a8:	e020      	b.n	80061ec <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a18      	ldr	r2, [pc, #96]	; (8006210 <HAL_ADC_Start_DMA+0x214>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d11b      	bne.n	80061ec <HAL_ADC_Start_DMA+0x1f0>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d114      	bne.n	80061ec <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061d0:	609a      	str	r2, [r3, #8]
 80061d2:	e00b      	b.n	80061ec <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	f043 0210 	orr.w	r2, r3, #16
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e4:	f043 0201 	orr.w	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000004 	.word	0x20000004
 80061fc:	431bde83 	.word	0x431bde83
 8006200:	40012300 	.word	0x40012300
 8006204:	080066b5 	.word	0x080066b5
 8006208:	0800676f 	.word	0x0800676f
 800620c:	0800678b 	.word	0x0800678b
 8006210:	40012000 	.word	0x40012000
 8006214:	40012100 	.word	0x40012100
 8006218:	40012200 	.word	0x40012200

0800621c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_ADC_ConfigChannel+0x1c>
 8006270:	2302      	movs	r3, #2
 8006272:	e113      	b.n	800649c <HAL_ADC_ConfigChannel+0x244>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b09      	cmp	r3, #9
 8006282:	d925      	bls.n	80062d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68d9      	ldr	r1, [r3, #12]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	4613      	mov	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4413      	add	r3, r2
 8006298:	3b1e      	subs	r3, #30
 800629a:	2207      	movs	r2, #7
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	43da      	mvns	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	400a      	ands	r2, r1
 80062a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68d9      	ldr	r1, [r3, #12]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	4618      	mov	r0, r3
 80062bc:	4603      	mov	r3, r0
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	4403      	add	r3, r0
 80062c2:	3b1e      	subs	r3, #30
 80062c4:	409a      	lsls	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	e022      	b.n	8006316 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6919      	ldr	r1, [r3, #16]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	4613      	mov	r3, r2
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	4413      	add	r3, r2
 80062e4:	2207      	movs	r2, #7
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	43da      	mvns	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	400a      	ands	r2, r1
 80062f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6919      	ldr	r1, [r3, #16]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	4618      	mov	r0, r3
 8006306:	4603      	mov	r3, r0
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	4403      	add	r3, r0
 800630c:	409a      	lsls	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b06      	cmp	r3, #6
 800631c:	d824      	bhi.n	8006368 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	3b05      	subs	r3, #5
 8006330:	221f      	movs	r2, #31
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43da      	mvns	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	400a      	ands	r2, r1
 800633e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	4618      	mov	r0, r3
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	3b05      	subs	r3, #5
 800635a:	fa00 f203 	lsl.w	r2, r0, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	635a      	str	r2, [r3, #52]	; 0x34
 8006366:	e04c      	b.n	8006402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b0c      	cmp	r3, #12
 800636e:	d824      	bhi.n	80063ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	3b23      	subs	r3, #35	; 0x23
 8006382:	221f      	movs	r2, #31
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	43da      	mvns	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	400a      	ands	r2, r1
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	4618      	mov	r0, r3
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	3b23      	subs	r3, #35	; 0x23
 80063ac:	fa00 f203 	lsl.w	r2, r0, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
 80063b8:	e023      	b.n	8006402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	3b41      	subs	r3, #65	; 0x41
 80063cc:	221f      	movs	r2, #31
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	43da      	mvns	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	400a      	ands	r2, r1
 80063da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	4618      	mov	r0, r3
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	3b41      	subs	r3, #65	; 0x41
 80063f6:	fa00 f203 	lsl.w	r2, r0, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006402:	4b29      	ldr	r3, [pc, #164]	; (80064a8 <HAL_ADC_ConfigChannel+0x250>)
 8006404:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a28      	ldr	r2, [pc, #160]	; (80064ac <HAL_ADC_ConfigChannel+0x254>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10f      	bne.n	8006430 <HAL_ADC_ConfigChannel+0x1d8>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b12      	cmp	r3, #18
 8006416:	d10b      	bne.n	8006430 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <HAL_ADC_ConfigChannel+0x254>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d12b      	bne.n	8006492 <HAL_ADC_ConfigChannel+0x23a>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1c      	ldr	r2, [pc, #112]	; (80064b0 <HAL_ADC_ConfigChannel+0x258>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <HAL_ADC_ConfigChannel+0x1f4>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b11      	cmp	r3, #17
 800644a:	d122      	bne.n	8006492 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a11      	ldr	r2, [pc, #68]	; (80064b0 <HAL_ADC_ConfigChannel+0x258>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d111      	bne.n	8006492 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800646e:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <HAL_ADC_ConfigChannel+0x25c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a11      	ldr	r2, [pc, #68]	; (80064b8 <HAL_ADC_ConfigChannel+0x260>)
 8006474:	fba2 2303 	umull	r2, r3, r2, r3
 8006478:	0c9a      	lsrs	r2, r3, #18
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006484:	e002      	b.n	800648c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	3b01      	subs	r3, #1
 800648a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f9      	bne.n	8006486 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40012300 	.word	0x40012300
 80064ac:	40012000 	.word	0x40012000
 80064b0:	10000012 	.word	0x10000012
 80064b4:	20000004 	.word	0x20000004
 80064b8:	431bde83 	.word	0x431bde83

080064bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064c4:	4b79      	ldr	r3, [pc, #484]	; (80066ac <ADC_Init+0x1f0>)
 80064c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	431a      	orrs	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6859      	ldr	r1, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	021a      	lsls	r2, r3, #8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6859      	ldr	r1, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6899      	ldr	r1, [r3, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	4a58      	ldr	r2, [pc, #352]	; (80066b0 <ADC_Init+0x1f4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d022      	beq.n	800659a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006562:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6899      	ldr	r1, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6899      	ldr	r1, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]
 8006598:	e00f      	b.n	80065ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80065b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0202 	bic.w	r2, r2, #2
 80065c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6899      	ldr	r1, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	7e1b      	ldrb	r3, [r3, #24]
 80065d4:	005a      	lsls	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01b      	beq.n	8006620 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006606:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6859      	ldr	r1, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	3b01      	subs	r3, #1
 8006614:	035a      	lsls	r2, r3, #13
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
 800661e:	e007      	b.n	8006630 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800662e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	3b01      	subs	r3, #1
 800664c:	051a      	lsls	r2, r3, #20
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6899      	ldr	r1, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006672:	025a      	lsls	r2, r3, #9
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6899      	ldr	r1, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	029a      	lsls	r2, r3, #10
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	609a      	str	r2, [r3, #8]
}
 80066a0:	bf00      	nop
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	40012300 	.word	0x40012300
 80066b0:	0f000001 	.word	0x0f000001

080066b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d13c      	bne.n	8006748 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d12b      	bne.n	8006740 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d127      	bne.n	8006740 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d006      	beq.n	800670c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006708:	2b00      	cmp	r3, #0
 800670a:	d119      	bne.n	8006740 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0220 	bic.w	r2, r2, #32
 800671a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	f043 0201 	orr.w	r2, r3, #1
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff fd6b 	bl	800621c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006746:	e00e      	b.n	8006766 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff fd75 	bl	8006244 <HAL_ADC_ErrorCallback>
}
 800675a:	e004      	b.n	8006766 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4798      	blx	r3
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7ff fd57 	bl	8006230 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2240      	movs	r2, #64	; 0x40
 800679c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	f043 0204 	orr.w	r2, r3, #4
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7ff fd4a 	bl	8006244 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067b0:	bf00      	nop
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <__NVIC_SetPriorityGrouping+0x44>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067d4:	4013      	ands	r3, r2
 80067d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067ea:	4a04      	ldr	r2, [pc, #16]	; (80067fc <__NVIC_SetPriorityGrouping+0x44>)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	60d3      	str	r3, [r2, #12]
}
 80067f0:	bf00      	nop
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	e000ed00 	.word	0xe000ed00

08006800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006804:	4b04      	ldr	r3, [pc, #16]	; (8006818 <__NVIC_GetPriorityGrouping+0x18>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	f003 0307 	and.w	r3, r3, #7
}
 800680e:	4618      	mov	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	e000ed00 	.word	0xe000ed00

0800681c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682a:	2b00      	cmp	r3, #0
 800682c:	db0b      	blt.n	8006846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	f003 021f 	and.w	r2, r3, #31
 8006834:	4907      	ldr	r1, [pc, #28]	; (8006854 <__NVIC_EnableIRQ+0x38>)
 8006836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	2001      	movs	r0, #1
 800683e:	fa00 f202 	lsl.w	r2, r0, r2
 8006842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	e000e100 	.word	0xe000e100

08006858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006868:	2b00      	cmp	r3, #0
 800686a:	db0a      	blt.n	8006882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	b2da      	uxtb	r2, r3
 8006870:	490c      	ldr	r1, [pc, #48]	; (80068a4 <__NVIC_SetPriority+0x4c>)
 8006872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006876:	0112      	lsls	r2, r2, #4
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	440b      	add	r3, r1
 800687c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006880:	e00a      	b.n	8006898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	4908      	ldr	r1, [pc, #32]	; (80068a8 <__NVIC_SetPriority+0x50>)
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	3b04      	subs	r3, #4
 8006890:	0112      	lsls	r2, r2, #4
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	440b      	add	r3, r1
 8006896:	761a      	strb	r2, [r3, #24]
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	e000e100 	.word	0xe000e100
 80068a8:	e000ed00 	.word	0xe000ed00

080068ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b089      	sub	sp, #36	; 0x24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f1c3 0307 	rsb	r3, r3, #7
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	bf28      	it	cs
 80068ca:	2304      	movcs	r3, #4
 80068cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	3304      	adds	r3, #4
 80068d2:	2b06      	cmp	r3, #6
 80068d4:	d902      	bls.n	80068dc <NVIC_EncodePriority+0x30>
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	3b03      	subs	r3, #3
 80068da:	e000      	b.n	80068de <NVIC_EncodePriority+0x32>
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	43da      	mvns	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	401a      	ands	r2, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068f4:	f04f 31ff 	mov.w	r1, #4294967295
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	fa01 f303 	lsl.w	r3, r1, r3
 80068fe:	43d9      	mvns	r1, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006904:	4313      	orrs	r3, r2
         );
}
 8006906:	4618      	mov	r0, r3
 8006908:	3724      	adds	r7, #36	; 0x24
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
	...

08006914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3b01      	subs	r3, #1
 8006920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006924:	d301      	bcc.n	800692a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006926:	2301      	movs	r3, #1
 8006928:	e00f      	b.n	800694a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800692a:	4a0a      	ldr	r2, [pc, #40]	; (8006954 <SysTick_Config+0x40>)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3b01      	subs	r3, #1
 8006930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006932:	210f      	movs	r1, #15
 8006934:	f04f 30ff 	mov.w	r0, #4294967295
 8006938:	f7ff ff8e 	bl	8006858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <SysTick_Config+0x40>)
 800693e:	2200      	movs	r2, #0
 8006940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006942:	4b04      	ldr	r3, [pc, #16]	; (8006954 <SysTick_Config+0x40>)
 8006944:	2207      	movs	r2, #7
 8006946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	e000e010 	.word	0xe000e010

08006958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff ff29 	bl	80067b8 <__NVIC_SetPriorityGrouping>
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800696e:	b580      	push	{r7, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
 8006974:	4603      	mov	r3, r0
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006980:	f7ff ff3e 	bl	8006800 <__NVIC_GetPriorityGrouping>
 8006984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	68b9      	ldr	r1, [r7, #8]
 800698a:	6978      	ldr	r0, [r7, #20]
 800698c:	f7ff ff8e 	bl	80068ac <NVIC_EncodePriority>
 8006990:	4602      	mov	r2, r0
 8006992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006996:	4611      	mov	r1, r2
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff ff5d 	bl	8006858 <__NVIC_SetPriority>
}
 800699e:	bf00      	nop
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	4603      	mov	r3, r0
 80069ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff ff31 	bl	800681c <__NVIC_EnableIRQ>
}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff ffa2 	bl	8006914 <SysTick_Config>
 80069d0:	4603      	mov	r3, r0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80069e8:	f7ff fa94 	bl	8005f14 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e099      	b.n	8006b2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 0201 	bic.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a18:	e00f      	b.n	8006a3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a1a:	f7ff fa7b 	bl	8005f14 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b05      	cmp	r3, #5
 8006a26:	d908      	bls.n	8006a3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2203      	movs	r2, #3
 8006a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e078      	b.n	8006b2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e8      	bne.n	8006a1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4b38      	ldr	r3, [pc, #224]	; (8006b34 <HAL_DMA_Init+0x158>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d107      	bne.n	8006aa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d117      	bne.n	8006afe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00e      	beq.n	8006afe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fb01 	bl	80070e8 <DMA_CheckFifoParam>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2240      	movs	r2, #64	; 0x40
 8006af0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006afa:	2301      	movs	r3, #1
 8006afc:	e016      	b.n	8006b2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fab8 	bl	800707c <DMA_CalcBaseAndBitshift>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b14:	223f      	movs	r2, #63	; 0x3f
 8006b16:	409a      	lsls	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	f010803f 	.word	0xf010803f

08006b38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_DMA_Start_IT+0x26>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e040      	b.n	8006be0 <HAL_DMA_Start_IT+0xa8>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d12f      	bne.n	8006bd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fa4a 	bl	8007020 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b90:	223f      	movs	r2, #63	; 0x3f
 8006b92:	409a      	lsls	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0216 	orr.w	r2, r2, #22
 8006ba6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0208 	orr.w	r2, r2, #8
 8006bbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0201 	orr.w	r2, r2, #1
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	e005      	b.n	8006bde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006bf6:	f7ff f98d 	bl	8005f14 <HAL_GetTick>
 8006bfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d008      	beq.n	8006c1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2280      	movs	r2, #128	; 0x80
 8006c0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e052      	b.n	8006cc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0216 	bic.w	r2, r2, #22
 8006c28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695a      	ldr	r2, [r3, #20]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <HAL_DMA_Abort+0x62>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d007      	beq.n	8006c5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0208 	bic.w	r2, r2, #8
 8006c58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0201 	bic.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c6a:	e013      	b.n	8006c94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c6c:	f7ff f952 	bl	8005f14 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b05      	cmp	r3, #5
 8006c78:	d90c      	bls.n	8006c94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2203      	movs	r2, #3
 8006c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e015      	b.n	8006cc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e4      	bne.n	8006c6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca6:	223f      	movs	r2, #63	; 0x3f
 8006ca8:	409a      	lsls	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d004      	beq.n	8006ce6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2280      	movs	r2, #128	; 0x80
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e00c      	b.n	8006d00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2205      	movs	r2, #5
 8006cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0201 	bic.w	r2, r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d18:	4b8e      	ldr	r3, [pc, #568]	; (8006f54 <HAL_DMA_IRQHandler+0x248>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a8e      	ldr	r2, [pc, #568]	; (8006f58 <HAL_DMA_IRQHandler+0x24c>)
 8006d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d22:	0a9b      	lsrs	r3, r3, #10
 8006d24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d36:	2208      	movs	r2, #8
 8006d38:	409a      	lsls	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01a      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d013      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0204 	bic.w	r2, r2, #4
 8006d5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d64:	2208      	movs	r2, #8
 8006d66:	409a      	lsls	r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d70:	f043 0201 	orr.w	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d012      	beq.n	8006dae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	409a      	lsls	r2, r3
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f043 0202 	orr.w	r2, r3, #2
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db2:	2204      	movs	r2, #4
 8006db4:	409a      	lsls	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4013      	ands	r3, r2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d012      	beq.n	8006de4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd0:	2204      	movs	r2, #4
 8006dd2:	409a      	lsls	r2, r3
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ddc:	f043 0204 	orr.w	r2, r3, #4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de8:	2210      	movs	r2, #16
 8006dea:	409a      	lsls	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d043      	beq.n	8006e7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d03c      	beq.n	8006e7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e06:	2210      	movs	r2, #16
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d018      	beq.n	8006e4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d108      	bne.n	8006e3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d024      	beq.n	8006e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
 8006e3a:	e01f      	b.n	8006e7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01b      	beq.n	8006e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	4798      	blx	r3
 8006e4c:	e016      	b.n	8006e7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d107      	bne.n	8006e6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0208 	bic.w	r2, r2, #8
 8006e6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e80:	2220      	movs	r2, #32
 8006e82:	409a      	lsls	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4013      	ands	r3, r2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 808f 	beq.w	8006fac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8087 	beq.w	8006fac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	409a      	lsls	r2, r3
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b05      	cmp	r3, #5
 8006eb4:	d136      	bne.n	8006f24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0216 	bic.w	r2, r2, #22
 8006ec4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	695a      	ldr	r2, [r3, #20]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ed4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d103      	bne.n	8006ee6 <HAL_DMA_IRQHandler+0x1da>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0208 	bic.w	r2, r2, #8
 8006ef4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efa:	223f      	movs	r2, #63	; 0x3f
 8006efc:	409a      	lsls	r2, r3
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d07e      	beq.n	8007018 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
        }
        return;
 8006f22:	e079      	b.n	8007018 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01d      	beq.n	8006f6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10d      	bne.n	8006f5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d031      	beq.n	8006fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
 8006f50:	e02c      	b.n	8006fac <HAL_DMA_IRQHandler+0x2a0>
 8006f52:	bf00      	nop
 8006f54:	20000004 	.word	0x20000004
 8006f58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d023      	beq.n	8006fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
 8006f6c:	e01e      	b.n	8006fac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10f      	bne.n	8006f9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0210 	bic.w	r2, r2, #16
 8006f8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d032      	beq.n	800701a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d022      	beq.n	8007006 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2205      	movs	r2, #5
 8006fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0201 	bic.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60bb      	str	r3, [r7, #8]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d307      	bcc.n	8006ff4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1f2      	bne.n	8006fd8 <HAL_DMA_IRQHandler+0x2cc>
 8006ff2:	e000      	b.n	8006ff6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006ff4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	4798      	blx	r3
 8007016:	e000      	b.n	800701a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007018:	bf00      	nop
    }
  }
}
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800703c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b40      	cmp	r3, #64	; 0x40
 800704c:	d108      	bne.n	8007060 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800705e:	e007      	b.n	8007070 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	60da      	str	r2, [r3, #12]
}
 8007070:	bf00      	nop
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	b2db      	uxtb	r3, r3
 800708a:	3b10      	subs	r3, #16
 800708c:	4a14      	ldr	r2, [pc, #80]	; (80070e0 <DMA_CalcBaseAndBitshift+0x64>)
 800708e:	fba2 2303 	umull	r2, r3, r2, r3
 8007092:	091b      	lsrs	r3, r3, #4
 8007094:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007096:	4a13      	ldr	r2, [pc, #76]	; (80070e4 <DMA_CalcBaseAndBitshift+0x68>)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d909      	bls.n	80070be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80070b2:	f023 0303 	bic.w	r3, r3, #3
 80070b6:	1d1a      	adds	r2, r3, #4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	659a      	str	r2, [r3, #88]	; 0x58
 80070bc:	e007      	b.n	80070ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	aaaaaaab 	.word	0xaaaaaaab
 80070e4:	0800d470 	.word	0x0800d470

080070e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d11f      	bne.n	8007142 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b03      	cmp	r3, #3
 8007106:	d856      	bhi.n	80071b6 <DMA_CheckFifoParam+0xce>
 8007108:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <DMA_CheckFifoParam+0x28>)
 800710a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710e:	bf00      	nop
 8007110:	08007121 	.word	0x08007121
 8007114:	08007133 	.word	0x08007133
 8007118:	08007121 	.word	0x08007121
 800711c:	080071b7 	.word	0x080071b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d046      	beq.n	80071ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007130:	e043      	b.n	80071ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800713a:	d140      	bne.n	80071be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007140:	e03d      	b.n	80071be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714a:	d121      	bne.n	8007190 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b03      	cmp	r3, #3
 8007150:	d837      	bhi.n	80071c2 <DMA_CheckFifoParam+0xda>
 8007152:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <DMA_CheckFifoParam+0x70>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	08007169 	.word	0x08007169
 800715c:	0800716f 	.word	0x0800716f
 8007160:	08007169 	.word	0x08007169
 8007164:	08007181 	.word	0x08007181
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	73fb      	strb	r3, [r7, #15]
      break;
 800716c:	e030      	b.n	80071d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d025      	beq.n	80071c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800717e:	e022      	b.n	80071c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007188:	d11f      	bne.n	80071ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800718e:	e01c      	b.n	80071ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b02      	cmp	r3, #2
 8007194:	d903      	bls.n	800719e <DMA_CheckFifoParam+0xb6>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d003      	beq.n	80071a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800719c:	e018      	b.n	80071d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	73fb      	strb	r3, [r7, #15]
      break;
 80071a2:	e015      	b.n	80071d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00e      	beq.n	80071ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	73fb      	strb	r3, [r7, #15]
      break;
 80071b4:	e00b      	b.n	80071ce <DMA_CheckFifoParam+0xe6>
      break;
 80071b6:	bf00      	nop
 80071b8:	e00a      	b.n	80071d0 <DMA_CheckFifoParam+0xe8>
      break;
 80071ba:	bf00      	nop
 80071bc:	e008      	b.n	80071d0 <DMA_CheckFifoParam+0xe8>
      break;
 80071be:	bf00      	nop
 80071c0:	e006      	b.n	80071d0 <DMA_CheckFifoParam+0xe8>
      break;
 80071c2:	bf00      	nop
 80071c4:	e004      	b.n	80071d0 <DMA_CheckFifoParam+0xe8>
      break;
 80071c6:	bf00      	nop
 80071c8:	e002      	b.n	80071d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80071ca:	bf00      	nop
 80071cc:	e000      	b.n	80071d0 <DMA_CheckFifoParam+0xe8>
      break;
 80071ce:	bf00      	nop
    }
  } 
  
  return status; 
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop

080071e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e06c      	b.n	80072cc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2223      	movs	r2, #35	; 0x23
 8007200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7fd fe55 	bl	8004eb4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800720a:	2300      	movs	r3, #0
 800720c:	60bb      	str	r3, [r7, #8]
 800720e:	4b31      	ldr	r3, [pc, #196]	; (80072d4 <HAL_ETH_Init+0xf4>)
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	4a30      	ldr	r2, [pc, #192]	; (80072d4 <HAL_ETH_Init+0xf4>)
 8007214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007218:	6453      	str	r3, [r2, #68]	; 0x44
 800721a:	4b2e      	ldr	r3, [pc, #184]	; (80072d4 <HAL_ETH_Init+0xf4>)
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007226:	4b2c      	ldr	r3, [pc, #176]	; (80072d8 <HAL_ETH_Init+0xf8>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	4a2b      	ldr	r2, [pc, #172]	; (80072d8 <HAL_ETH_Init+0xf8>)
 800722c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007230:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007232:	4b29      	ldr	r3, [pc, #164]	; (80072d8 <HAL_ETH_Init+0xf8>)
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	4927      	ldr	r1, [pc, #156]	; (80072d8 <HAL_ETH_Init+0xf8>)
 800723c:	4313      	orrs	r3, r2
 800723e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007240:	4b25      	ldr	r3, [pc, #148]	; (80072d8 <HAL_ETH_Init+0xf8>)
 8007242:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6812      	ldr	r2, [r2, #0]
 8007252:	f043 0301 	orr.w	r3, r3, #1
 8007256:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800725a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800725c:	f7fe fe5a 	bl	8005f14 <HAL_GetTick>
 8007260:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007262:	e011      	b.n	8007288 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007264:	f7fe fe56 	bl	8005f14 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007272:	d909      	bls.n	8007288 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2204      	movs	r2, #4
 8007278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	22e0      	movs	r2, #224	; 0xe0
 8007280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e021      	b.n	80072cc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e4      	bne.n	8007264 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f958 	bl	8007550 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f9ff 	bl	80076a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fa55 	bl	8007756 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	461a      	mov	r2, r3
 80072b2:	2100      	movs	r1, #0
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f9bd 	bl	8007634 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2210      	movs	r2, #16
 80072c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40023800 	.word	0x40023800
 80072d8:	40013800 	.word	0x40013800

080072dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4b51      	ldr	r3, [pc, #324]	; (8007438 <ETH_SetMACConfig+0x15c>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	7c1b      	ldrb	r3, [r3, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d102      	bne.n	8007304 <ETH_SetMACConfig+0x28>
 80072fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007302:	e000      	b.n	8007306 <ETH_SetMACConfig+0x2a>
 8007304:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	7c5b      	ldrb	r3, [r3, #17]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d102      	bne.n	8007314 <ETH_SetMACConfig+0x38>
 800730e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007312:	e000      	b.n	8007316 <ETH_SetMACConfig+0x3a>
 8007314:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007316:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800731c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	7fdb      	ldrb	r3, [r3, #31]
 8007322:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007324:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800732a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	7f92      	ldrb	r2, [r2, #30]
 8007330:	2a00      	cmp	r2, #0
 8007332:	d102      	bne.n	800733a <ETH_SetMACConfig+0x5e>
 8007334:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007338:	e000      	b.n	800733c <ETH_SetMACConfig+0x60>
 800733a:	2200      	movs	r2, #0
                        macconf->Speed |
 800733c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	7f1b      	ldrb	r3, [r3, #28]
 8007342:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007344:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800734a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	791b      	ldrb	r3, [r3, #4]
 8007350:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007352:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	f892 2020 	ldrb.w	r2, [r2, #32]
 800735a:	2a00      	cmp	r2, #0
 800735c:	d102      	bne.n	8007364 <ETH_SetMACConfig+0x88>
 800735e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007362:	e000      	b.n	8007366 <ETH_SetMACConfig+0x8a>
 8007364:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007366:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	7bdb      	ldrb	r3, [r3, #15]
 800736c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800736e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007374:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800737c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800737e:	4313      	orrs	r3, r2
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007396:	2001      	movs	r0, #1
 8007398:	f7fe fdc8 	bl	8005f2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	f64f 7341 	movw	r3, #65345	; 0xff41
 80073b2:	4013      	ands	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	d101      	bne.n	80073ca <ETH_SetMACConfig+0xee>
 80073c6:	2280      	movs	r2, #128	; 0x80
 80073c8:	e000      	b.n	80073cc <ETH_SetMACConfig+0xf0>
 80073ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80073cc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80073d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80073da:	2a01      	cmp	r2, #1
 80073dc:	d101      	bne.n	80073e2 <ETH_SetMACConfig+0x106>
 80073de:	2208      	movs	r2, #8
 80073e0:	e000      	b.n	80073e4 <ETH_SetMACConfig+0x108>
 80073e2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80073e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80073ec:	2a01      	cmp	r2, #1
 80073ee:	d101      	bne.n	80073f4 <ETH_SetMACConfig+0x118>
 80073f0:	2204      	movs	r2, #4
 80073f2:	e000      	b.n	80073f6 <ETH_SetMACConfig+0x11a>
 80073f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80073f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80073fe:	2a01      	cmp	r2, #1
 8007400:	d101      	bne.n	8007406 <ETH_SetMACConfig+0x12a>
 8007402:	2202      	movs	r2, #2
 8007404:	e000      	b.n	8007408 <ETH_SetMACConfig+0x12c>
 8007406:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007408:	4313      	orrs	r3, r2
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007420:	2001      	movs	r0, #1
 8007422:	f7fe fd83 	bl	8005f2c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	619a      	str	r2, [r3, #24]
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	ff20810f 	.word	0xff20810f

0800743c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4b3d      	ldr	r3, [pc, #244]	; (800754c <ETH_SetDMAConfig+0x110>)
 8007456:	4013      	ands	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	7b1b      	ldrb	r3, [r3, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <ETH_SetDMAConfig+0x2c>
 8007462:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007466:	e000      	b.n	800746a <ETH_SetDMAConfig+0x2e>
 8007468:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	7b5b      	ldrb	r3, [r3, #13]
 800746e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007470:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	7f52      	ldrb	r2, [r2, #29]
 8007476:	2a00      	cmp	r2, #0
 8007478:	d102      	bne.n	8007480 <ETH_SetDMAConfig+0x44>
 800747a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800747e:	e000      	b.n	8007482 <ETH_SetDMAConfig+0x46>
 8007480:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007482:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	7b9b      	ldrb	r3, [r3, #14]
 8007488:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800748a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007490:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	7f1b      	ldrb	r3, [r3, #28]
 8007496:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007498:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	7f9b      	ldrb	r3, [r3, #30]
 800749e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80074a0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80074a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074ae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80074b0:	4313      	orrs	r3, r2
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c0:	461a      	mov	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80074d2:	2001      	movs	r0, #1
 80074d4:	f7fe fd2a 	bl	8005f2c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e0:	461a      	mov	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	791b      	ldrb	r3, [r3, #4]
 80074ea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80074f0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80074f6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80074fc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007504:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007506:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800750e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007514:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6812      	ldr	r2, [r2, #0]
 800751a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800751e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007522:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007530:	2001      	movs	r0, #1
 8007532:	f7fe fcfb 	bl	8005f2c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753e:	461a      	mov	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6013      	str	r3, [r2, #0]
}
 8007544:	bf00      	nop
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	f8de3f23 	.word	0xf8de3f23

08007550 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b0a6      	sub	sp, #152	; 0x98
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007564:	2300      	movs	r3, #0
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007568:	2300      	movs	r3, #0
 800756a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007574:	2300      	movs	r3, #0
 8007576:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800757a:	2301      	movs	r3, #1
 800757c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007580:	2300      	movs	r3, #0
 8007582:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007586:	2300      	movs	r3, #0
 8007588:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800758c:	2300      	movs	r3, #0
 800758e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007590:	2300      	movs	r3, #0
 8007592:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007596:	2300      	movs	r3, #0
 8007598:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800759a:	2300      	movs	r3, #0
 800759c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80075a0:	2300      	movs	r3, #0
 80075a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80075a6:	2300      	movs	r3, #0
 80075a8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80075b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075b6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80075b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80075be:	2300      	movs	r3, #0
 80075c0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80075c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff fe86 	bl	80072dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80075d4:	2301      	movs	r3, #1
 80075d6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80075d8:	2301      	movs	r3, #1
 80075da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80075de:	2301      	movs	r3, #1
 80075e0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80075e2:	2300      	movs	r3, #0
 80075e4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80075e6:	2300      	movs	r3, #0
 80075e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80075f2:	2300      	movs	r3, #0
 80075f4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80075fc:	2301      	movs	r3, #1
 80075fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007604:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800760a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800760c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007610:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007612:	2301      	movs	r3, #1
 8007614:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007618:	2300      	movs	r3, #0
 800761a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800761c:	2300      	movs	r3, #0
 800761e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007620:	f107 0308 	add.w	r3, r7, #8
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff ff08 	bl	800743c <ETH_SetDMAConfig>
}
 800762c:	bf00      	nop
 800762e:	3798      	adds	r7, #152	; 0x98
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3305      	adds	r3, #5
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	3204      	adds	r2, #4
 800764c:	7812      	ldrb	r2, [r2, #0]
 800764e:	4313      	orrs	r3, r2
 8007650:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	4b11      	ldr	r3, [pc, #68]	; (800769c <ETH_MACAddressConfig+0x68>)
 8007656:	4413      	add	r3, r2
 8007658:	461a      	mov	r2, r3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3303      	adds	r3, #3
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	061a      	lsls	r2, r3, #24
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3302      	adds	r3, #2
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3301      	adds	r3, #1
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	4313      	orrs	r3, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	7812      	ldrb	r2, [r2, #0]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <ETH_MACAddressConfig+0x6c>)
 8007686:	4413      	add	r3, r2
 8007688:	461a      	mov	r2, r3
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	6013      	str	r3, [r2, #0]
}
 800768e:	bf00      	nop
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	40028040 	.word	0x40028040
 80076a0:	40028044 	.word	0x40028044

080076a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	e03e      	b.n	8007730 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68d9      	ldr	r1, [r3, #12]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	440b      	add	r3, r1
 80076c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2200      	movs	r2, #0
 80076ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2200      	movs	r2, #0
 80076d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2200      	movs	r2, #0
 80076da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	3206      	adds	r2, #6
 80076e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d80c      	bhi.n	8007714 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68d9      	ldr	r1, [r3, #12]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	440b      	add	r3, r1
 800770c:	461a      	mov	r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	e004      	b.n	800771e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	461a      	mov	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3301      	adds	r3, #1
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b03      	cmp	r3, #3
 8007734:	d9bd      	bls.n	80076b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007748:	611a      	str	r2, [r3, #16]
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	e046      	b.n	80077f2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6919      	ldr	r1, [r3, #16]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	440b      	add	r3, r1
 8007774:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2200      	movs	r2, #0
 8007780:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2200      	movs	r2, #0
 8007786:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2200      	movs	r2, #0
 800778c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2200      	movs	r2, #0
 8007792:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2200      	movs	r2, #0
 8007798:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80077a8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	3212      	adds	r2, #18
 80077be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d80c      	bhi.n	80077e2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6919      	ldr	r1, [r3, #16]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	440b      	add	r3, r1
 80077da:	461a      	mov	r2, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	60da      	str	r2, [r3, #12]
 80077e0:	e004      	b.n	80077ec <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	461a      	mov	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3301      	adds	r3, #1
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d9b5      	bls.n	8007764 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691a      	ldr	r2, [r3, #16]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007822:	60da      	str	r2, [r3, #12]
}
 8007824:	bf00      	nop
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007830:	b480      	push	{r7}
 8007832:	b089      	sub	sp, #36	; 0x24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800783a:	2300      	movs	r3, #0
 800783c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800783e:	2300      	movs	r3, #0
 8007840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007842:	2300      	movs	r3, #0
 8007844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007846:	2300      	movs	r3, #0
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	e177      	b.n	8007b3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800784c:	2201      	movs	r2, #1
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	4013      	ands	r3, r2
 800785e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	429a      	cmp	r2, r3
 8007866:	f040 8166 	bne.w	8007b36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	2b01      	cmp	r3, #1
 8007874:	d005      	beq.n	8007882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800787e:	2b02      	cmp	r3, #2
 8007880:	d130      	bne.n	80078e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	2203      	movs	r2, #3
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	43db      	mvns	r3, r3
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	4013      	ands	r3, r2
 8007898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	fa02 f303 	lsl.w	r3, r2, r3
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078b8:	2201      	movs	r2, #1
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	fa02 f303 	lsl.w	r3, r2, r3
 80078c0:	43db      	mvns	r3, r3
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	4013      	ands	r3, r2
 80078c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	091b      	lsrs	r3, r3, #4
 80078ce:	f003 0201 	and.w	r2, r3, #1
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	fa02 f303 	lsl.w	r3, r2, r3
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	4313      	orrs	r3, r2
 80078dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f003 0303 	and.w	r3, r3, #3
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d017      	beq.n	8007920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	2203      	movs	r2, #3
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	43db      	mvns	r3, r3
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	4013      	ands	r3, r2
 8007906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	fa02 f303 	lsl.w	r3, r2, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4313      	orrs	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f003 0303 	and.w	r3, r3, #3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d123      	bne.n	8007974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	08da      	lsrs	r2, r3, #3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3208      	adds	r2, #8
 8007934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	220f      	movs	r2, #15
 8007944:	fa02 f303 	lsl.w	r3, r2, r3
 8007948:	43db      	mvns	r3, r3
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	4013      	ands	r3, r2
 800794e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	4313      	orrs	r3, r2
 8007964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	08da      	lsrs	r2, r3, #3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3208      	adds	r2, #8
 800796e:	69b9      	ldr	r1, [r7, #24]
 8007970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	2203      	movs	r2, #3
 8007980:	fa02 f303 	lsl.w	r3, r2, r3
 8007984:	43db      	mvns	r3, r3
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	4013      	ands	r3, r2
 800798a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f003 0203 	and.w	r2, r3, #3
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	fa02 f303 	lsl.w	r3, r2, r3
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	4313      	orrs	r3, r2
 80079a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 80c0 	beq.w	8007b36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	4b66      	ldr	r3, [pc, #408]	; (8007b54 <HAL_GPIO_Init+0x324>)
 80079bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079be:	4a65      	ldr	r2, [pc, #404]	; (8007b54 <HAL_GPIO_Init+0x324>)
 80079c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079c4:	6453      	str	r3, [r2, #68]	; 0x44
 80079c6:	4b63      	ldr	r3, [pc, #396]	; (8007b54 <HAL_GPIO_Init+0x324>)
 80079c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079d2:	4a61      	ldr	r2, [pc, #388]	; (8007b58 <HAL_GPIO_Init+0x328>)
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	089b      	lsrs	r3, r3, #2
 80079d8:	3302      	adds	r3, #2
 80079da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f003 0303 	and.w	r3, r3, #3
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	220f      	movs	r2, #15
 80079ea:	fa02 f303 	lsl.w	r3, r2, r3
 80079ee:	43db      	mvns	r3, r3
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	4013      	ands	r3, r2
 80079f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a58      	ldr	r2, [pc, #352]	; (8007b5c <HAL_GPIO_Init+0x32c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d037      	beq.n	8007a6e <HAL_GPIO_Init+0x23e>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a57      	ldr	r2, [pc, #348]	; (8007b60 <HAL_GPIO_Init+0x330>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d031      	beq.n	8007a6a <HAL_GPIO_Init+0x23a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a56      	ldr	r2, [pc, #344]	; (8007b64 <HAL_GPIO_Init+0x334>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d02b      	beq.n	8007a66 <HAL_GPIO_Init+0x236>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a55      	ldr	r2, [pc, #340]	; (8007b68 <HAL_GPIO_Init+0x338>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d025      	beq.n	8007a62 <HAL_GPIO_Init+0x232>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a54      	ldr	r2, [pc, #336]	; (8007b6c <HAL_GPIO_Init+0x33c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d01f      	beq.n	8007a5e <HAL_GPIO_Init+0x22e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a53      	ldr	r2, [pc, #332]	; (8007b70 <HAL_GPIO_Init+0x340>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d019      	beq.n	8007a5a <HAL_GPIO_Init+0x22a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a52      	ldr	r2, [pc, #328]	; (8007b74 <HAL_GPIO_Init+0x344>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d013      	beq.n	8007a56 <HAL_GPIO_Init+0x226>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a51      	ldr	r2, [pc, #324]	; (8007b78 <HAL_GPIO_Init+0x348>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00d      	beq.n	8007a52 <HAL_GPIO_Init+0x222>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a50      	ldr	r2, [pc, #320]	; (8007b7c <HAL_GPIO_Init+0x34c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d007      	beq.n	8007a4e <HAL_GPIO_Init+0x21e>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a4f      	ldr	r2, [pc, #316]	; (8007b80 <HAL_GPIO_Init+0x350>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d101      	bne.n	8007a4a <HAL_GPIO_Init+0x21a>
 8007a46:	2309      	movs	r3, #9
 8007a48:	e012      	b.n	8007a70 <HAL_GPIO_Init+0x240>
 8007a4a:	230a      	movs	r3, #10
 8007a4c:	e010      	b.n	8007a70 <HAL_GPIO_Init+0x240>
 8007a4e:	2308      	movs	r3, #8
 8007a50:	e00e      	b.n	8007a70 <HAL_GPIO_Init+0x240>
 8007a52:	2307      	movs	r3, #7
 8007a54:	e00c      	b.n	8007a70 <HAL_GPIO_Init+0x240>
 8007a56:	2306      	movs	r3, #6
 8007a58:	e00a      	b.n	8007a70 <HAL_GPIO_Init+0x240>
 8007a5a:	2305      	movs	r3, #5
 8007a5c:	e008      	b.n	8007a70 <HAL_GPIO_Init+0x240>
 8007a5e:	2304      	movs	r3, #4
 8007a60:	e006      	b.n	8007a70 <HAL_GPIO_Init+0x240>
 8007a62:	2303      	movs	r3, #3
 8007a64:	e004      	b.n	8007a70 <HAL_GPIO_Init+0x240>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e002      	b.n	8007a70 <HAL_GPIO_Init+0x240>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <HAL_GPIO_Init+0x240>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	f002 0203 	and.w	r2, r2, #3
 8007a76:	0092      	lsls	r2, r2, #2
 8007a78:	4093      	lsls	r3, r2
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a80:	4935      	ldr	r1, [pc, #212]	; (8007b58 <HAL_GPIO_Init+0x328>)
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	089b      	lsrs	r3, r3, #2
 8007a86:	3302      	adds	r3, #2
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a8e:	4b3d      	ldr	r3, [pc, #244]	; (8007b84 <HAL_GPIO_Init+0x354>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	43db      	mvns	r3, r3
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007ab2:	4a34      	ldr	r2, [pc, #208]	; (8007b84 <HAL_GPIO_Init+0x354>)
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ab8:	4b32      	ldr	r3, [pc, #200]	; (8007b84 <HAL_GPIO_Init+0x354>)
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007adc:	4a29      	ldr	r2, [pc, #164]	; (8007b84 <HAL_GPIO_Init+0x354>)
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007ae2:	4b28      	ldr	r3, [pc, #160]	; (8007b84 <HAL_GPIO_Init+0x354>)
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	43db      	mvns	r3, r3
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	4013      	ands	r3, r2
 8007af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b06:	4a1f      	ldr	r2, [pc, #124]	; (8007b84 <HAL_GPIO_Init+0x354>)
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b0c:	4b1d      	ldr	r3, [pc, #116]	; (8007b84 <HAL_GPIO_Init+0x354>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	43db      	mvns	r3, r3
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b30:	4a14      	ldr	r2, [pc, #80]	; (8007b84 <HAL_GPIO_Init+0x354>)
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	61fb      	str	r3, [r7, #28]
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	2b0f      	cmp	r3, #15
 8007b40:	f67f ae84 	bls.w	800784c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	3724      	adds	r7, #36	; 0x24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	40023800 	.word	0x40023800
 8007b58:	40013800 	.word	0x40013800
 8007b5c:	40020000 	.word	0x40020000
 8007b60:	40020400 	.word	0x40020400
 8007b64:	40020800 	.word	0x40020800
 8007b68:	40020c00 	.word	0x40020c00
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	40021400 	.word	0x40021400
 8007b74:	40021800 	.word	0x40021800
 8007b78:	40021c00 	.word	0x40021c00
 8007b7c:	40022000 	.word	0x40022000
 8007b80:	40022400 	.word	0x40022400
 8007b84:	40013c00 	.word	0x40013c00

08007b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	887b      	ldrh	r3, [r7, #2]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	73fb      	strb	r3, [r7, #15]
 8007ba4:	e001      	b.n	8007baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	807b      	strh	r3, [r7, #2]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007bc8:	787b      	ldrb	r3, [r7, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bce:	887a      	ldrh	r2, [r7, #2]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007bd4:	e003      	b.n	8007bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007bd6:	887b      	ldrh	r3, [r7, #2]
 8007bd8:	041a      	lsls	r2, r3, #16
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	619a      	str	r2, [r3, #24]
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007bf6:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007bf8:	695a      	ldr	r2, [r3, #20]
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d006      	beq.n	8007c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c02:	4a05      	ldr	r2, [pc, #20]	; (8007c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c08:	88fb      	ldrh	r3, [r7, #6]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fc fa54 	bl	80040b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c10:	bf00      	nop
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40013c00 	.word	0x40013c00

08007c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e12b      	b.n	8007e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fd f9fc 	bl	8005040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2224      	movs	r2, #36	; 0x24
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0201 	bic.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007c80:	f000 ff18 	bl	8008ab4 <HAL_RCC_GetPCLK1Freq>
 8007c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	4a81      	ldr	r2, [pc, #516]	; (8007e90 <HAL_I2C_Init+0x274>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d807      	bhi.n	8007ca0 <HAL_I2C_Init+0x84>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a80      	ldr	r2, [pc, #512]	; (8007e94 <HAL_I2C_Init+0x278>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	bf94      	ite	ls
 8007c98:	2301      	movls	r3, #1
 8007c9a:	2300      	movhi	r3, #0
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	e006      	b.n	8007cae <HAL_I2C_Init+0x92>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4a7d      	ldr	r2, [pc, #500]	; (8007e98 <HAL_I2C_Init+0x27c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	bf94      	ite	ls
 8007ca8:	2301      	movls	r3, #1
 8007caa:	2300      	movhi	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e0e7      	b.n	8007e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4a78      	ldr	r2, [pc, #480]	; (8007e9c <HAL_I2C_Init+0x280>)
 8007cba:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbe:	0c9b      	lsrs	r3, r3, #18
 8007cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	4a6a      	ldr	r2, [pc, #424]	; (8007e90 <HAL_I2C_Init+0x274>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d802      	bhi.n	8007cf0 <HAL_I2C_Init+0xd4>
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	3301      	adds	r3, #1
 8007cee:	e009      	b.n	8007d04 <HAL_I2C_Init+0xe8>
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007cf6:	fb02 f303 	mul.w	r3, r2, r3
 8007cfa:	4a69      	ldr	r2, [pc, #420]	; (8007ea0 <HAL_I2C_Init+0x284>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	099b      	lsrs	r3, r3, #6
 8007d02:	3301      	adds	r3, #1
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6812      	ldr	r2, [r2, #0]
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	495c      	ldr	r1, [pc, #368]	; (8007e90 <HAL_I2C_Init+0x274>)
 8007d20:	428b      	cmp	r3, r1
 8007d22:	d819      	bhi.n	8007d58 <HAL_I2C_Init+0x13c>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	1e59      	subs	r1, r3, #1
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d32:	1c59      	adds	r1, r3, #1
 8007d34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d38:	400b      	ands	r3, r1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <HAL_I2C_Init+0x138>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1e59      	subs	r1, r3, #1
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	005b      	lsls	r3, r3, #1
 8007d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d52:	e051      	b.n	8007df8 <HAL_I2C_Init+0x1dc>
 8007d54:	2304      	movs	r3, #4
 8007d56:	e04f      	b.n	8007df8 <HAL_I2C_Init+0x1dc>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d111      	bne.n	8007d84 <HAL_I2C_Init+0x168>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	1e58      	subs	r0, r3, #1
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6859      	ldr	r1, [r3, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	440b      	add	r3, r1
 8007d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d72:	3301      	adds	r3, #1
 8007d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	bf0c      	ite	eq
 8007d7c:	2301      	moveq	r3, #1
 8007d7e:	2300      	movne	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	e012      	b.n	8007daa <HAL_I2C_Init+0x18e>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	1e58      	subs	r0, r3, #1
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6859      	ldr	r1, [r3, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	0099      	lsls	r1, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	bf0c      	ite	eq
 8007da4:	2301      	moveq	r3, #1
 8007da6:	2300      	movne	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <HAL_I2C_Init+0x196>
 8007dae:	2301      	movs	r3, #1
 8007db0:	e022      	b.n	8007df8 <HAL_I2C_Init+0x1dc>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10e      	bne.n	8007dd8 <HAL_I2C_Init+0x1bc>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	1e58      	subs	r0, r3, #1
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6859      	ldr	r1, [r3, #4]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	440b      	add	r3, r1
 8007dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dcc:	3301      	adds	r3, #1
 8007dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd6:	e00f      	b.n	8007df8 <HAL_I2C_Init+0x1dc>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	1e58      	subs	r0, r3, #1
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6859      	ldr	r1, [r3, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	440b      	add	r3, r1
 8007de6:	0099      	lsls	r1, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dee:	3301      	adds	r3, #1
 8007df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	6809      	ldr	r1, [r1, #0]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	69da      	ldr	r2, [r3, #28]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6911      	ldr	r1, [r2, #16]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	68d2      	ldr	r2, [r2, #12]
 8007e32:	4311      	orrs	r1, r2
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6812      	ldr	r2, [r2, #0]
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	695a      	ldr	r2, [r3, #20]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	000186a0 	.word	0x000186a0
 8007e94:	001e847f 	.word	0x001e847f
 8007e98:	003d08ff 	.word	0x003d08ff
 8007e9c:	431bde83 	.word	0x431bde83
 8007ea0:	10624dd3 	.word	0x10624dd3

08007ea4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b20      	cmp	r3, #32
 8007eb8:	d129      	bne.n	8007f0e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2224      	movs	r2, #36	; 0x24
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0201 	bic.w	r2, r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0210 	bic.w	r2, r2, #16
 8007ee0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f042 0201 	orr.w	r2, r2, #1
 8007f00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e000      	b.n	8007f10 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
  }
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d12a      	bne.n	8007f8c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2224      	movs	r2, #36	; 0x24
 8007f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0201 	bic.w	r2, r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007f56:	89fb      	ldrh	r3, [r7, #14]
 8007f58:	f023 030f 	bic.w	r3, r3, #15
 8007f5c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	89fb      	ldrh	r3, [r7, #14]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	89fa      	ldrh	r2, [r7, #14]
 8007f6e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0201 	orr.w	r2, r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	e000      	b.n	8007f8e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007f8c:	2302      	movs	r3, #2
  }
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f9c:	b08f      	sub	sp, #60	; 0x3c
 8007f9e:	af0a      	add	r7, sp, #40	; 0x28
 8007fa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e10f      	b.n	80081cc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7fd fa8c 	bl	80054e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2203      	movs	r2, #3
 8007fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f003 fe09 	bl	800bc02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	603b      	str	r3, [r7, #0]
 8007ff6:	687e      	ldr	r6, [r7, #4]
 8007ff8:	466d      	mov	r5, sp
 8007ffa:	f106 0410 	add.w	r4, r6, #16
 8007ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800800a:	e885 0003 	stmia.w	r5, {r0, r1}
 800800e:	1d33      	adds	r3, r6, #4
 8008010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008012:	6838      	ldr	r0, [r7, #0]
 8008014:	f003 fd94 	bl	800bb40 <USB_CoreInit>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e0d0      	b.n	80081cc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2100      	movs	r1, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f003 fdf7 	bl	800bc24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008036:	2300      	movs	r3, #0
 8008038:	73fb      	strb	r3, [r7, #15]
 800803a:	e04a      	b.n	80080d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800803c:	7bfa      	ldrb	r2, [r7, #15]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	333d      	adds	r3, #61	; 0x3d
 800804c:	2201      	movs	r2, #1
 800804e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008050:	7bfa      	ldrb	r2, [r7, #15]
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	4613      	mov	r3, r2
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	440b      	add	r3, r1
 800805e:	333c      	adds	r3, #60	; 0x3c
 8008060:	7bfa      	ldrb	r2, [r7, #15]
 8008062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008064:	7bfa      	ldrb	r2, [r7, #15]
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	b298      	uxth	r0, r3
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	4613      	mov	r3, r2
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	3344      	adds	r3, #68	; 0x44
 8008078:	4602      	mov	r2, r0
 800807a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800807c:	7bfa      	ldrb	r2, [r7, #15]
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	3340      	adds	r3, #64	; 0x40
 800808c:	2200      	movs	r2, #0
 800808e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008090:	7bfa      	ldrb	r2, [r7, #15]
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4613      	mov	r3, r2
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	3348      	adds	r3, #72	; 0x48
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80080a4:	7bfa      	ldrb	r2, [r7, #15]
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4613      	mov	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	334c      	adds	r3, #76	; 0x4c
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80080b8:	7bfa      	ldrb	r2, [r7, #15]
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	4613      	mov	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	3354      	adds	r3, #84	; 0x54
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	3301      	adds	r3, #1
 80080d0:	73fb      	strb	r3, [r7, #15]
 80080d2:	7bfa      	ldrb	r2, [r7, #15]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d3af      	bcc.n	800803c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
 80080e0:	e044      	b.n	800816c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80080e2:	7bfa      	ldrb	r2, [r7, #15]
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80080f4:	2200      	movs	r2, #0
 80080f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80080f8:	7bfa      	ldrb	r2, [r7, #15]
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4613      	mov	r3, r2
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800810a:	7bfa      	ldrb	r2, [r7, #15]
 800810c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800810e:	7bfa      	ldrb	r2, [r7, #15]
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	4613      	mov	r3, r2
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	4413      	add	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	440b      	add	r3, r1
 800811c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008120:	2200      	movs	r2, #0
 8008122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008124:	7bfa      	ldrb	r2, [r7, #15]
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	4613      	mov	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	440b      	add	r3, r1
 8008132:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800813a:	7bfa      	ldrb	r2, [r7, #15]
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4613      	mov	r3, r2
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008150:	7bfa      	ldrb	r2, [r7, #15]
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4613      	mov	r3, r2
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	3301      	adds	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]
 800816c:	7bfa      	ldrb	r2, [r7, #15]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d3b5      	bcc.n	80080e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	687e      	ldr	r6, [r7, #4]
 800817e:	466d      	mov	r5, sp
 8008180:	f106 0410 	add.w	r4, r6, #16
 8008184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800818a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800818c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008190:	e885 0003 	stmia.w	r5, {r0, r1}
 8008194:	1d33      	adds	r3, r6, #4
 8008196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008198:	6838      	ldr	r0, [r7, #0]
 800819a:	f003 fd8f 	bl	800bcbc <USB_DevInit>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e00d      	b.n	80081cc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f003 ff5a 	bl	800c07e <USB_DevDisconnect>

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e267      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d075      	beq.n	80082de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80081f2:	4b88      	ldr	r3, [pc, #544]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f003 030c 	and.w	r3, r3, #12
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d00c      	beq.n	8008218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081fe:	4b85      	ldr	r3, [pc, #532]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008206:	2b08      	cmp	r3, #8
 8008208:	d112      	bne.n	8008230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800820a:	4b82      	ldr	r3, [pc, #520]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008216:	d10b      	bne.n	8008230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008218:	4b7e      	ldr	r3, [pc, #504]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d05b      	beq.n	80082dc <HAL_RCC_OscConfig+0x108>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d157      	bne.n	80082dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e242      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008238:	d106      	bne.n	8008248 <HAL_RCC_OscConfig+0x74>
 800823a:	4b76      	ldr	r3, [pc, #472]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a75      	ldr	r2, [pc, #468]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	e01d      	b.n	8008284 <HAL_RCC_OscConfig+0xb0>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008250:	d10c      	bne.n	800826c <HAL_RCC_OscConfig+0x98>
 8008252:	4b70      	ldr	r3, [pc, #448]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a6f      	ldr	r2, [pc, #444]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	4b6d      	ldr	r3, [pc, #436]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a6c      	ldr	r2, [pc, #432]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	e00b      	b.n	8008284 <HAL_RCC_OscConfig+0xb0>
 800826c:	4b69      	ldr	r3, [pc, #420]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a68      	ldr	r2, [pc, #416]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	4b66      	ldr	r3, [pc, #408]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a65      	ldr	r2, [pc, #404]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 800827e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d013      	beq.n	80082b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800828c:	f7fd fe42 	bl	8005f14 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008294:	f7fd fe3e 	bl	8005f14 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b64      	cmp	r3, #100	; 0x64
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e207      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082a6:	4b5b      	ldr	r3, [pc, #364]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0f0      	beq.n	8008294 <HAL_RCC_OscConfig+0xc0>
 80082b2:	e014      	b.n	80082de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b4:	f7fd fe2e 	bl	8005f14 <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082bc:	f7fd fe2a 	bl	8005f14 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b64      	cmp	r3, #100	; 0x64
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e1f3      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ce:	4b51      	ldr	r3, [pc, #324]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1f0      	bne.n	80082bc <HAL_RCC_OscConfig+0xe8>
 80082da:	e000      	b.n	80082de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d063      	beq.n	80083b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80082ea:	4b4a      	ldr	r3, [pc, #296]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 030c 	and.w	r3, r3, #12
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00b      	beq.n	800830e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082f6:	4b47      	ldr	r3, [pc, #284]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80082fe:	2b08      	cmp	r3, #8
 8008300:	d11c      	bne.n	800833c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008302:	4b44      	ldr	r3, [pc, #272]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d116      	bne.n	800833c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800830e:	4b41      	ldr	r3, [pc, #260]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <HAL_RCC_OscConfig+0x152>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d001      	beq.n	8008326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e1c7      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008326:	4b3b      	ldr	r3, [pc, #236]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	4937      	ldr	r1, [pc, #220]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008336:	4313      	orrs	r3, r2
 8008338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800833a:	e03a      	b.n	80083b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d020      	beq.n	8008386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008344:	4b34      	ldr	r3, [pc, #208]	; (8008418 <HAL_RCC_OscConfig+0x244>)
 8008346:	2201      	movs	r2, #1
 8008348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834a:	f7fd fde3 	bl	8005f14 <HAL_GetTick>
 800834e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008350:	e008      	b.n	8008364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008352:	f7fd fddf 	bl	8005f14 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d901      	bls.n	8008364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e1a8      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008364:	4b2b      	ldr	r3, [pc, #172]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0f0      	beq.n	8008352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008370:	4b28      	ldr	r3, [pc, #160]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	4925      	ldr	r1, [pc, #148]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 8008380:	4313      	orrs	r3, r2
 8008382:	600b      	str	r3, [r1, #0]
 8008384:	e015      	b.n	80083b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008386:	4b24      	ldr	r3, [pc, #144]	; (8008418 <HAL_RCC_OscConfig+0x244>)
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838c:	f7fd fdc2 	bl	8005f14 <HAL_GetTick>
 8008390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008394:	f7fd fdbe 	bl	8005f14 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e187      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083a6:	4b1b      	ldr	r3, [pc, #108]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f0      	bne.n	8008394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0308 	and.w	r3, r3, #8
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d036      	beq.n	800842c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d016      	beq.n	80083f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083c6:	4b15      	ldr	r3, [pc, #84]	; (800841c <HAL_RCC_OscConfig+0x248>)
 80083c8:	2201      	movs	r2, #1
 80083ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083cc:	f7fd fda2 	bl	8005f14 <HAL_GetTick>
 80083d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083d2:	e008      	b.n	80083e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083d4:	f7fd fd9e 	bl	8005f14 <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e167      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083e6:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <HAL_RCC_OscConfig+0x240>)
 80083e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d0f0      	beq.n	80083d4 <HAL_RCC_OscConfig+0x200>
 80083f2:	e01b      	b.n	800842c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083f4:	4b09      	ldr	r3, [pc, #36]	; (800841c <HAL_RCC_OscConfig+0x248>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083fa:	f7fd fd8b 	bl	8005f14 <HAL_GetTick>
 80083fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008400:	e00e      	b.n	8008420 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008402:	f7fd fd87 	bl	8005f14 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d907      	bls.n	8008420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e150      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
 8008414:	40023800 	.word	0x40023800
 8008418:	42470000 	.word	0x42470000
 800841c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008420:	4b88      	ldr	r3, [pc, #544]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1ea      	bne.n	8008402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8097 	beq.w	8008568 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800843a:	2300      	movs	r3, #0
 800843c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800843e:	4b81      	ldr	r3, [pc, #516]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10f      	bne.n	800846a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800844a:	2300      	movs	r3, #0
 800844c:	60bb      	str	r3, [r7, #8]
 800844e:	4b7d      	ldr	r3, [pc, #500]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	4a7c      	ldr	r2, [pc, #496]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008458:	6413      	str	r3, [r2, #64]	; 0x40
 800845a:	4b7a      	ldr	r3, [pc, #488]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008462:	60bb      	str	r3, [r7, #8]
 8008464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008466:	2301      	movs	r3, #1
 8008468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800846a:	4b77      	ldr	r3, [pc, #476]	; (8008648 <HAL_RCC_OscConfig+0x474>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008472:	2b00      	cmp	r3, #0
 8008474:	d118      	bne.n	80084a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008476:	4b74      	ldr	r3, [pc, #464]	; (8008648 <HAL_RCC_OscConfig+0x474>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a73      	ldr	r2, [pc, #460]	; (8008648 <HAL_RCC_OscConfig+0x474>)
 800847c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008482:	f7fd fd47 	bl	8005f14 <HAL_GetTick>
 8008486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008488:	e008      	b.n	800849c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800848a:	f7fd fd43 	bl	8005f14 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	d901      	bls.n	800849c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e10c      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800849c:	4b6a      	ldr	r3, [pc, #424]	; (8008648 <HAL_RCC_OscConfig+0x474>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0f0      	beq.n	800848a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d106      	bne.n	80084be <HAL_RCC_OscConfig+0x2ea>
 80084b0:	4b64      	ldr	r3, [pc, #400]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b4:	4a63      	ldr	r2, [pc, #396]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084b6:	f043 0301 	orr.w	r3, r3, #1
 80084ba:	6713      	str	r3, [r2, #112]	; 0x70
 80084bc:	e01c      	b.n	80084f8 <HAL_RCC_OscConfig+0x324>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	d10c      	bne.n	80084e0 <HAL_RCC_OscConfig+0x30c>
 80084c6:	4b5f      	ldr	r3, [pc, #380]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ca:	4a5e      	ldr	r2, [pc, #376]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084cc:	f043 0304 	orr.w	r3, r3, #4
 80084d0:	6713      	str	r3, [r2, #112]	; 0x70
 80084d2:	4b5c      	ldr	r3, [pc, #368]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d6:	4a5b      	ldr	r2, [pc, #364]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084d8:	f043 0301 	orr.w	r3, r3, #1
 80084dc:	6713      	str	r3, [r2, #112]	; 0x70
 80084de:	e00b      	b.n	80084f8 <HAL_RCC_OscConfig+0x324>
 80084e0:	4b58      	ldr	r3, [pc, #352]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e4:	4a57      	ldr	r2, [pc, #348]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084e6:	f023 0301 	bic.w	r3, r3, #1
 80084ea:	6713      	str	r3, [r2, #112]	; 0x70
 80084ec:	4b55      	ldr	r3, [pc, #340]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f0:	4a54      	ldr	r2, [pc, #336]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80084f2:	f023 0304 	bic.w	r3, r3, #4
 80084f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d015      	beq.n	800852c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008500:	f7fd fd08 	bl	8005f14 <HAL_GetTick>
 8008504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008506:	e00a      	b.n	800851e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008508:	f7fd fd04 	bl	8005f14 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	f241 3288 	movw	r2, #5000	; 0x1388
 8008516:	4293      	cmp	r3, r2
 8008518:	d901      	bls.n	800851e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e0cb      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800851e:	4b49      	ldr	r3, [pc, #292]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0ee      	beq.n	8008508 <HAL_RCC_OscConfig+0x334>
 800852a:	e014      	b.n	8008556 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800852c:	f7fd fcf2 	bl	8005f14 <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008532:	e00a      	b.n	800854a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008534:	f7fd fcee 	bl	8005f14 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008542:	4293      	cmp	r3, r2
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e0b5      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800854a:	4b3e      	ldr	r3, [pc, #248]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 800854c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1ee      	bne.n	8008534 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d105      	bne.n	8008568 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800855c:	4b39      	ldr	r3, [pc, #228]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	4a38      	ldr	r2, [pc, #224]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80a1 	beq.w	80086b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008572:	4b34      	ldr	r3, [pc, #208]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 030c 	and.w	r3, r3, #12
 800857a:	2b08      	cmp	r3, #8
 800857c:	d05c      	beq.n	8008638 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d141      	bne.n	800860a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008586:	4b31      	ldr	r3, [pc, #196]	; (800864c <HAL_RCC_OscConfig+0x478>)
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800858c:	f7fd fcc2 	bl	8005f14 <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008594:	f7fd fcbe 	bl	8005f14 <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e087      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085a6:	4b27      	ldr	r3, [pc, #156]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f0      	bne.n	8008594 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	69da      	ldr	r2, [r3, #28]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	431a      	orrs	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	019b      	lsls	r3, r3, #6
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	085b      	lsrs	r3, r3, #1
 80085ca:	3b01      	subs	r3, #1
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	061b      	lsls	r3, r3, #24
 80085d6:	491b      	ldr	r1, [pc, #108]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085dc:	4b1b      	ldr	r3, [pc, #108]	; (800864c <HAL_RCC_OscConfig+0x478>)
 80085de:	2201      	movs	r2, #1
 80085e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e2:	f7fd fc97 	bl	8005f14 <HAL_GetTick>
 80085e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085e8:	e008      	b.n	80085fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085ea:	f7fd fc93 	bl	8005f14 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e05c      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085fc:	4b11      	ldr	r3, [pc, #68]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0f0      	beq.n	80085ea <HAL_RCC_OscConfig+0x416>
 8008608:	e054      	b.n	80086b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800860a:	4b10      	ldr	r3, [pc, #64]	; (800864c <HAL_RCC_OscConfig+0x478>)
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008610:	f7fd fc80 	bl	8005f14 <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008618:	f7fd fc7c 	bl	8005f14 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b02      	cmp	r3, #2
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e045      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800862a:	4b06      	ldr	r3, [pc, #24]	; (8008644 <HAL_RCC_OscConfig+0x470>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f0      	bne.n	8008618 <HAL_RCC_OscConfig+0x444>
 8008636:	e03d      	b.n	80086b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d107      	bne.n	8008650 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e038      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
 8008644:	40023800 	.word	0x40023800
 8008648:	40007000 	.word	0x40007000
 800864c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008650:	4b1b      	ldr	r3, [pc, #108]	; (80086c0 <HAL_RCC_OscConfig+0x4ec>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d028      	beq.n	80086b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008668:	429a      	cmp	r2, r3
 800866a:	d121      	bne.n	80086b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008676:	429a      	cmp	r2, r3
 8008678:	d11a      	bne.n	80086b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008680:	4013      	ands	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008688:	4293      	cmp	r3, r2
 800868a:	d111      	bne.n	80086b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	085b      	lsrs	r3, r3, #1
 8008698:	3b01      	subs	r3, #1
 800869a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800869c:	429a      	cmp	r2, r3
 800869e:	d107      	bne.n	80086b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d001      	beq.n	80086b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e000      	b.n	80086b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	40023800 	.word	0x40023800

080086c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0cc      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086d8:	4b68      	ldr	r3, [pc, #416]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 030f 	and.w	r3, r3, #15
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d90c      	bls.n	8008700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086e6:	4b65      	ldr	r3, [pc, #404]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	b2d2      	uxtb	r2, r2
 80086ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ee:	4b63      	ldr	r3, [pc, #396]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 030f 	and.w	r3, r3, #15
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d001      	beq.n	8008700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e0b8      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d020      	beq.n	800874e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0304 	and.w	r3, r3, #4
 8008714:	2b00      	cmp	r3, #0
 8008716:	d005      	beq.n	8008724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008718:	4b59      	ldr	r3, [pc, #356]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	4a58      	ldr	r2, [pc, #352]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 800871e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0308 	and.w	r3, r3, #8
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008730:	4b53      	ldr	r3, [pc, #332]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	4a52      	ldr	r2, [pc, #328]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800873a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800873c:	4b50      	ldr	r3, [pc, #320]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	494d      	ldr	r1, [pc, #308]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 800874a:	4313      	orrs	r3, r2
 800874c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d044      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d107      	bne.n	8008772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008762:	4b47      	ldr	r3, [pc, #284]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d119      	bne.n	80087a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e07f      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d003      	beq.n	8008782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800877e:	2b03      	cmp	r3, #3
 8008780:	d107      	bne.n	8008792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008782:	4b3f      	ldr	r3, [pc, #252]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d109      	bne.n	80087a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e06f      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008792:	4b3b      	ldr	r3, [pc, #236]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e067      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087a2:	4b37      	ldr	r3, [pc, #220]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f023 0203 	bic.w	r2, r3, #3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	4934      	ldr	r1, [pc, #208]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087b4:	f7fd fbae 	bl	8005f14 <HAL_GetTick>
 80087b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ba:	e00a      	b.n	80087d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087bc:	f7fd fbaa 	bl	8005f14 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e04f      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087d2:	4b2b      	ldr	r3, [pc, #172]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f003 020c 	and.w	r2, r3, #12
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d1eb      	bne.n	80087bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087e4:	4b25      	ldr	r3, [pc, #148]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d20c      	bcs.n	800880c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087f2:	4b22      	ldr	r3, [pc, #136]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087fa:	4b20      	ldr	r3, [pc, #128]	; (800887c <HAL_RCC_ClockConfig+0x1b8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 030f 	and.w	r3, r3, #15
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d001      	beq.n	800880c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e032      	b.n	8008872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b00      	cmp	r3, #0
 8008816:	d008      	beq.n	800882a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008818:	4b19      	ldr	r3, [pc, #100]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	4916      	ldr	r1, [pc, #88]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008826:	4313      	orrs	r3, r2
 8008828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0308 	and.w	r3, r3, #8
 8008832:	2b00      	cmp	r3, #0
 8008834:	d009      	beq.n	800884a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008836:	4b12      	ldr	r3, [pc, #72]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	490e      	ldr	r1, [pc, #56]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008846:	4313      	orrs	r3, r2
 8008848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800884a:	f000 f821 	bl	8008890 <HAL_RCC_GetSysClockFreq>
 800884e:	4602      	mov	r2, r0
 8008850:	4b0b      	ldr	r3, [pc, #44]	; (8008880 <HAL_RCC_ClockConfig+0x1bc>)
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	091b      	lsrs	r3, r3, #4
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	490a      	ldr	r1, [pc, #40]	; (8008884 <HAL_RCC_ClockConfig+0x1c0>)
 800885c:	5ccb      	ldrb	r3, [r1, r3]
 800885e:	fa22 f303 	lsr.w	r3, r2, r3
 8008862:	4a09      	ldr	r2, [pc, #36]	; (8008888 <HAL_RCC_ClockConfig+0x1c4>)
 8008864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <HAL_RCC_ClockConfig+0x1c8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f7fd fb0e 	bl	8005e8c <HAL_InitTick>

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40023c00 	.word	0x40023c00
 8008880:	40023800 	.word	0x40023800
 8008884:	0800d458 	.word	0x0800d458
 8008888:	20000004 	.word	0x20000004
 800888c:	2000000c 	.word	0x2000000c

08008890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008894:	b094      	sub	sp, #80	; 0x50
 8008896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	647b      	str	r3, [r7, #68]	; 0x44
 800889c:	2300      	movs	r3, #0
 800889e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088a0:	2300      	movs	r3, #0
 80088a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80088a4:	2300      	movs	r3, #0
 80088a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088a8:	4b79      	ldr	r3, [pc, #484]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f003 030c 	and.w	r3, r3, #12
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d00d      	beq.n	80088d0 <HAL_RCC_GetSysClockFreq+0x40>
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	f200 80e1 	bhi.w	8008a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <HAL_RCC_GetSysClockFreq+0x34>
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d003      	beq.n	80088ca <HAL_RCC_GetSysClockFreq+0x3a>
 80088c2:	e0db      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088c4:	4b73      	ldr	r3, [pc, #460]	; (8008a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80088c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80088c8:	e0db      	b.n	8008a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80088ca:	4b73      	ldr	r3, [pc, #460]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x208>)
 80088cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088ce:	e0d8      	b.n	8008a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80088d0:	4b6f      	ldr	r3, [pc, #444]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088da:	4b6d      	ldr	r3, [pc, #436]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d063      	beq.n	80089ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088e6:	4b6a      	ldr	r3, [pc, #424]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	099b      	lsrs	r3, r3, #6
 80088ec:	2200      	movs	r2, #0
 80088ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80088f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f8:	633b      	str	r3, [r7, #48]	; 0x30
 80088fa:	2300      	movs	r3, #0
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
 80088fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008902:	4622      	mov	r2, r4
 8008904:	462b      	mov	r3, r5
 8008906:	f04f 0000 	mov.w	r0, #0
 800890a:	f04f 0100 	mov.w	r1, #0
 800890e:	0159      	lsls	r1, r3, #5
 8008910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008914:	0150      	lsls	r0, r2, #5
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4621      	mov	r1, r4
 800891c:	1a51      	subs	r1, r2, r1
 800891e:	6139      	str	r1, [r7, #16]
 8008920:	4629      	mov	r1, r5
 8008922:	eb63 0301 	sbc.w	r3, r3, r1
 8008926:	617b      	str	r3, [r7, #20]
 8008928:	f04f 0200 	mov.w	r2, #0
 800892c:	f04f 0300 	mov.w	r3, #0
 8008930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008934:	4659      	mov	r1, fp
 8008936:	018b      	lsls	r3, r1, #6
 8008938:	4651      	mov	r1, sl
 800893a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800893e:	4651      	mov	r1, sl
 8008940:	018a      	lsls	r2, r1, #6
 8008942:	4651      	mov	r1, sl
 8008944:	ebb2 0801 	subs.w	r8, r2, r1
 8008948:	4659      	mov	r1, fp
 800894a:	eb63 0901 	sbc.w	r9, r3, r1
 800894e:	f04f 0200 	mov.w	r2, #0
 8008952:	f04f 0300 	mov.w	r3, #0
 8008956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800895a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800895e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008962:	4690      	mov	r8, r2
 8008964:	4699      	mov	r9, r3
 8008966:	4623      	mov	r3, r4
 8008968:	eb18 0303 	adds.w	r3, r8, r3
 800896c:	60bb      	str	r3, [r7, #8]
 800896e:	462b      	mov	r3, r5
 8008970:	eb49 0303 	adc.w	r3, r9, r3
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	f04f 0200 	mov.w	r2, #0
 800897a:	f04f 0300 	mov.w	r3, #0
 800897e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008982:	4629      	mov	r1, r5
 8008984:	024b      	lsls	r3, r1, #9
 8008986:	4621      	mov	r1, r4
 8008988:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800898c:	4621      	mov	r1, r4
 800898e:	024a      	lsls	r2, r1, #9
 8008990:	4610      	mov	r0, r2
 8008992:	4619      	mov	r1, r3
 8008994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008996:	2200      	movs	r2, #0
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
 800899a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800899c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089a0:	f7f8 f8d4 	bl	8000b4c <__aeabi_uldivmod>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4613      	mov	r3, r2
 80089aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089ac:	e058      	b.n	8008a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ae:	4b38      	ldr	r3, [pc, #224]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	099b      	lsrs	r3, r3, #6
 80089b4:	2200      	movs	r2, #0
 80089b6:	4618      	mov	r0, r3
 80089b8:	4611      	mov	r1, r2
 80089ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80089be:	623b      	str	r3, [r7, #32]
 80089c0:	2300      	movs	r3, #0
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
 80089c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80089c8:	4642      	mov	r2, r8
 80089ca:	464b      	mov	r3, r9
 80089cc:	f04f 0000 	mov.w	r0, #0
 80089d0:	f04f 0100 	mov.w	r1, #0
 80089d4:	0159      	lsls	r1, r3, #5
 80089d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089da:	0150      	lsls	r0, r2, #5
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4641      	mov	r1, r8
 80089e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80089e6:	4649      	mov	r1, r9
 80089e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	f04f 0300 	mov.w	r3, #0
 80089f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80089f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80089fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008a00:	ebb2 040a 	subs.w	r4, r2, sl
 8008a04:	eb63 050b 	sbc.w	r5, r3, fp
 8008a08:	f04f 0200 	mov.w	r2, #0
 8008a0c:	f04f 0300 	mov.w	r3, #0
 8008a10:	00eb      	lsls	r3, r5, #3
 8008a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a16:	00e2      	lsls	r2, r4, #3
 8008a18:	4614      	mov	r4, r2
 8008a1a:	461d      	mov	r5, r3
 8008a1c:	4643      	mov	r3, r8
 8008a1e:	18e3      	adds	r3, r4, r3
 8008a20:	603b      	str	r3, [r7, #0]
 8008a22:	464b      	mov	r3, r9
 8008a24:	eb45 0303 	adc.w	r3, r5, r3
 8008a28:	607b      	str	r3, [r7, #4]
 8008a2a:	f04f 0200 	mov.w	r2, #0
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a36:	4629      	mov	r1, r5
 8008a38:	028b      	lsls	r3, r1, #10
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a40:	4621      	mov	r1, r4
 8008a42:	028a      	lsls	r2, r1, #10
 8008a44:	4610      	mov	r0, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	61bb      	str	r3, [r7, #24]
 8008a4e:	61fa      	str	r2, [r7, #28]
 8008a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a54:	f7f8 f87a 	bl	8000b4c <__aeabi_uldivmod>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a60:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	0c1b      	lsrs	r3, r3, #16
 8008a66:	f003 0303 	and.w	r3, r3, #3
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a7a:	e002      	b.n	8008a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8008a7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3750      	adds	r7, #80	; 0x50
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a8e:	bf00      	nop
 8008a90:	40023800 	.word	0x40023800
 8008a94:	00f42400 	.word	0x00f42400
 8008a98:	007a1200 	.word	0x007a1200

08008a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008aa0:	4b03      	ldr	r3, [pc, #12]	; (8008ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	20000004 	.word	0x20000004

08008ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ab8:	f7ff fff0 	bl	8008a9c <HAL_RCC_GetHCLKFreq>
 8008abc:	4602      	mov	r2, r0
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	0a9b      	lsrs	r3, r3, #10
 8008ac4:	f003 0307 	and.w	r3, r3, #7
 8008ac8:	4903      	ldr	r1, [pc, #12]	; (8008ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008aca:	5ccb      	ldrb	r3, [r1, r3]
 8008acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40023800 	.word	0x40023800
 8008ad8:	0800d468 	.word	0x0800d468

08008adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ae0:	f7ff ffdc 	bl	8008a9c <HAL_RCC_GetHCLKFreq>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	4b05      	ldr	r3, [pc, #20]	; (8008afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	0b5b      	lsrs	r3, r3, #13
 8008aec:	f003 0307 	and.w	r3, r3, #7
 8008af0:	4903      	ldr	r1, [pc, #12]	; (8008b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008af2:	5ccb      	ldrb	r3, [r1, r3]
 8008af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	40023800 	.word	0x40023800
 8008b00:	0800d468 	.word	0x0800d468

08008b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e041      	b.n	8008b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d106      	bne.n	8008b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fc fb26 	bl	800517c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f001 f904 	bl	8009d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e041      	b.n	8008c38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d106      	bne.n	8008bce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7fc fa81 	bl	80050d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	4619      	mov	r1, r3
 8008be0:	4610      	mov	r0, r2
 8008be2:	f001 f8b5 	bl	8009d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d109      	bne.n	8008c6c <HAL_TIM_PWM_Start_DMA+0x2c>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	bf0c      	ite	eq
 8008c64:	2301      	moveq	r3, #1
 8008c66:	2300      	movne	r3, #0
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	e022      	b.n	8008cb2 <HAL_TIM_PWM_Start_DMA+0x72>
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d109      	bne.n	8008c86 <HAL_TIM_PWM_Start_DMA+0x46>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	bf0c      	ite	eq
 8008c7e:	2301      	moveq	r3, #1
 8008c80:	2300      	movne	r3, #0
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	e015      	b.n	8008cb2 <HAL_TIM_PWM_Start_DMA+0x72>
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d109      	bne.n	8008ca0 <HAL_TIM_PWM_Start_DMA+0x60>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	bf0c      	ite	eq
 8008c98:	2301      	moveq	r3, #1
 8008c9a:	2300      	movne	r3, #0
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	e008      	b.n	8008cb2 <HAL_TIM_PWM_Start_DMA+0x72>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	bf0c      	ite	eq
 8008cac:	2301      	moveq	r3, #1
 8008cae:	2300      	movne	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e171      	b.n	8008f9e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <HAL_TIM_PWM_Start_DMA+0x94>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	bf0c      	ite	eq
 8008ccc:	2301      	moveq	r3, #1
 8008cce:	2300      	movne	r3, #0
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	e022      	b.n	8008d1a <HAL_TIM_PWM_Start_DMA+0xda>
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d109      	bne.n	8008cee <HAL_TIM_PWM_Start_DMA+0xae>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	bf0c      	ite	eq
 8008ce6:	2301      	moveq	r3, #1
 8008ce8:	2300      	movne	r3, #0
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	e015      	b.n	8008d1a <HAL_TIM_PWM_Start_DMA+0xda>
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d109      	bne.n	8008d08 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	bf0c      	ite	eq
 8008d00:	2301      	moveq	r3, #1
 8008d02:	2300      	movne	r3, #0
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	e008      	b.n	8008d1a <HAL_TIM_PWM_Start_DMA+0xda>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	bf0c      	ite	eq
 8008d14:	2301      	moveq	r3, #1
 8008d16:	2300      	movne	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d024      	beq.n	8008d68 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <HAL_TIM_PWM_Start_DMA+0xee>
 8008d24:	887b      	ldrh	r3, [r7, #2]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e137      	b.n	8008f9e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d104      	bne.n	8008d3e <HAL_TIM_PWM_Start_DMA+0xfe>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d3c:	e016      	b.n	8008d6c <HAL_TIM_PWM_Start_DMA+0x12c>
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b04      	cmp	r3, #4
 8008d42:	d104      	bne.n	8008d4e <HAL_TIM_PWM_Start_DMA+0x10e>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d4c:	e00e      	b.n	8008d6c <HAL_TIM_PWM_Start_DMA+0x12c>
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	d104      	bne.n	8008d5e <HAL_TIM_PWM_Start_DMA+0x11e>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d5c:	e006      	b.n	8008d6c <HAL_TIM_PWM_Start_DMA+0x12c>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2202      	movs	r2, #2
 8008d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d66:	e001      	b.n	8008d6c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e118      	b.n	8008f9e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b0c      	cmp	r3, #12
 8008d70:	f200 80ae 	bhi.w	8008ed0 <HAL_TIM_PWM_Start_DMA+0x290>
 8008d74:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008db1 	.word	0x08008db1
 8008d80:	08008ed1 	.word	0x08008ed1
 8008d84:	08008ed1 	.word	0x08008ed1
 8008d88:	08008ed1 	.word	0x08008ed1
 8008d8c:	08008df9 	.word	0x08008df9
 8008d90:	08008ed1 	.word	0x08008ed1
 8008d94:	08008ed1 	.word	0x08008ed1
 8008d98:	08008ed1 	.word	0x08008ed1
 8008d9c:	08008e41 	.word	0x08008e41
 8008da0:	08008ed1 	.word	0x08008ed1
 8008da4:	08008ed1 	.word	0x08008ed1
 8008da8:	08008ed1 	.word	0x08008ed1
 8008dac:	08008e89 	.word	0x08008e89
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	4a7c      	ldr	r2, [pc, #496]	; (8008fa8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008db6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	4a7b      	ldr	r2, [pc, #492]	; (8008fac <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008dbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	4a7a      	ldr	r2, [pc, #488]	; (8008fb0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008dc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3334      	adds	r3, #52	; 0x34
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	887b      	ldrh	r3, [r7, #2]
 8008dd8:	f7fd feae 	bl	8006b38 <HAL_DMA_Start_IT>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e0db      	b.n	8008f9e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008df4:	60da      	str	r2, [r3, #12]
      break;
 8008df6:	e06e      	b.n	8008ed6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	4a6a      	ldr	r2, [pc, #424]	; (8008fa8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008dfe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	4a69      	ldr	r2, [pc, #420]	; (8008fac <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008e06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0c:	4a68      	ldr	r2, [pc, #416]	; (8008fb0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008e0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3338      	adds	r3, #56	; 0x38
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	887b      	ldrh	r3, [r7, #2]
 8008e20:	f7fd fe8a 	bl	8006b38 <HAL_DMA_Start_IT>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e0b7      	b.n	8008f9e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68da      	ldr	r2, [r3, #12]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e3c:	60da      	str	r2, [r3, #12]
      break;
 8008e3e:	e04a      	b.n	8008ed6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	4a58      	ldr	r2, [pc, #352]	; (8008fa8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008e46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	4a57      	ldr	r2, [pc, #348]	; (8008fac <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e54:	4a56      	ldr	r2, [pc, #344]	; (8008fb0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008e56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	333c      	adds	r3, #60	; 0x3c
 8008e64:	461a      	mov	r2, r3
 8008e66:	887b      	ldrh	r3, [r7, #2]
 8008e68:	f7fd fe66 	bl	8006b38 <HAL_DMA_Start_IT>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e093      	b.n	8008f9e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e84:	60da      	str	r2, [r3, #12]
      break;
 8008e86:	e026      	b.n	8008ed6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8c:	4a46      	ldr	r2, [pc, #280]	; (8008fa8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008e8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e94:	4a45      	ldr	r2, [pc, #276]	; (8008fac <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9c:	4a44      	ldr	r2, [pc, #272]	; (8008fb0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008e9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3340      	adds	r3, #64	; 0x40
 8008eac:	461a      	mov	r2, r3
 8008eae:	887b      	ldrh	r3, [r7, #2]
 8008eb0:	f7fd fe42 	bl	8006b38 <HAL_DMA_Start_IT>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e06f      	b.n	8008f9e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ecc:	60da      	str	r2, [r3, #12]
      break;
 8008ece:	e002      	b.n	8008ed6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed4:	bf00      	nop
  }

  if (status == HAL_OK)
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d15f      	bne.n	8008f9c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f001 fb47 	bl	800a578 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a31      	ldr	r2, [pc, #196]	; (8008fb4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d004      	beq.n	8008efe <HAL_TIM_PWM_Start_DMA+0x2be>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a2f      	ldr	r2, [pc, #188]	; (8008fb8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d101      	bne.n	8008f02 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d007      	beq.n	8008f18 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a25      	ldr	r2, [pc, #148]	; (8008fb4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d022      	beq.n	8008f68 <HAL_TIM_PWM_Start_DMA+0x328>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f2a:	d01d      	beq.n	8008f68 <HAL_TIM_PWM_Start_DMA+0x328>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a22      	ldr	r2, [pc, #136]	; (8008fbc <HAL_TIM_PWM_Start_DMA+0x37c>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d018      	beq.n	8008f68 <HAL_TIM_PWM_Start_DMA+0x328>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a21      	ldr	r2, [pc, #132]	; (8008fc0 <HAL_TIM_PWM_Start_DMA+0x380>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d013      	beq.n	8008f68 <HAL_TIM_PWM_Start_DMA+0x328>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a1f      	ldr	r2, [pc, #124]	; (8008fc4 <HAL_TIM_PWM_Start_DMA+0x384>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d00e      	beq.n	8008f68 <HAL_TIM_PWM_Start_DMA+0x328>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a1a      	ldr	r2, [pc, #104]	; (8008fb8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d009      	beq.n	8008f68 <HAL_TIM_PWM_Start_DMA+0x328>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a1b      	ldr	r2, [pc, #108]	; (8008fc8 <HAL_TIM_PWM_Start_DMA+0x388>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d004      	beq.n	8008f68 <HAL_TIM_PWM_Start_DMA+0x328>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a1a      	ldr	r2, [pc, #104]	; (8008fcc <HAL_TIM_PWM_Start_DMA+0x38c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d111      	bne.n	8008f8c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 0307 	and.w	r3, r3, #7
 8008f72:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2b06      	cmp	r3, #6
 8008f78:	d010      	beq.n	8008f9c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f042 0201 	orr.w	r2, r2, #1
 8008f88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f8a:	e007      	b.n	8008f9c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0201 	orr.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	08009c3f 	.word	0x08009c3f
 8008fac:	08009ce7 	.word	0x08009ce7
 8008fb0:	08009bad 	.word	0x08009bad
 8008fb4:	40010000 	.word	0x40010000
 8008fb8:	40010400 	.word	0x40010400
 8008fbc:	40000400 	.word	0x40000400
 8008fc0:	40000800 	.word	0x40000800
 8008fc4:	40000c00 	.word	0x40000c00
 8008fc8:	40014000 	.word	0x40014000
 8008fcc:	40001800 	.word	0x40001800

08008fd0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b0c      	cmp	r3, #12
 8008fe2:	d855      	bhi.n	8009090 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008fe4:	a201      	add	r2, pc, #4	; (adr r2, 8008fec <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08009021 	.word	0x08009021
 8008ff0:	08009091 	.word	0x08009091
 8008ff4:	08009091 	.word	0x08009091
 8008ff8:	08009091 	.word	0x08009091
 8008ffc:	0800903d 	.word	0x0800903d
 8009000:	08009091 	.word	0x08009091
 8009004:	08009091 	.word	0x08009091
 8009008:	08009091 	.word	0x08009091
 800900c:	08009059 	.word	0x08009059
 8009010:	08009091 	.word	0x08009091
 8009014:	08009091 	.word	0x08009091
 8009018:	08009091 	.word	0x08009091
 800901c:	08009075 	.word	0x08009075
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800902e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	4618      	mov	r0, r3
 8009036:	f7fd fe47 	bl	8006cc8 <HAL_DMA_Abort_IT>
      break;
 800903a:	e02c      	b.n	8009096 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800904a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	4618      	mov	r0, r3
 8009052:	f7fd fe39 	bl	8006cc8 <HAL_DMA_Abort_IT>
      break;
 8009056:	e01e      	b.n	8009096 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009066:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	4618      	mov	r0, r3
 800906e:	f7fd fe2b 	bl	8006cc8 <HAL_DMA_Abort_IT>
      break;
 8009072:	e010      	b.n	8009096 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009082:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009088:	4618      	mov	r0, r3
 800908a:	f7fd fe1d 	bl	8006cc8 <HAL_DMA_Abort_IT>
      break;
 800908e:	e002      	b.n	8009096 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]
      break;
 8009094:	bf00      	nop
  }

  if (status == HAL_OK)
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d161      	bne.n	8009160 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2200      	movs	r2, #0
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 fa67 	bl	800a578 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a2f      	ldr	r2, [pc, #188]	; (800916c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d004      	beq.n	80090be <HAL_TIM_PWM_Stop_DMA+0xee>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a2d      	ldr	r2, [pc, #180]	; (8009170 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d101      	bne.n	80090c2 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80090c2:	2300      	movs	r3, #0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d017      	beq.n	80090f8 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6a1a      	ldr	r2, [r3, #32]
 80090ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80090d2:	4013      	ands	r3, r2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10f      	bne.n	80090f8 <HAL_TIM_PWM_Stop_DMA+0x128>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6a1a      	ldr	r2, [r3, #32]
 80090de:	f240 4344 	movw	r3, #1092	; 0x444
 80090e2:	4013      	ands	r3, r2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d107      	bne.n	80090f8 <HAL_TIM_PWM_Stop_DMA+0x128>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6a1a      	ldr	r2, [r3, #32]
 80090fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8009102:	4013      	ands	r3, r2
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10f      	bne.n	8009128 <HAL_TIM_PWM_Stop_DMA+0x158>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6a1a      	ldr	r2, [r3, #32]
 800910e:	f240 4344 	movw	r3, #1092	; 0x444
 8009112:	4013      	ands	r3, r2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d107      	bne.n	8009128 <HAL_TIM_PWM_Stop_DMA+0x158>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d104      	bne.n	8009138 <HAL_TIM_PWM_Stop_DMA+0x168>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009136:	e013      	b.n	8009160 <HAL_TIM_PWM_Stop_DMA+0x190>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b04      	cmp	r3, #4
 800913c:	d104      	bne.n	8009148 <HAL_TIM_PWM_Stop_DMA+0x178>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009146:	e00b      	b.n	8009160 <HAL_TIM_PWM_Stop_DMA+0x190>
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2b08      	cmp	r3, #8
 800914c:	d104      	bne.n	8009158 <HAL_TIM_PWM_Stop_DMA+0x188>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009156:	e003      	b.n	8009160 <HAL_TIM_PWM_Stop_DMA+0x190>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	40010000 	.word	0x40010000
 8009170:	40010400 	.word	0x40010400

08009174 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e041      	b.n	800920a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d106      	bne.n	80091a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f839 	bl	8009212 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3304      	adds	r3, #4
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f000 fdcc 	bl	8009d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800921a:	bf00      	nop
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
	...

08009228 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <HAL_TIM_IC_Start_IT+0x1e>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009242:	b2db      	uxtb	r3, r3
 8009244:	e013      	b.n	800926e <HAL_TIM_IC_Start_IT+0x46>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b04      	cmp	r3, #4
 800924a:	d104      	bne.n	8009256 <HAL_TIM_IC_Start_IT+0x2e>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009252:	b2db      	uxtb	r3, r3
 8009254:	e00b      	b.n	800926e <HAL_TIM_IC_Start_IT+0x46>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b08      	cmp	r3, #8
 800925a:	d104      	bne.n	8009266 <HAL_TIM_IC_Start_IT+0x3e>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009262:	b2db      	uxtb	r3, r3
 8009264:	e003      	b.n	800926e <HAL_TIM_IC_Start_IT+0x46>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800926c:	b2db      	uxtb	r3, r3
 800926e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d104      	bne.n	8009280 <HAL_TIM_IC_Start_IT+0x58>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800927c:	b2db      	uxtb	r3, r3
 800927e:	e013      	b.n	80092a8 <HAL_TIM_IC_Start_IT+0x80>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b04      	cmp	r3, #4
 8009284:	d104      	bne.n	8009290 <HAL_TIM_IC_Start_IT+0x68>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800928c:	b2db      	uxtb	r3, r3
 800928e:	e00b      	b.n	80092a8 <HAL_TIM_IC_Start_IT+0x80>
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2b08      	cmp	r3, #8
 8009294:	d104      	bne.n	80092a0 <HAL_TIM_IC_Start_IT+0x78>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800929c:	b2db      	uxtb	r3, r3
 800929e:	e003      	b.n	80092a8 <HAL_TIM_IC_Start_IT+0x80>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d102      	bne.n	80092b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80092b0:	7b7b      	ldrb	r3, [r7, #13]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d001      	beq.n	80092ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e0cc      	b.n	8009454 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d104      	bne.n	80092ca <HAL_TIM_IC_Start_IT+0xa2>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c8:	e013      	b.n	80092f2 <HAL_TIM_IC_Start_IT+0xca>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d104      	bne.n	80092da <HAL_TIM_IC_Start_IT+0xb2>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092d8:	e00b      	b.n	80092f2 <HAL_TIM_IC_Start_IT+0xca>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b08      	cmp	r3, #8
 80092de:	d104      	bne.n	80092ea <HAL_TIM_IC_Start_IT+0xc2>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092e8:	e003      	b.n	80092f2 <HAL_TIM_IC_Start_IT+0xca>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2202      	movs	r2, #2
 80092ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d104      	bne.n	8009302 <HAL_TIM_IC_Start_IT+0xda>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009300:	e013      	b.n	800932a <HAL_TIM_IC_Start_IT+0x102>
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b04      	cmp	r3, #4
 8009306:	d104      	bne.n	8009312 <HAL_TIM_IC_Start_IT+0xea>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2202      	movs	r2, #2
 800930c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009310:	e00b      	b.n	800932a <HAL_TIM_IC_Start_IT+0x102>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b08      	cmp	r3, #8
 8009316:	d104      	bne.n	8009322 <HAL_TIM_IC_Start_IT+0xfa>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009320:	e003      	b.n	800932a <HAL_TIM_IC_Start_IT+0x102>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2202      	movs	r2, #2
 8009326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b0c      	cmp	r3, #12
 800932e:	d841      	bhi.n	80093b4 <HAL_TIM_IC_Start_IT+0x18c>
 8009330:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <HAL_TIM_IC_Start_IT+0x110>)
 8009332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009336:	bf00      	nop
 8009338:	0800936d 	.word	0x0800936d
 800933c:	080093b5 	.word	0x080093b5
 8009340:	080093b5 	.word	0x080093b5
 8009344:	080093b5 	.word	0x080093b5
 8009348:	0800937f 	.word	0x0800937f
 800934c:	080093b5 	.word	0x080093b5
 8009350:	080093b5 	.word	0x080093b5
 8009354:	080093b5 	.word	0x080093b5
 8009358:	08009391 	.word	0x08009391
 800935c:	080093b5 	.word	0x080093b5
 8009360:	080093b5 	.word	0x080093b5
 8009364:	080093b5 	.word	0x080093b5
 8009368:	080093a3 	.word	0x080093a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0202 	orr.w	r2, r2, #2
 800937a:	60da      	str	r2, [r3, #12]
      break;
 800937c:	e01d      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f042 0204 	orr.w	r2, r2, #4
 800938c:	60da      	str	r2, [r3, #12]
      break;
 800938e:	e014      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0208 	orr.w	r2, r2, #8
 800939e:	60da      	str	r2, [r3, #12]
      break;
 80093a0:	e00b      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68da      	ldr	r2, [r3, #12]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0210 	orr.w	r2, r2, #16
 80093b0:	60da      	str	r2, [r3, #12]
      break;
 80093b2:	e002      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	73fb      	strb	r3, [r7, #15]
      break;
 80093b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d148      	bne.n	8009452 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2201      	movs	r2, #1
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 f8d5 	bl	800a578 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a22      	ldr	r2, [pc, #136]	; (800945c <HAL_TIM_IC_Start_IT+0x234>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d022      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e0:	d01d      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a1e      	ldr	r2, [pc, #120]	; (8009460 <HAL_TIM_IC_Start_IT+0x238>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d018      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a1c      	ldr	r2, [pc, #112]	; (8009464 <HAL_TIM_IC_Start_IT+0x23c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d013      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a1b      	ldr	r2, [pc, #108]	; (8009468 <HAL_TIM_IC_Start_IT+0x240>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00e      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a19      	ldr	r2, [pc, #100]	; (800946c <HAL_TIM_IC_Start_IT+0x244>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d009      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a18      	ldr	r2, [pc, #96]	; (8009470 <HAL_TIM_IC_Start_IT+0x248>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d004      	beq.n	800941e <HAL_TIM_IC_Start_IT+0x1f6>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a16      	ldr	r2, [pc, #88]	; (8009474 <HAL_TIM_IC_Start_IT+0x24c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d111      	bne.n	8009442 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b06      	cmp	r3, #6
 800942e:	d010      	beq.n	8009452 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f042 0201 	orr.w	r2, r2, #1
 800943e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009440:	e007      	b.n	8009452 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0201 	orr.w	r2, r2, #1
 8009450:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009452:	7bfb      	ldrb	r3, [r7, #15]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40010000 	.word	0x40010000
 8009460:	40000400 	.word	0x40000400
 8009464:	40000800 	.word	0x40000800
 8009468:	40000c00 	.word	0x40000c00
 800946c:	40010400 	.word	0x40010400
 8009470:	40014000 	.word	0x40014000
 8009474:	40001800 	.word	0x40001800

08009478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f003 0302 	and.w	r3, r3, #2
 800948a:	2b02      	cmp	r3, #2
 800948c:	d122      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f003 0302 	and.w	r3, r3, #2
 8009498:	2b02      	cmp	r3, #2
 800949a:	d11b      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f06f 0202 	mvn.w	r2, #2
 80094a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2201      	movs	r2, #1
 80094aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7f7 fea4 	bl	8001208 <HAL_TIM_IC_CaptureCallback>
 80094c0:	e005      	b.n	80094ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fb54 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7fc fbed 	bl	8005ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	f003 0304 	and.w	r3, r3, #4
 80094de:	2b04      	cmp	r3, #4
 80094e0:	d122      	bne.n	8009528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	d11b      	bne.n	8009528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f06f 0204 	mvn.w	r2, #4
 80094f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2202      	movs	r2, #2
 80094fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7f7 fe7a 	bl	8001208 <HAL_TIM_IC_CaptureCallback>
 8009514:	e005      	b.n	8009522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fb2a 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7fc fbc3 	bl	8005ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	f003 0308 	and.w	r3, r3, #8
 8009532:	2b08      	cmp	r3, #8
 8009534:	d122      	bne.n	800957c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f003 0308 	and.w	r3, r3, #8
 8009540:	2b08      	cmp	r3, #8
 8009542:	d11b      	bne.n	800957c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f06f 0208 	mvn.w	r2, #8
 800954c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2204      	movs	r2, #4
 8009552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	f003 0303 	and.w	r3, r3, #3
 800955e:	2b00      	cmp	r3, #0
 8009560:	d003      	beq.n	800956a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7f7 fe50 	bl	8001208 <HAL_TIM_IC_CaptureCallback>
 8009568:	e005      	b.n	8009576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fb00 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7fc fb99 	bl	8005ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	f003 0310 	and.w	r3, r3, #16
 8009586:	2b10      	cmp	r3, #16
 8009588:	d122      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f003 0310 	and.w	r3, r3, #16
 8009594:	2b10      	cmp	r3, #16
 8009596:	d11b      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f06f 0210 	mvn.w	r2, #16
 80095a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2208      	movs	r2, #8
 80095a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7f7 fe26 	bl	8001208 <HAL_TIM_IC_CaptureCallback>
 80095bc:	e005      	b.n	80095ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fad6 	bl	8009b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7fc fb6f 	bl	8005ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d10e      	bne.n	80095fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d107      	bne.n	80095fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f06f 0201 	mvn.w	r2, #1
 80095f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fab0 	bl	8009b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009606:	2b80      	cmp	r3, #128	; 0x80
 8009608:	d10e      	bne.n	8009628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009614:	2b80      	cmp	r3, #128	; 0x80
 8009616:	d107      	bne.n	8009628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 f8a6 	bl	800a774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009632:	2b40      	cmp	r3, #64	; 0x40
 8009634:	d10e      	bne.n	8009654 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009640:	2b40      	cmp	r3, #64	; 0x40
 8009642:	d107      	bne.n	8009654 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800964c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fa98 	bl	8009b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	f003 0320 	and.w	r3, r3, #32
 800965e:	2b20      	cmp	r3, #32
 8009660:	d10e      	bne.n	8009680 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f003 0320 	and.w	r3, r3, #32
 800966c:	2b20      	cmp	r3, #32
 800966e:	d107      	bne.n	8009680 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f06f 0220 	mvn.w	r2, #32
 8009678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 f870 	bl	800a760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e088      	b.n	80097b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d11b      	bne.n	80096ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6818      	ldr	r0, [r3, #0]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	6819      	ldr	r1, [r3, #0]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f000 fd94 	bl	800a1f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	699a      	ldr	r2, [r3, #24]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 020c 	bic.w	r2, r2, #12
 80096d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6999      	ldr	r1, [r3, #24]
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	689a      	ldr	r2, [r3, #8]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	619a      	str	r2, [r3, #24]
 80096ea:	e060      	b.n	80097ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	d11c      	bne.n	800972c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6818      	ldr	r0, [r3, #0]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6819      	ldr	r1, [r3, #0]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	f000 fe18 	bl	800a336 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	699a      	ldr	r2, [r3, #24]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009714:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6999      	ldr	r1, [r3, #24]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	021a      	lsls	r2, r3, #8
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	619a      	str	r2, [r3, #24]
 800972a:	e040      	b.n	80097ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b08      	cmp	r3, #8
 8009730:	d11b      	bne.n	800976a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6818      	ldr	r0, [r3, #0]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6819      	ldr	r1, [r3, #0]
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	f000 fe65 	bl	800a410 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69da      	ldr	r2, [r3, #28]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 020c 	bic.w	r2, r2, #12
 8009754:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	69d9      	ldr	r1, [r3, #28]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	430a      	orrs	r2, r1
 8009766:	61da      	str	r2, [r3, #28]
 8009768:	e021      	b.n	80097ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b0c      	cmp	r3, #12
 800976e:	d11c      	bne.n	80097aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	6819      	ldr	r1, [r3, #0]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f000 fe82 	bl	800a488 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	69da      	ldr	r2, [r3, #28]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009792:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	69d9      	ldr	r1, [r3, #28]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	021a      	lsls	r2, r3, #8
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	430a      	orrs	r2, r1
 80097a6:	61da      	str	r2, [r3, #28]
 80097a8:	e001      	b.n	80097ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d101      	bne.n	80097de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80097da:	2302      	movs	r3, #2
 80097dc:	e0ae      	b.n	800993c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b0c      	cmp	r3, #12
 80097ea:	f200 809f 	bhi.w	800992c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80097ee:	a201      	add	r2, pc, #4	; (adr r2, 80097f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f4:	08009829 	.word	0x08009829
 80097f8:	0800992d 	.word	0x0800992d
 80097fc:	0800992d 	.word	0x0800992d
 8009800:	0800992d 	.word	0x0800992d
 8009804:	08009869 	.word	0x08009869
 8009808:	0800992d 	.word	0x0800992d
 800980c:	0800992d 	.word	0x0800992d
 8009810:	0800992d 	.word	0x0800992d
 8009814:	080098ab 	.word	0x080098ab
 8009818:	0800992d 	.word	0x0800992d
 800981c:	0800992d 	.word	0x0800992d
 8009820:	0800992d 	.word	0x0800992d
 8009824:	080098eb 	.word	0x080098eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68b9      	ldr	r1, [r7, #8]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fb2e 	bl	8009e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	699a      	ldr	r2, [r3, #24]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0208 	orr.w	r2, r2, #8
 8009842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	699a      	ldr	r2, [r3, #24]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f022 0204 	bic.w	r2, r2, #4
 8009852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6999      	ldr	r1, [r3, #24]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	691a      	ldr	r2, [r3, #16]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	619a      	str	r2, [r3, #24]
      break;
 8009866:	e064      	b.n	8009932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fb7e 	bl	8009f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	699a      	ldr	r2, [r3, #24]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	699a      	ldr	r2, [r3, #24]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6999      	ldr	r1, [r3, #24]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	021a      	lsls	r2, r3, #8
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	619a      	str	r2, [r3, #24]
      break;
 80098a8:	e043      	b.n	8009932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fbd3 	bl	800a05c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69da      	ldr	r2, [r3, #28]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f042 0208 	orr.w	r2, r2, #8
 80098c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	69da      	ldr	r2, [r3, #28]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0204 	bic.w	r2, r2, #4
 80098d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	69d9      	ldr	r1, [r3, #28]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	691a      	ldr	r2, [r3, #16]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	430a      	orrs	r2, r1
 80098e6:	61da      	str	r2, [r3, #28]
      break;
 80098e8:	e023      	b.n	8009932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68b9      	ldr	r1, [r7, #8]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fc27 	bl	800a144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	69da      	ldr	r2, [r3, #28]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	69da      	ldr	r2, [r3, #28]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69d9      	ldr	r1, [r3, #28]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	021a      	lsls	r2, r3, #8
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	61da      	str	r2, [r3, #28]
      break;
 800992a:	e002      	b.n	8009932 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]
      break;
 8009930:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800993a:	7dfb      	ldrb	r3, [r7, #23]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009958:	2b01      	cmp	r3, #1
 800995a:	d101      	bne.n	8009960 <HAL_TIM_ConfigClockSource+0x1c>
 800995c:	2302      	movs	r3, #2
 800995e:	e0b4      	b.n	8009aca <HAL_TIM_ConfigClockSource+0x186>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800997e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009998:	d03e      	beq.n	8009a18 <HAL_TIM_ConfigClockSource+0xd4>
 800999a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800999e:	f200 8087 	bhi.w	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a6:	f000 8086 	beq.w	8009ab6 <HAL_TIM_ConfigClockSource+0x172>
 80099aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ae:	d87f      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099b0:	2b70      	cmp	r3, #112	; 0x70
 80099b2:	d01a      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0xa6>
 80099b4:	2b70      	cmp	r3, #112	; 0x70
 80099b6:	d87b      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099b8:	2b60      	cmp	r3, #96	; 0x60
 80099ba:	d050      	beq.n	8009a5e <HAL_TIM_ConfigClockSource+0x11a>
 80099bc:	2b60      	cmp	r3, #96	; 0x60
 80099be:	d877      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099c0:	2b50      	cmp	r3, #80	; 0x50
 80099c2:	d03c      	beq.n	8009a3e <HAL_TIM_ConfigClockSource+0xfa>
 80099c4:	2b50      	cmp	r3, #80	; 0x50
 80099c6:	d873      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099c8:	2b40      	cmp	r3, #64	; 0x40
 80099ca:	d058      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x13a>
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	d86f      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099d0:	2b30      	cmp	r3, #48	; 0x30
 80099d2:	d064      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099d4:	2b30      	cmp	r3, #48	; 0x30
 80099d6:	d86b      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099d8:	2b20      	cmp	r3, #32
 80099da:	d060      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099dc:	2b20      	cmp	r3, #32
 80099de:	d867      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d05c      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099e4:	2b10      	cmp	r3, #16
 80099e6:	d05a      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099e8:	e062      	b.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	6899      	ldr	r1, [r3, #8]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	f000 fd9d 	bl	800a538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	609a      	str	r2, [r3, #8]
      break;
 8009a16:	e04f      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	6899      	ldr	r1, [r3, #8]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	f000 fd86 	bl	800a538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689a      	ldr	r2, [r3, #8]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a3a:	609a      	str	r2, [r3, #8]
      break;
 8009a3c:	e03c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6859      	ldr	r1, [r3, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f000 fc44 	bl	800a2d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2150      	movs	r1, #80	; 0x50
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fd53 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 8009a5c:	e02c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6859      	ldr	r1, [r3, #4]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f000 fca0 	bl	800a3b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2160      	movs	r1, #96	; 0x60
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fd43 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 8009a7c:	e01c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	6859      	ldr	r1, [r3, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f000 fc24 	bl	800a2d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2140      	movs	r1, #64	; 0x40
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fd33 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 8009a9c:	e00c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f000 fd2a 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 8009aae:	e003      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab4:	e000      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
	...

08009ad4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b0c      	cmp	r3, #12
 8009ae6:	d831      	bhi.n	8009b4c <HAL_TIM_ReadCapturedValue+0x78>
 8009ae8:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b25 	.word	0x08009b25
 8009af4:	08009b4d 	.word	0x08009b4d
 8009af8:	08009b4d 	.word	0x08009b4d
 8009afc:	08009b4d 	.word	0x08009b4d
 8009b00:	08009b2f 	.word	0x08009b2f
 8009b04:	08009b4d 	.word	0x08009b4d
 8009b08:	08009b4d 	.word	0x08009b4d
 8009b0c:	08009b4d 	.word	0x08009b4d
 8009b10:	08009b39 	.word	0x08009b39
 8009b14:	08009b4d 	.word	0x08009b4d
 8009b18:	08009b4d 	.word	0x08009b4d
 8009b1c:	08009b4d 	.word	0x08009b4d
 8009b20:	08009b43 	.word	0x08009b43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2a:	60fb      	str	r3, [r7, #12]

      break;
 8009b2c:	e00f      	b.n	8009b4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	60fb      	str	r3, [r7, #12]

      break;
 8009b36:	e00a      	b.n	8009b4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b3e:	60fb      	str	r3, [r7, #12]

      break;
 8009b40:	e005      	b.n	8009b4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b48:	60fb      	str	r3, [r7, #12]

      break;
 8009b4a:	e000      	b.n	8009b4e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009b4c:	bf00      	nop
  }

  return tmpreg;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d107      	bne.n	8009bd4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bd2:	e02a      	b.n	8009c2a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d107      	bne.n	8009bee <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2202      	movs	r2, #2
 8009be2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bec:	e01d      	b.n	8009c2a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d107      	bne.n	8009c08 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2204      	movs	r2, #4
 8009bfc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c06:	e010      	b.n	8009c2a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d107      	bne.n	8009c22 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2208      	movs	r2, #8
 8009c16:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c20:	e003      	b.n	8009c2a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7ff ffb4 	bl	8009b98 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	771a      	strb	r2, [r3, #28]
}
 8009c36:	bf00      	nop
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d10b      	bne.n	8009c6e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d136      	bne.n	8009cd2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c6c:	e031      	b.n	8009cd2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d10b      	bne.n	8009c90 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d125      	bne.n	8009cd2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c8e:	e020      	b.n	8009cd2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d10b      	bne.n	8009cb2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2204      	movs	r2, #4
 8009c9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	69db      	ldr	r3, [r3, #28]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d114      	bne.n	8009cd2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cb0:	e00f      	b.n	8009cd2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d10a      	bne.n	8009cd2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2208      	movs	r2, #8
 8009cc0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d103      	bne.n	8009cd2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7fb ffe8 	bl	8005ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	771a      	strb	r2, [r3, #28]
}
 8009cde:	bf00      	nop
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d103      	bne.n	8009d06 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2201      	movs	r2, #1
 8009d02:	771a      	strb	r2, [r3, #28]
 8009d04:	e019      	b.n	8009d3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d103      	bne.n	8009d18 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2202      	movs	r2, #2
 8009d14:	771a      	strb	r2, [r3, #28]
 8009d16:	e010      	b.n	8009d3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d103      	bne.n	8009d2a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2204      	movs	r2, #4
 8009d26:	771a      	strb	r2, [r3, #28]
 8009d28:	e007      	b.n	8009d3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d102      	bne.n	8009d3a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2208      	movs	r2, #8
 8009d38:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7fc f810 	bl	8005d60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	771a      	strb	r2, [r3, #28]
}
 8009d46:	bf00      	nop
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a40      	ldr	r2, [pc, #256]	; (8009e64 <TIM_Base_SetConfig+0x114>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d013      	beq.n	8009d90 <TIM_Base_SetConfig+0x40>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6e:	d00f      	beq.n	8009d90 <TIM_Base_SetConfig+0x40>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a3d      	ldr	r2, [pc, #244]	; (8009e68 <TIM_Base_SetConfig+0x118>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d00b      	beq.n	8009d90 <TIM_Base_SetConfig+0x40>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a3c      	ldr	r2, [pc, #240]	; (8009e6c <TIM_Base_SetConfig+0x11c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d007      	beq.n	8009d90 <TIM_Base_SetConfig+0x40>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a3b      	ldr	r2, [pc, #236]	; (8009e70 <TIM_Base_SetConfig+0x120>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d003      	beq.n	8009d90 <TIM_Base_SetConfig+0x40>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a3a      	ldr	r2, [pc, #232]	; (8009e74 <TIM_Base_SetConfig+0x124>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d108      	bne.n	8009da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a2f      	ldr	r2, [pc, #188]	; (8009e64 <TIM_Base_SetConfig+0x114>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d02b      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009db0:	d027      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a2c      	ldr	r2, [pc, #176]	; (8009e68 <TIM_Base_SetConfig+0x118>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d023      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a2b      	ldr	r2, [pc, #172]	; (8009e6c <TIM_Base_SetConfig+0x11c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d01f      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a2a      	ldr	r2, [pc, #168]	; (8009e70 <TIM_Base_SetConfig+0x120>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d01b      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a29      	ldr	r2, [pc, #164]	; (8009e74 <TIM_Base_SetConfig+0x124>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d017      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a28      	ldr	r2, [pc, #160]	; (8009e78 <TIM_Base_SetConfig+0x128>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d013      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a27      	ldr	r2, [pc, #156]	; (8009e7c <TIM_Base_SetConfig+0x12c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00f      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a26      	ldr	r2, [pc, #152]	; (8009e80 <TIM_Base_SetConfig+0x130>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d00b      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a25      	ldr	r2, [pc, #148]	; (8009e84 <TIM_Base_SetConfig+0x134>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d007      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a24      	ldr	r2, [pc, #144]	; (8009e88 <TIM_Base_SetConfig+0x138>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d003      	beq.n	8009e02 <TIM_Base_SetConfig+0xb2>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a23      	ldr	r2, [pc, #140]	; (8009e8c <TIM_Base_SetConfig+0x13c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d108      	bne.n	8009e14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	689a      	ldr	r2, [r3, #8]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a0a      	ldr	r2, [pc, #40]	; (8009e64 <TIM_Base_SetConfig+0x114>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d003      	beq.n	8009e48 <TIM_Base_SetConfig+0xf8>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a0c      	ldr	r2, [pc, #48]	; (8009e74 <TIM_Base_SetConfig+0x124>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d103      	bne.n	8009e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	691a      	ldr	r2, [r3, #16]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	615a      	str	r2, [r3, #20]
}
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	40010000 	.word	0x40010000
 8009e68:	40000400 	.word	0x40000400
 8009e6c:	40000800 	.word	0x40000800
 8009e70:	40000c00 	.word	0x40000c00
 8009e74:	40010400 	.word	0x40010400
 8009e78:	40014000 	.word	0x40014000
 8009e7c:	40014400 	.word	0x40014400
 8009e80:	40014800 	.word	0x40014800
 8009e84:	40001800 	.word	0x40001800
 8009e88:	40001c00 	.word	0x40001c00
 8009e8c:	40002000 	.word	0x40002000

08009e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	f023 0201 	bic.w	r2, r3, #1
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f023 0303 	bic.w	r3, r3, #3
 8009ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f023 0302 	bic.w	r3, r3, #2
 8009ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a20      	ldr	r2, [pc, #128]	; (8009f68 <TIM_OC1_SetConfig+0xd8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d003      	beq.n	8009ef4 <TIM_OC1_SetConfig+0x64>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a1f      	ldr	r2, [pc, #124]	; (8009f6c <TIM_OC1_SetConfig+0xdc>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d10c      	bne.n	8009f0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f023 0308 	bic.w	r3, r3, #8
 8009efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f023 0304 	bic.w	r3, r3, #4
 8009f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a15      	ldr	r2, [pc, #84]	; (8009f68 <TIM_OC1_SetConfig+0xd8>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d003      	beq.n	8009f1e <TIM_OC1_SetConfig+0x8e>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a14      	ldr	r2, [pc, #80]	; (8009f6c <TIM_OC1_SetConfig+0xdc>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d111      	bne.n	8009f42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	697a      	ldr	r2, [r7, #20]
 8009f5a:	621a      	str	r2, [r3, #32]
}
 8009f5c:	bf00      	nop
 8009f5e:	371c      	adds	r7, #28
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	40010400 	.word	0x40010400

08009f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	f023 0210 	bic.w	r2, r3, #16
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f023 0320 	bic.w	r3, r3, #32
 8009fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	697a      	ldr	r2, [r7, #20]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a22      	ldr	r2, [pc, #136]	; (800a054 <TIM_OC2_SetConfig+0xe4>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d003      	beq.n	8009fd8 <TIM_OC2_SetConfig+0x68>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a21      	ldr	r2, [pc, #132]	; (800a058 <TIM_OC2_SetConfig+0xe8>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d10d      	bne.n	8009ff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a17      	ldr	r2, [pc, #92]	; (800a054 <TIM_OC2_SetConfig+0xe4>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d003      	beq.n	800a004 <TIM_OC2_SetConfig+0x94>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a16      	ldr	r2, [pc, #88]	; (800a058 <TIM_OC2_SetConfig+0xe8>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d113      	bne.n	800a02c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a00a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	621a      	str	r2, [r3, #32]
}
 800a046:	bf00      	nop
 800a048:	371c      	adds	r7, #28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	40010000 	.word	0x40010000
 800a058:	40010400 	.word	0x40010400

0800a05c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a08a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f023 0303 	bic.w	r3, r3, #3
 800a092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	021b      	lsls	r3, r3, #8
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a21      	ldr	r2, [pc, #132]	; (800a13c <TIM_OC3_SetConfig+0xe0>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d003      	beq.n	800a0c2 <TIM_OC3_SetConfig+0x66>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a20      	ldr	r2, [pc, #128]	; (800a140 <TIM_OC3_SetConfig+0xe4>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d10d      	bne.n	800a0de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a16      	ldr	r2, [pc, #88]	; (800a13c <TIM_OC3_SetConfig+0xe0>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d003      	beq.n	800a0ee <TIM_OC3_SetConfig+0x92>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a15      	ldr	r2, [pc, #84]	; (800a140 <TIM_OC3_SetConfig+0xe4>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d113      	bne.n	800a116 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	011b      	lsls	r3, r3, #4
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	011b      	lsls	r3, r3, #4
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	4313      	orrs	r3, r2
 800a114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	621a      	str	r2, [r3, #32]
}
 800a130:	bf00      	nop
 800a132:	371c      	adds	r7, #28
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	40010000 	.word	0x40010000
 800a140:	40010400 	.word	0x40010400

0800a144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a144:	b480      	push	{r7}
 800a146:	b087      	sub	sp, #28
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	69db      	ldr	r3, [r3, #28]
 800a16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	021b      	lsls	r3, r3, #8
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	4313      	orrs	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a18e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	031b      	lsls	r3, r3, #12
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	4313      	orrs	r3, r2
 800a19a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a12      	ldr	r2, [pc, #72]	; (800a1e8 <TIM_OC4_SetConfig+0xa4>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d003      	beq.n	800a1ac <TIM_OC4_SetConfig+0x68>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a11      	ldr	r2, [pc, #68]	; (800a1ec <TIM_OC4_SetConfig+0xa8>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d109      	bne.n	800a1c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	019b      	lsls	r3, r3, #6
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	621a      	str	r2, [r3, #32]
}
 800a1da:	bf00      	nop
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	40010000 	.word	0x40010000
 800a1ec:	40010400 	.word	0x40010400

0800a1f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b087      	sub	sp, #28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	f023 0201 	bic.w	r2, r3, #1
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4a28      	ldr	r2, [pc, #160]	; (800a2bc <TIM_TI1_SetConfig+0xcc>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d01b      	beq.n	800a256 <TIM_TI1_SetConfig+0x66>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a224:	d017      	beq.n	800a256 <TIM_TI1_SetConfig+0x66>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4a25      	ldr	r2, [pc, #148]	; (800a2c0 <TIM_TI1_SetConfig+0xd0>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d013      	beq.n	800a256 <TIM_TI1_SetConfig+0x66>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	4a24      	ldr	r2, [pc, #144]	; (800a2c4 <TIM_TI1_SetConfig+0xd4>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00f      	beq.n	800a256 <TIM_TI1_SetConfig+0x66>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4a23      	ldr	r2, [pc, #140]	; (800a2c8 <TIM_TI1_SetConfig+0xd8>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d00b      	beq.n	800a256 <TIM_TI1_SetConfig+0x66>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4a22      	ldr	r2, [pc, #136]	; (800a2cc <TIM_TI1_SetConfig+0xdc>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d007      	beq.n	800a256 <TIM_TI1_SetConfig+0x66>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4a21      	ldr	r2, [pc, #132]	; (800a2d0 <TIM_TI1_SetConfig+0xe0>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d003      	beq.n	800a256 <TIM_TI1_SetConfig+0x66>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4a20      	ldr	r2, [pc, #128]	; (800a2d4 <TIM_TI1_SetConfig+0xe4>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d101      	bne.n	800a25a <TIM_TI1_SetConfig+0x6a>
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <TIM_TI1_SetConfig+0x6c>
 800a25a:	2300      	movs	r3, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d008      	beq.n	800a272 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f023 0303 	bic.w	r3, r3, #3
 800a266:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	617b      	str	r3, [r7, #20]
 800a270:	e003      	b.n	800a27a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f043 0301 	orr.w	r3, r3, #1
 800a278:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	b2db      	uxtb	r3, r3
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f023 030a 	bic.w	r3, r3, #10
 800a294:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	f003 030a 	and.w	r3, r3, #10
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	621a      	str	r2, [r3, #32]
}
 800a2ae:	bf00      	nop
 800a2b0:	371c      	adds	r7, #28
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	40010000 	.word	0x40010000
 800a2c0:	40000400 	.word	0x40000400
 800a2c4:	40000800 	.word	0x40000800
 800a2c8:	40000c00 	.word	0x40000c00
 800a2cc:	40010400 	.word	0x40010400
 800a2d0:	40014000 	.word	0x40014000
 800a2d4:	40001800 	.word	0x40001800

0800a2d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	f023 0201 	bic.w	r2, r3, #1
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	011b      	lsls	r3, r3, #4
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f023 030a 	bic.w	r3, r3, #10
 800a314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	621a      	str	r2, [r3, #32]
}
 800a32a:	bf00      	nop
 800a32c:	371c      	adds	r7, #28
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a336:	b480      	push	{r7}
 800a338:	b087      	sub	sp, #28
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	607a      	str	r2, [r7, #4]
 800a342:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	f023 0210 	bic.w	r2, r3, #16
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a362:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	031b      	lsls	r3, r3, #12
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	4313      	orrs	r3, r2
 800a380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a388:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	011b      	lsls	r3, r3, #4
 800a38e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4313      	orrs	r3, r2
 800a396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	621a      	str	r2, [r3, #32]
}
 800a3a4:	bf00      	nop
 800a3a6:	371c      	adds	r7, #28
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6a1b      	ldr	r3, [r3, #32]
 800a3c0:	f023 0210 	bic.w	r2, r3, #16
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	031b      	lsls	r3, r3, #12
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	011b      	lsls	r3, r3, #4
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	621a      	str	r2, [r3, #32]
}
 800a404:	bf00      	nop
 800a406:	371c      	adds	r7, #28
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a410:	b480      	push	{r7}
 800a412:	b087      	sub	sp, #28
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f023 0303 	bic.w	r3, r3, #3
 800a43c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4313      	orrs	r3, r2
 800a444:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a44c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	011b      	lsls	r3, r3, #4
 800a452:	b2db      	uxtb	r3, r3
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	4313      	orrs	r3, r2
 800a458:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a460:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	021b      	lsls	r3, r3, #8
 800a466:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	621a      	str	r2, [r3, #32]
}
 800a47c:	bf00      	nop
 800a47e:	371c      	adds	r7, #28
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6a1b      	ldr	r3, [r3, #32]
 800a4ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	021b      	lsls	r3, r3, #8
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	031b      	lsls	r3, r3, #12
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a4da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	031b      	lsls	r3, r3, #12
 800a4e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	621a      	str	r2, [r3, #32]
}
 800a4f6:	bf00      	nop
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4313      	orrs	r3, r2
 800a520:	f043 0307 	orr.w	r3, r3, #7
 800a524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	609a      	str	r2, [r3, #8]
}
 800a52c:	bf00      	nop
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	021a      	lsls	r2, r3, #8
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	431a      	orrs	r2, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4313      	orrs	r3, r2
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	4313      	orrs	r3, r2
 800a564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	609a      	str	r2, [r3, #8]
}
 800a56c:	bf00      	nop
 800a56e:	371c      	adds	r7, #28
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a578:	b480      	push	{r7}
 800a57a:	b087      	sub	sp, #28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f003 031f 	and.w	r3, r3, #31
 800a58a:	2201      	movs	r2, #1
 800a58c:	fa02 f303 	lsl.w	r3, r2, r3
 800a590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6a1a      	ldr	r2, [r3, #32]
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	43db      	mvns	r3, r3
 800a59a:	401a      	ands	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a1a      	ldr	r2, [r3, #32]
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 031f 	and.w	r3, r3, #31
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b0:	431a      	orrs	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	621a      	str	r2, [r3, #32]
}
 800a5b6:	bf00      	nop
 800a5b8:	371c      	adds	r7, #28
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
	...

0800a5c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d101      	bne.n	800a5dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5d8:	2302      	movs	r3, #2
 800a5da:	e05a      	b.n	800a692 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a21      	ldr	r2, [pc, #132]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d022      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a628:	d01d      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a1d      	ldr	r2, [pc, #116]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d018      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a1b      	ldr	r2, [pc, #108]	; (800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d013      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a1a      	ldr	r2, [pc, #104]	; (800a6ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d00e      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a18      	ldr	r2, [pc, #96]	; (800a6b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d009      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a17      	ldr	r2, [pc, #92]	; (800a6b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d004      	beq.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a15      	ldr	r2, [pc, #84]	; (800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d10c      	bne.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a66c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	4313      	orrs	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	40010000 	.word	0x40010000
 800a6a4:	40000400 	.word	0x40000400
 800a6a8:	40000800 	.word	0x40000800
 800a6ac:	40000c00 	.word	0x40000c00
 800a6b0:	40010400 	.word	0x40010400
 800a6b4:	40014000 	.word	0x40014000
 800a6b8:	40001800 	.word	0x40001800

0800a6bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d101      	bne.n	800a6d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	e03d      	b.n	800a754 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	4313      	orrs	r3, r2
 800a708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4313      	orrs	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	4313      	orrs	r3, r2
 800a724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	4313      	orrs	r3, r2
 800a732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	4313      	orrs	r3, r2
 800a740:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d101      	bne.n	800a79a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e03f      	b.n	800a81a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7fa fdac 	bl	800530c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2224      	movs	r2, #36	; 0x24
 800a7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a7ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 ff43 	bl	800b658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	691a      	ldr	r2, [r3, #16]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	695a      	ldr	r2, [r3, #20]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68da      	ldr	r2, [r3, #12]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2220      	movs	r2, #32
 800a80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2220      	movs	r2, #32
 800a814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08c      	sub	sp, #48	; 0x30
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	4613      	mov	r3, r2
 800a830:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b20      	cmp	r3, #32
 800a83c:	d165      	bne.n	800a90a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <HAL_UART_Transmit_DMA+0x26>
 800a844:	88fb      	ldrh	r3, [r7, #6]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e05e      	b.n	800a90c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a854:	2b01      	cmp	r3, #1
 800a856:	d101      	bne.n	800a85c <HAL_UART_Transmit_DMA+0x38>
 800a858:	2302      	movs	r3, #2
 800a85a:	e057      	b.n	800a90c <HAL_UART_Transmit_DMA+0xe8>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	88fa      	ldrh	r2, [r7, #6]
 800a86e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	88fa      	ldrh	r2, [r7, #6]
 800a874:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2221      	movs	r2, #33	; 0x21
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a888:	4a22      	ldr	r2, [pc, #136]	; (800a914 <HAL_UART_Transmit_DMA+0xf0>)
 800a88a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a890:	4a21      	ldr	r2, [pc, #132]	; (800a918 <HAL_UART_Transmit_DMA+0xf4>)
 800a892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a898:	4a20      	ldr	r2, [pc, #128]	; (800a91c <HAL_UART_Transmit_DMA+0xf8>)
 800a89a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a8a4:	f107 0308 	add.w	r3, r7, #8
 800a8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b0:	6819      	ldr	r1, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	88fb      	ldrh	r3, [r7, #6]
 800a8bc:	f7fc f93c 	bl	8006b38 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8c8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3314      	adds	r3, #20
 800a8d8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3314      	adds	r3, #20
 800a8f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8f2:	627a      	str	r2, [r7, #36]	; 0x24
 800a8f4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f6:	6a39      	ldr	r1, [r7, #32]
 800a8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8fa:	e841 2300 	strex	r3, r2, [r1]
 800a8fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e5      	bne.n	800a8d2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	e000      	b.n	800a90c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a90a:	2302      	movs	r3, #2
  }
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3730      	adds	r7, #48	; 0x30
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	0800aef1 	.word	0x0800aef1
 800a918:	0800af8b 	.word	0x0800af8b
 800a91c:	0800b103 	.word	0x0800b103

0800a920 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	4613      	mov	r3, r2
 800a92c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b20      	cmp	r3, #32
 800a938:	d11d      	bne.n	800a976 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <HAL_UART_Receive_DMA+0x26>
 800a940:	88fb      	ldrh	r3, [r7, #6]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e016      	b.n	800a978 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a950:	2b01      	cmp	r3, #1
 800a952:	d101      	bne.n	800a958 <HAL_UART_Receive_DMA+0x38>
 800a954:	2302      	movs	r3, #2
 800a956:	e00f      	b.n	800a978 <HAL_UART_Receive_DMA+0x58>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a966:	88fb      	ldrh	r3, [r7, #6]
 800a968:	461a      	mov	r2, r3
 800a96a:	68b9      	ldr	r1, [r7, #8]
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f000 fc13 	bl	800b198 <UART_Start_Receive_DMA>
 800a972:	4603      	mov	r3, r0
 800a974:	e000      	b.n	800a978 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a976:	2302      	movs	r3, #2
  }
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b0ba      	sub	sp, #232	; 0xe8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9b6:	f003 030f 	and.w	r3, r3, #15
 800a9ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a9be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10f      	bne.n	800a9e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ca:	f003 0320 	and.w	r3, r3, #32
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d009      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x66>
 800a9d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9d6:	f003 0320 	and.w	r3, r3, #32
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fd7f 	bl	800b4e2 <UART_Receive_IT>
      return;
 800a9e4:	e256      	b.n	800ae94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a9e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 80de 	beq.w	800abac <HAL_UART_IRQHandler+0x22c>
 800a9f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9f4:	f003 0301 	and.w	r3, r3, #1
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d106      	bne.n	800aa0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a9fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 80d1 	beq.w	800abac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aa0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00b      	beq.n	800aa2e <HAL_UART_IRQHandler+0xae>
 800aa16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d005      	beq.n	800aa2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa26:	f043 0201 	orr.w	r2, r3, #1
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa32:	f003 0304 	and.w	r3, r3, #4
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00b      	beq.n	800aa52 <HAL_UART_IRQHandler+0xd2>
 800aa3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d005      	beq.n	800aa52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4a:	f043 0202 	orr.w	r2, r3, #2
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00b      	beq.n	800aa76 <HAL_UART_IRQHandler+0xf6>
 800aa5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d005      	beq.n	800aa76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	f043 0204 	orr.w	r2, r3, #4
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aa76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa7a:	f003 0308 	and.w	r3, r3, #8
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d011      	beq.n	800aaa6 <HAL_UART_IRQHandler+0x126>
 800aa82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa86:	f003 0320 	and.w	r3, r3, #32
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d105      	bne.n	800aa9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aa8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa92:	f003 0301 	and.w	r3, r3, #1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d005      	beq.n	800aaa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9e:	f043 0208 	orr.w	r2, r3, #8
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 81ed 	beq.w	800ae8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aab4:	f003 0320 	and.w	r3, r3, #32
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d008      	beq.n	800aace <HAL_UART_IRQHandler+0x14e>
 800aabc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aac0:	f003 0320 	and.w	r3, r3, #32
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fd0a 	bl	800b4e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad8:	2b40      	cmp	r3, #64	; 0x40
 800aada:	bf0c      	ite	eq
 800aadc:	2301      	moveq	r3, #1
 800aade:	2300      	movne	r3, #0
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaea:	f003 0308 	and.w	r3, r3, #8
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d103      	bne.n	800aafa <HAL_UART_IRQHandler+0x17a>
 800aaf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d04f      	beq.n	800ab9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fc12 	bl	800b324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab0a:	2b40      	cmp	r3, #64	; 0x40
 800ab0c:	d141      	bne.n	800ab92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3314      	adds	r3, #20
 800ab14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab1c:	e853 3f00 	ldrex	r3, [r3]
 800ab20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3314      	adds	r3, #20
 800ab36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1d9      	bne.n	800ab0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d013      	beq.n	800ab8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab66:	4a7d      	ldr	r2, [pc, #500]	; (800ad5c <HAL_UART_IRQHandler+0x3dc>)
 800ab68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fc f8aa 	bl	8006cc8 <HAL_DMA_Abort_IT>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d016      	beq.n	800aba8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab84:	4610      	mov	r0, r2
 800ab86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab88:	e00e      	b.n	800aba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f99a 	bl	800aec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab90:	e00a      	b.n	800aba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f996 	bl	800aec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab98:	e006      	b.n	800aba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f992 	bl	800aec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aba6:	e170      	b.n	800ae8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba8:	bf00      	nop
    return;
 800abaa:	e16e      	b.n	800ae8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	f040 814a 	bne.w	800ae4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800abb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abba:	f003 0310 	and.w	r3, r3, #16
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 8143 	beq.w	800ae4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800abc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abc8:	f003 0310 	and.w	r3, r3, #16
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 813c 	beq.w	800ae4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800abd2:	2300      	movs	r3, #0
 800abd4:	60bb      	str	r3, [r7, #8]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	60bb      	str	r3, [r7, #8]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	60bb      	str	r3, [r7, #8]
 800abe6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf2:	2b40      	cmp	r3, #64	; 0x40
 800abf4:	f040 80b4 	bne.w	800ad60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 8140 	beq.w	800ae8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac16:	429a      	cmp	r2, r3
 800ac18:	f080 8139 	bcs.w	800ae8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac28:	69db      	ldr	r3, [r3, #28]
 800ac2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac2e:	f000 8088 	beq.w	800ad42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	330c      	adds	r3, #12
 800ac38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac40:	e853 3f00 	ldrex	r3, [r3]
 800ac44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	330c      	adds	r3, #12
 800ac5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ac5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac6e:	e841 2300 	strex	r3, r2, [r1]
 800ac72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1d9      	bne.n	800ac32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3314      	adds	r3, #20
 800ac84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac88:	e853 3f00 	ldrex	r3, [r3]
 800ac8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac90:	f023 0301 	bic.w	r3, r3, #1
 800ac94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	3314      	adds	r3, #20
 800ac9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aca2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aca6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800acaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800acae:	e841 2300 	strex	r3, r2, [r1]
 800acb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800acb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1e1      	bne.n	800ac7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3314      	adds	r3, #20
 800acc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acc4:	e853 3f00 	ldrex	r3, [r3]
 800acc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800acca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800accc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3314      	adds	r3, #20
 800acda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800acde:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ace0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ace4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800acec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e3      	bne.n	800acba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	330c      	adds	r3, #12
 800ad06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad0a:	e853 3f00 	ldrex	r3, [r3]
 800ad0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad12:	f023 0310 	bic.w	r3, r3, #16
 800ad16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	330c      	adds	r3, #12
 800ad20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ad24:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad2c:	e841 2300 	strex	r3, r2, [r1]
 800ad30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1e3      	bne.n	800ad00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fb ff53 	bl	8006be8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f8c0 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ad58:	e099      	b.n	800ae8e <HAL_UART_IRQHandler+0x50e>
 800ad5a:	bf00      	nop
 800ad5c:	0800b3eb 	.word	0x0800b3eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 808b 	beq.w	800ae92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ad7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 8086 	beq.w	800ae92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	330c      	adds	r3, #12
 800ad8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad90:	e853 3f00 	ldrex	r3, [r3]
 800ad94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	330c      	adds	r3, #12
 800ada6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800adaa:	647a      	str	r2, [r7, #68]	; 0x44
 800adac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800adb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adb2:	e841 2300 	strex	r3, r2, [r1]
 800adb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1e3      	bne.n	800ad86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3314      	adds	r3, #20
 800adc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	e853 3f00 	ldrex	r3, [r3]
 800adcc:	623b      	str	r3, [r7, #32]
   return(result);
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	f023 0301 	bic.w	r3, r3, #1
 800add4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3314      	adds	r3, #20
 800adde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ade2:	633a      	str	r2, [r7, #48]	; 0x30
 800ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ade8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adea:	e841 2300 	strex	r3, r2, [r1]
 800adee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1e3      	bne.n	800adbe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	330c      	adds	r3, #12
 800ae0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	e853 3f00 	ldrex	r3, [r3]
 800ae12:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f023 0310 	bic.w	r3, r3, #16
 800ae1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	330c      	adds	r3, #12
 800ae24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ae28:	61fa      	str	r2, [r7, #28]
 800ae2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2c:	69b9      	ldr	r1, [r7, #24]
 800ae2e:	69fa      	ldr	r2, [r7, #28]
 800ae30:	e841 2300 	strex	r3, r2, [r1]
 800ae34:	617b      	str	r3, [r7, #20]
   return(result);
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e3      	bne.n	800ae04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f848 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae48:	e023      	b.n	800ae92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ae4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d009      	beq.n	800ae6a <HAL_UART_IRQHandler+0x4ea>
 800ae56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d003      	beq.n	800ae6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fad5 	bl	800b412 <UART_Transmit_IT>
    return;
 800ae68:	e014      	b.n	800ae94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ae6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00e      	beq.n	800ae94 <HAL_UART_IRQHandler+0x514>
 800ae76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d008      	beq.n	800ae94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fb15 	bl	800b4b2 <UART_EndTransmit_IT>
    return;
 800ae88:	e004      	b.n	800ae94 <HAL_UART_IRQHandler+0x514>
    return;
 800ae8a:	bf00      	nop
 800ae8c:	e002      	b.n	800ae94 <HAL_UART_IRQHandler+0x514>
      return;
 800ae8e:	bf00      	nop
 800ae90:	e000      	b.n	800ae94 <HAL_UART_IRQHandler+0x514>
      return;
 800ae92:	bf00      	nop
  }
}
 800ae94:	37e8      	adds	r7, #232	; 0xe8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop

0800ae9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b090      	sub	sp, #64	; 0x40
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d137      	bne.n	800af7c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800af0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af0e:	2200      	movs	r2, #0
 800af10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	3314      	adds	r3, #20
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	e853 3f00 	ldrex	r3, [r3]
 800af20:	623b      	str	r3, [r7, #32]
   return(result);
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af28:	63bb      	str	r3, [r7, #56]	; 0x38
 800af2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	3314      	adds	r3, #20
 800af30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af32:	633a      	str	r2, [r7, #48]	; 0x30
 800af34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af3a:	e841 2300 	strex	r3, r2, [r1]
 800af3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e5      	bne.n	800af12 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	330c      	adds	r3, #12
 800af4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	e853 3f00 	ldrex	r3, [r3]
 800af54:	60fb      	str	r3, [r7, #12]
   return(result);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34
 800af5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	330c      	adds	r3, #12
 800af64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af66:	61fa      	str	r2, [r7, #28]
 800af68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6a:	69b9      	ldr	r1, [r7, #24]
 800af6c:	69fa      	ldr	r2, [r7, #28]
 800af6e:	e841 2300 	strex	r3, r2, [r1]
 800af72:	617b      	str	r3, [r7, #20]
   return(result);
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1e5      	bne.n	800af46 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af7a:	e002      	b.n	800af82 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800af7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800af7e:	f7f6 f8cb 	bl	8001118 <HAL_UART_TxCpltCallback>
}
 800af82:	bf00      	nop
 800af84:	3740      	adds	r7, #64	; 0x40
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af96:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7ff ff7f 	bl	800ae9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af9e:	bf00      	nop
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b09c      	sub	sp, #112	; 0x70
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d172      	bne.n	800b0a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800afc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afc4:	2200      	movs	r2, #0
 800afc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	330c      	adds	r3, #12
 800afce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd2:	e853 3f00 	ldrex	r3, [r3]
 800afd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afde:	66bb      	str	r3, [r7, #104]	; 0x68
 800afe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	330c      	adds	r3, #12
 800afe6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afe8:	65ba      	str	r2, [r7, #88]	; 0x58
 800afea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aff0:	e841 2300 	strex	r3, r2, [r1]
 800aff4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1e5      	bne.n	800afc8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800affc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3314      	adds	r3, #20
 800b002:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	e853 3f00 	ldrex	r3, [r3]
 800b00a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00e:	f023 0301 	bic.w	r3, r3, #1
 800b012:	667b      	str	r3, [r7, #100]	; 0x64
 800b014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3314      	adds	r3, #20
 800b01a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b01c:	647a      	str	r2, [r7, #68]	; 0x44
 800b01e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b024:	e841 2300 	strex	r3, r2, [r1]
 800b028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e5      	bne.n	800affc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	3314      	adds	r3, #20
 800b036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	e853 3f00 	ldrex	r3, [r3]
 800b03e:	623b      	str	r3, [r7, #32]
   return(result);
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b046:	663b      	str	r3, [r7, #96]	; 0x60
 800b048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3314      	adds	r3, #20
 800b04e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b050:	633a      	str	r2, [r7, #48]	; 0x30
 800b052:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b058:	e841 2300 	strex	r3, r2, [r1]
 800b05c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1e5      	bne.n	800b030 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b066:	2220      	movs	r2, #32
 800b068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b070:	2b01      	cmp	r3, #1
 800b072:	d119      	bne.n	800b0a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	330c      	adds	r3, #12
 800b07a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	e853 3f00 	ldrex	r3, [r3]
 800b082:	60fb      	str	r3, [r7, #12]
   return(result);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 0310 	bic.w	r3, r3, #16
 800b08a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b08c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	330c      	adds	r3, #12
 800b092:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b094:	61fa      	str	r2, [r7, #28]
 800b096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b098:	69b9      	ldr	r1, [r7, #24]
 800b09a:	69fa      	ldr	r2, [r7, #28]
 800b09c:	e841 2300 	strex	r3, r2, [r1]
 800b0a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1e5      	bne.n	800b074 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d106      	bne.n	800b0be <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b0b8:	f7ff ff0e 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0bc:	e002      	b.n	800b0c4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b0be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b0c0:	f7f6 f846 	bl	8001150 <HAL_UART_RxCpltCallback>
}
 800b0c4:	bf00      	nop
 800b0c6:	3770      	adds	r7, #112	; 0x70
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d108      	bne.n	800b0f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0e6:	085b      	lsrs	r3, r3, #1
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f7ff fef3 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0f2:	e002      	b.n	800b0fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f7ff fedb 	bl	800aeb0 <HAL_UART_RxHalfCpltCallback>
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b10a:	2300      	movs	r3, #0
 800b10c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b11e:	2b80      	cmp	r3, #128	; 0x80
 800b120:	bf0c      	ite	eq
 800b122:	2301      	moveq	r3, #1
 800b124:	2300      	movne	r3, #0
 800b126:	b2db      	uxtb	r3, r3
 800b128:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b21      	cmp	r3, #33	; 0x21
 800b134:	d108      	bne.n	800b148 <UART_DMAError+0x46>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d005      	beq.n	800b148 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	2200      	movs	r2, #0
 800b140:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b142:	68b8      	ldr	r0, [r7, #8]
 800b144:	f000 f8c6 	bl	800b2d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b152:	2b40      	cmp	r3, #64	; 0x40
 800b154:	bf0c      	ite	eq
 800b156:	2301      	moveq	r3, #1
 800b158:	2300      	movne	r3, #0
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b22      	cmp	r3, #34	; 0x22
 800b168:	d108      	bne.n	800b17c <UART_DMAError+0x7a>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d005      	beq.n	800b17c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2200      	movs	r2, #0
 800b174:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b176:	68b8      	ldr	r0, [r7, #8]
 800b178:	f000 f8d4 	bl	800b324 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	f043 0210 	orr.w	r2, r3, #16
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b188:	68b8      	ldr	r0, [r7, #8]
 800b18a:	f7ff fe9b 	bl	800aec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b18e:	bf00      	nop
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b098      	sub	sp, #96	; 0x60
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	88fa      	ldrh	r2, [r7, #6]
 800b1b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2222      	movs	r2, #34	; 0x22
 800b1bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c4:	4a40      	ldr	r2, [pc, #256]	; (800b2c8 <UART_Start_Receive_DMA+0x130>)
 800b1c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1cc:	4a3f      	ldr	r2, [pc, #252]	; (800b2cc <UART_Start_Receive_DMA+0x134>)
 800b1ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d4:	4a3e      	ldr	r2, [pc, #248]	; (800b2d0 <UART_Start_Receive_DMA+0x138>)
 800b1d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1dc:	2200      	movs	r2, #0
 800b1de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b1e0:	f107 0308 	add.w	r3, r7, #8
 800b1e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	88fb      	ldrh	r3, [r7, #6]
 800b1f8:	f7fb fc9e 	bl	8006b38 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	613b      	str	r3, [r7, #16]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	613b      	str	r3, [r7, #16]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	613b      	str	r3, [r7, #16]
 800b210:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d019      	beq.n	800b256 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	330c      	adds	r3, #12
 800b228:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b238:	65bb      	str	r3, [r7, #88]	; 0x58
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	330c      	adds	r3, #12
 800b240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b242:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b244:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b246:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b24a:	e841 2300 	strex	r3, r2, [r1]
 800b24e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1e5      	bne.n	800b222 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3314      	adds	r3, #20
 800b25c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b260:	e853 3f00 	ldrex	r3, [r3]
 800b264:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	f043 0301 	orr.w	r3, r3, #1
 800b26c:	657b      	str	r3, [r7, #84]	; 0x54
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3314      	adds	r3, #20
 800b274:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b276:	63ba      	str	r2, [r7, #56]	; 0x38
 800b278:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b27c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b27e:	e841 2300 	strex	r3, r2, [r1]
 800b282:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1e5      	bne.n	800b256 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	3314      	adds	r3, #20
 800b290:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	e853 3f00 	ldrex	r3, [r3]
 800b298:	617b      	str	r3, [r7, #20]
   return(result);
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a0:	653b      	str	r3, [r7, #80]	; 0x50
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	3314      	adds	r3, #20
 800b2a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2aa:	627a      	str	r2, [r7, #36]	; 0x24
 800b2ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ae:	6a39      	ldr	r1, [r7, #32]
 800b2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b2:	e841 2300 	strex	r3, r2, [r1]
 800b2b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e5      	bne.n	800b28a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3760      	adds	r7, #96	; 0x60
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	0800afa7 	.word	0x0800afa7
 800b2cc:	0800b0cd 	.word	0x0800b0cd
 800b2d0:	0800b103 	.word	0x0800b103

0800b2d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b089      	sub	sp, #36	; 0x24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	330c      	adds	r3, #12
 800b2e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	e853 3f00 	ldrex	r3, [r3]
 800b2ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b2f2:	61fb      	str	r3, [r7, #28]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	330c      	adds	r3, #12
 800b2fa:	69fa      	ldr	r2, [r7, #28]
 800b2fc:	61ba      	str	r2, [r7, #24]
 800b2fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b300:	6979      	ldr	r1, [r7, #20]
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	e841 2300 	strex	r3, r2, [r1]
 800b308:	613b      	str	r3, [r7, #16]
   return(result);
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1e5      	bne.n	800b2dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2220      	movs	r2, #32
 800b314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b318:	bf00      	nop
 800b31a:	3724      	adds	r7, #36	; 0x24
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b324:	b480      	push	{r7}
 800b326:	b095      	sub	sp, #84	; 0x54
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	330c      	adds	r3, #12
 800b332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b336:	e853 3f00 	ldrex	r3, [r3]
 800b33a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b342:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	330c      	adds	r3, #12
 800b34a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b34c:	643a      	str	r2, [r7, #64]	; 0x40
 800b34e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b354:	e841 2300 	strex	r3, r2, [r1]
 800b358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e5      	bne.n	800b32c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3314      	adds	r3, #20
 800b366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	e853 3f00 	ldrex	r3, [r3]
 800b36e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	f023 0301 	bic.w	r3, r3, #1
 800b376:	64bb      	str	r3, [r7, #72]	; 0x48
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3314      	adds	r3, #20
 800b37e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b380:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b388:	e841 2300 	strex	r3, r2, [r1]
 800b38c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1e5      	bne.n	800b360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d119      	bne.n	800b3d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	330c      	adds	r3, #12
 800b3a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	e853 3f00 	ldrex	r3, [r3]
 800b3aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	f023 0310 	bic.w	r3, r3, #16
 800b3b2:	647b      	str	r3, [r7, #68]	; 0x44
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	330c      	adds	r3, #12
 800b3ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3bc:	61ba      	str	r2, [r7, #24]
 800b3be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c0:	6979      	ldr	r1, [r7, #20]
 800b3c2:	69ba      	ldr	r2, [r7, #24]
 800b3c4:	e841 2300 	strex	r3, r2, [r1]
 800b3c8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e5      	bne.n	800b39c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2220      	movs	r2, #32
 800b3d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b3de:	bf00      	nop
 800b3e0:	3754      	adds	r7, #84	; 0x54
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f7ff fd5d 	bl	800aec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b40a:	bf00      	nop
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b412:	b480      	push	{r7}
 800b414:	b085      	sub	sp, #20
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b21      	cmp	r3, #33	; 0x21
 800b424:	d13e      	bne.n	800b4a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b42e:	d114      	bne.n	800b45a <UART_Transmit_IT+0x48>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d110      	bne.n	800b45a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a1b      	ldr	r3, [r3, #32]
 800b43c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	461a      	mov	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b44c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	1c9a      	adds	r2, r3, #2
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	621a      	str	r2, [r3, #32]
 800b458:	e008      	b.n	800b46c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	1c59      	adds	r1, r3, #1
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	6211      	str	r1, [r2, #32]
 800b464:	781a      	ldrb	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b470:	b29b      	uxth	r3, r3
 800b472:	3b01      	subs	r3, #1
 800b474:	b29b      	uxth	r3, r3
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	4619      	mov	r1, r3
 800b47a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10f      	bne.n	800b4a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68da      	ldr	r2, [r3, #12]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b48e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68da      	ldr	r2, [r3, #12]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b49e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e000      	b.n	800b4a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4a4:	2302      	movs	r3, #2
  }
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b082      	sub	sp, #8
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68da      	ldr	r2, [r3, #12]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2220      	movs	r2, #32
 800b4ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7f5 fe20 	bl	8001118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b08c      	sub	sp, #48	; 0x30
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b22      	cmp	r3, #34	; 0x22
 800b4f4:	f040 80ab 	bne.w	800b64e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b500:	d117      	bne.n	800b532 <UART_Receive_IT+0x50>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d113      	bne.n	800b532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b50a:	2300      	movs	r3, #0
 800b50c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b512:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b520:	b29a      	uxth	r2, r3
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52a:	1c9a      	adds	r2, r3, #2
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	629a      	str	r2, [r3, #40]	; 0x28
 800b530:	e026      	b.n	800b580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b536:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b538:	2300      	movs	r3, #0
 800b53a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b544:	d007      	beq.n	800b556 <UART_Receive_IT+0x74>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10a      	bne.n	800b564 <UART_Receive_IT+0x82>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d106      	bne.n	800b564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	b2da      	uxtb	r2, r3
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b560:	701a      	strb	r2, [r3, #0]
 800b562:	e008      	b.n	800b576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b570:	b2da      	uxtb	r2, r3
 800b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57a:	1c5a      	adds	r2, r3, #1
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b584:	b29b      	uxth	r3, r3
 800b586:	3b01      	subs	r3, #1
 800b588:	b29b      	uxth	r3, r3
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	4619      	mov	r1, r3
 800b58e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b590:	2b00      	cmp	r3, #0
 800b592:	d15a      	bne.n	800b64a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f022 0220 	bic.w	r2, r2, #32
 800b5a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68da      	ldr	r2, [r3, #12]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	695a      	ldr	r2, [r3, #20]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f022 0201 	bic.w	r2, r2, #1
 800b5c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2220      	movs	r2, #32
 800b5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d135      	bne.n	800b640 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	330c      	adds	r3, #12
 800b5e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	e853 3f00 	ldrex	r3, [r3]
 800b5e8:	613b      	str	r3, [r7, #16]
   return(result);
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	f023 0310 	bic.w	r3, r3, #16
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	330c      	adds	r3, #12
 800b5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5fa:	623a      	str	r2, [r7, #32]
 800b5fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fe:	69f9      	ldr	r1, [r7, #28]
 800b600:	6a3a      	ldr	r2, [r7, #32]
 800b602:	e841 2300 	strex	r3, r2, [r1]
 800b606:	61bb      	str	r3, [r7, #24]
   return(result);
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1e5      	bne.n	800b5da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 0310 	and.w	r3, r3, #16
 800b618:	2b10      	cmp	r3, #16
 800b61a:	d10a      	bne.n	800b632 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b61c:	2300      	movs	r3, #0
 800b61e:	60fb      	str	r3, [r7, #12]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	60fb      	str	r3, [r7, #12]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7ff fc4d 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
 800b63e:	e002      	b.n	800b646 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7f5 fd85 	bl	8001150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	e002      	b.n	800b650 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b64a:	2300      	movs	r3, #0
 800b64c:	e000      	b.n	800b650 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b64e:	2302      	movs	r3, #2
  }
}
 800b650:	4618      	mov	r0, r3
 800b652:	3730      	adds	r7, #48	; 0x30
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b65c:	b0c0      	sub	sp, #256	; 0x100
 800b65e:	af00      	add	r7, sp, #0
 800b660:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b674:	68d9      	ldr	r1, [r3, #12]
 800b676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	ea40 0301 	orr.w	r3, r0, r1
 800b680:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b686:	689a      	ldr	r2, [r3, #8]
 800b688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	431a      	orrs	r2, r3
 800b690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	431a      	orrs	r2, r3
 800b698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b6b0:	f021 010c 	bic.w	r1, r1, #12
 800b6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6be:	430b      	orrs	r3, r1
 800b6c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d2:	6999      	ldr	r1, [r3, #24]
 800b6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	ea40 0301 	orr.w	r3, r0, r1
 800b6de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4b8f      	ldr	r3, [pc, #572]	; (800b924 <UART_SetConfig+0x2cc>)
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d005      	beq.n	800b6f8 <UART_SetConfig+0xa0>
 800b6ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	4b8d      	ldr	r3, [pc, #564]	; (800b928 <UART_SetConfig+0x2d0>)
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d104      	bne.n	800b702 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b6f8:	f7fd f9f0 	bl	8008adc <HAL_RCC_GetPCLK2Freq>
 800b6fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b700:	e003      	b.n	800b70a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b702:	f7fd f9d7 	bl	8008ab4 <HAL_RCC_GetPCLK1Freq>
 800b706:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b70a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b714:	f040 810c 	bne.w	800b930 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b71c:	2200      	movs	r2, #0
 800b71e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b722:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b726:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b72a:	4622      	mov	r2, r4
 800b72c:	462b      	mov	r3, r5
 800b72e:	1891      	adds	r1, r2, r2
 800b730:	65b9      	str	r1, [r7, #88]	; 0x58
 800b732:	415b      	adcs	r3, r3
 800b734:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b736:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b73a:	4621      	mov	r1, r4
 800b73c:	eb12 0801 	adds.w	r8, r2, r1
 800b740:	4629      	mov	r1, r5
 800b742:	eb43 0901 	adc.w	r9, r3, r1
 800b746:	f04f 0200 	mov.w	r2, #0
 800b74a:	f04f 0300 	mov.w	r3, #0
 800b74e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b75a:	4690      	mov	r8, r2
 800b75c:	4699      	mov	r9, r3
 800b75e:	4623      	mov	r3, r4
 800b760:	eb18 0303 	adds.w	r3, r8, r3
 800b764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b768:	462b      	mov	r3, r5
 800b76a:	eb49 0303 	adc.w	r3, r9, r3
 800b76e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b77e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b782:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b786:	460b      	mov	r3, r1
 800b788:	18db      	adds	r3, r3, r3
 800b78a:	653b      	str	r3, [r7, #80]	; 0x50
 800b78c:	4613      	mov	r3, r2
 800b78e:	eb42 0303 	adc.w	r3, r2, r3
 800b792:	657b      	str	r3, [r7, #84]	; 0x54
 800b794:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b798:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b79c:	f7f5 f9d6 	bl	8000b4c <__aeabi_uldivmod>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4b61      	ldr	r3, [pc, #388]	; (800b92c <UART_SetConfig+0x2d4>)
 800b7a6:	fba3 2302 	umull	r2, r3, r3, r2
 800b7aa:	095b      	lsrs	r3, r3, #5
 800b7ac:	011c      	lsls	r4, r3, #4
 800b7ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b7bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b7c0:	4642      	mov	r2, r8
 800b7c2:	464b      	mov	r3, r9
 800b7c4:	1891      	adds	r1, r2, r2
 800b7c6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b7c8:	415b      	adcs	r3, r3
 800b7ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b7d0:	4641      	mov	r1, r8
 800b7d2:	eb12 0a01 	adds.w	sl, r2, r1
 800b7d6:	4649      	mov	r1, r9
 800b7d8:	eb43 0b01 	adc.w	fp, r3, r1
 800b7dc:	f04f 0200 	mov.w	r2, #0
 800b7e0:	f04f 0300 	mov.w	r3, #0
 800b7e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7f0:	4692      	mov	sl, r2
 800b7f2:	469b      	mov	fp, r3
 800b7f4:	4643      	mov	r3, r8
 800b7f6:	eb1a 0303 	adds.w	r3, sl, r3
 800b7fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7fe:	464b      	mov	r3, r9
 800b800:	eb4b 0303 	adc.w	r3, fp, r3
 800b804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b814:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b818:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b81c:	460b      	mov	r3, r1
 800b81e:	18db      	adds	r3, r3, r3
 800b820:	643b      	str	r3, [r7, #64]	; 0x40
 800b822:	4613      	mov	r3, r2
 800b824:	eb42 0303 	adc.w	r3, r2, r3
 800b828:	647b      	str	r3, [r7, #68]	; 0x44
 800b82a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b82e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b832:	f7f5 f98b 	bl	8000b4c <__aeabi_uldivmod>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	4611      	mov	r1, r2
 800b83c:	4b3b      	ldr	r3, [pc, #236]	; (800b92c <UART_SetConfig+0x2d4>)
 800b83e:	fba3 2301 	umull	r2, r3, r3, r1
 800b842:	095b      	lsrs	r3, r3, #5
 800b844:	2264      	movs	r2, #100	; 0x64
 800b846:	fb02 f303 	mul.w	r3, r2, r3
 800b84a:	1acb      	subs	r3, r1, r3
 800b84c:	00db      	lsls	r3, r3, #3
 800b84e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b852:	4b36      	ldr	r3, [pc, #216]	; (800b92c <UART_SetConfig+0x2d4>)
 800b854:	fba3 2302 	umull	r2, r3, r3, r2
 800b858:	095b      	lsrs	r3, r3, #5
 800b85a:	005b      	lsls	r3, r3, #1
 800b85c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b860:	441c      	add	r4, r3
 800b862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b866:	2200      	movs	r2, #0
 800b868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b86c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b870:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b874:	4642      	mov	r2, r8
 800b876:	464b      	mov	r3, r9
 800b878:	1891      	adds	r1, r2, r2
 800b87a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b87c:	415b      	adcs	r3, r3
 800b87e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b884:	4641      	mov	r1, r8
 800b886:	1851      	adds	r1, r2, r1
 800b888:	6339      	str	r1, [r7, #48]	; 0x30
 800b88a:	4649      	mov	r1, r9
 800b88c:	414b      	adcs	r3, r1
 800b88e:	637b      	str	r3, [r7, #52]	; 0x34
 800b890:	f04f 0200 	mov.w	r2, #0
 800b894:	f04f 0300 	mov.w	r3, #0
 800b898:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b89c:	4659      	mov	r1, fp
 800b89e:	00cb      	lsls	r3, r1, #3
 800b8a0:	4651      	mov	r1, sl
 800b8a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8a6:	4651      	mov	r1, sl
 800b8a8:	00ca      	lsls	r2, r1, #3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	4642      	mov	r2, r8
 800b8b2:	189b      	adds	r3, r3, r2
 800b8b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8b8:	464b      	mov	r3, r9
 800b8ba:	460a      	mov	r2, r1
 800b8bc:	eb42 0303 	adc.w	r3, r2, r3
 800b8c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b8d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b8d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b8d8:	460b      	mov	r3, r1
 800b8da:	18db      	adds	r3, r3, r3
 800b8dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8de:	4613      	mov	r3, r2
 800b8e0:	eb42 0303 	adc.w	r3, r2, r3
 800b8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b8ee:	f7f5 f92d 	bl	8000b4c <__aeabi_uldivmod>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4b0d      	ldr	r3, [pc, #52]	; (800b92c <UART_SetConfig+0x2d4>)
 800b8f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b8fc:	095b      	lsrs	r3, r3, #5
 800b8fe:	2164      	movs	r1, #100	; 0x64
 800b900:	fb01 f303 	mul.w	r3, r1, r3
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	3332      	adds	r3, #50	; 0x32
 800b90a:	4a08      	ldr	r2, [pc, #32]	; (800b92c <UART_SetConfig+0x2d4>)
 800b90c:	fba2 2303 	umull	r2, r3, r2, r3
 800b910:	095b      	lsrs	r3, r3, #5
 800b912:	f003 0207 	and.w	r2, r3, #7
 800b916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4422      	add	r2, r4
 800b91e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b920:	e105      	b.n	800bb2e <UART_SetConfig+0x4d6>
 800b922:	bf00      	nop
 800b924:	40011000 	.word	0x40011000
 800b928:	40011400 	.word	0x40011400
 800b92c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b934:	2200      	movs	r2, #0
 800b936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b93a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b93e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b942:	4642      	mov	r2, r8
 800b944:	464b      	mov	r3, r9
 800b946:	1891      	adds	r1, r2, r2
 800b948:	6239      	str	r1, [r7, #32]
 800b94a:	415b      	adcs	r3, r3
 800b94c:	627b      	str	r3, [r7, #36]	; 0x24
 800b94e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b952:	4641      	mov	r1, r8
 800b954:	1854      	adds	r4, r2, r1
 800b956:	4649      	mov	r1, r9
 800b958:	eb43 0501 	adc.w	r5, r3, r1
 800b95c:	f04f 0200 	mov.w	r2, #0
 800b960:	f04f 0300 	mov.w	r3, #0
 800b964:	00eb      	lsls	r3, r5, #3
 800b966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b96a:	00e2      	lsls	r2, r4, #3
 800b96c:	4614      	mov	r4, r2
 800b96e:	461d      	mov	r5, r3
 800b970:	4643      	mov	r3, r8
 800b972:	18e3      	adds	r3, r4, r3
 800b974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b978:	464b      	mov	r3, r9
 800b97a:	eb45 0303 	adc.w	r3, r5, r3
 800b97e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b98e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b992:	f04f 0200 	mov.w	r2, #0
 800b996:	f04f 0300 	mov.w	r3, #0
 800b99a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b99e:	4629      	mov	r1, r5
 800b9a0:	008b      	lsls	r3, r1, #2
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	008a      	lsls	r2, r1, #2
 800b9ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b9b0:	f7f5 f8cc 	bl	8000b4c <__aeabi_uldivmod>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	4b60      	ldr	r3, [pc, #384]	; (800bb3c <UART_SetConfig+0x4e4>)
 800b9ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b9be:	095b      	lsrs	r3, r3, #5
 800b9c0:	011c      	lsls	r4, r3, #4
 800b9c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b9d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b9d4:	4642      	mov	r2, r8
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	1891      	adds	r1, r2, r2
 800b9da:	61b9      	str	r1, [r7, #24]
 800b9dc:	415b      	adcs	r3, r3
 800b9de:	61fb      	str	r3, [r7, #28]
 800b9e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9e4:	4641      	mov	r1, r8
 800b9e6:	1851      	adds	r1, r2, r1
 800b9e8:	6139      	str	r1, [r7, #16]
 800b9ea:	4649      	mov	r1, r9
 800b9ec:	414b      	adcs	r3, r1
 800b9ee:	617b      	str	r3, [r7, #20]
 800b9f0:	f04f 0200 	mov.w	r2, #0
 800b9f4:	f04f 0300 	mov.w	r3, #0
 800b9f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b9fc:	4659      	mov	r1, fp
 800b9fe:	00cb      	lsls	r3, r1, #3
 800ba00:	4651      	mov	r1, sl
 800ba02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba06:	4651      	mov	r1, sl
 800ba08:	00ca      	lsls	r2, r1, #3
 800ba0a:	4610      	mov	r0, r2
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4603      	mov	r3, r0
 800ba10:	4642      	mov	r2, r8
 800ba12:	189b      	adds	r3, r3, r2
 800ba14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba18:	464b      	mov	r3, r9
 800ba1a:	460a      	mov	r2, r1
 800ba1c:	eb42 0303 	adc.w	r3, r2, r3
 800ba20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ba30:	f04f 0200 	mov.w	r2, #0
 800ba34:	f04f 0300 	mov.w	r3, #0
 800ba38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba3c:	4649      	mov	r1, r9
 800ba3e:	008b      	lsls	r3, r1, #2
 800ba40:	4641      	mov	r1, r8
 800ba42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba46:	4641      	mov	r1, r8
 800ba48:	008a      	lsls	r2, r1, #2
 800ba4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba4e:	f7f5 f87d 	bl	8000b4c <__aeabi_uldivmod>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4b39      	ldr	r3, [pc, #228]	; (800bb3c <UART_SetConfig+0x4e4>)
 800ba58:	fba3 1302 	umull	r1, r3, r3, r2
 800ba5c:	095b      	lsrs	r3, r3, #5
 800ba5e:	2164      	movs	r1, #100	; 0x64
 800ba60:	fb01 f303 	mul.w	r3, r1, r3
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	011b      	lsls	r3, r3, #4
 800ba68:	3332      	adds	r3, #50	; 0x32
 800ba6a:	4a34      	ldr	r2, [pc, #208]	; (800bb3c <UART_SetConfig+0x4e4>)
 800ba6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba70:	095b      	lsrs	r3, r3, #5
 800ba72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba76:	441c      	add	r4, r3
 800ba78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	673b      	str	r3, [r7, #112]	; 0x70
 800ba80:	677a      	str	r2, [r7, #116]	; 0x74
 800ba82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ba86:	4642      	mov	r2, r8
 800ba88:	464b      	mov	r3, r9
 800ba8a:	1891      	adds	r1, r2, r2
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	415b      	adcs	r3, r3
 800ba90:	60fb      	str	r3, [r7, #12]
 800ba92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba96:	4641      	mov	r1, r8
 800ba98:	1851      	adds	r1, r2, r1
 800ba9a:	6039      	str	r1, [r7, #0]
 800ba9c:	4649      	mov	r1, r9
 800ba9e:	414b      	adcs	r3, r1
 800baa0:	607b      	str	r3, [r7, #4]
 800baa2:	f04f 0200 	mov.w	r2, #0
 800baa6:	f04f 0300 	mov.w	r3, #0
 800baaa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800baae:	4659      	mov	r1, fp
 800bab0:	00cb      	lsls	r3, r1, #3
 800bab2:	4651      	mov	r1, sl
 800bab4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bab8:	4651      	mov	r1, sl
 800baba:	00ca      	lsls	r2, r1, #3
 800babc:	4610      	mov	r0, r2
 800babe:	4619      	mov	r1, r3
 800bac0:	4603      	mov	r3, r0
 800bac2:	4642      	mov	r2, r8
 800bac4:	189b      	adds	r3, r3, r2
 800bac6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bac8:	464b      	mov	r3, r9
 800baca:	460a      	mov	r2, r1
 800bacc:	eb42 0303 	adc.w	r3, r2, r3
 800bad0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	663b      	str	r3, [r7, #96]	; 0x60
 800badc:	667a      	str	r2, [r7, #100]	; 0x64
 800bade:	f04f 0200 	mov.w	r2, #0
 800bae2:	f04f 0300 	mov.w	r3, #0
 800bae6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800baea:	4649      	mov	r1, r9
 800baec:	008b      	lsls	r3, r1, #2
 800baee:	4641      	mov	r1, r8
 800baf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800baf4:	4641      	mov	r1, r8
 800baf6:	008a      	lsls	r2, r1, #2
 800baf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bafc:	f7f5 f826 	bl	8000b4c <__aeabi_uldivmod>
 800bb00:	4602      	mov	r2, r0
 800bb02:	460b      	mov	r3, r1
 800bb04:	4b0d      	ldr	r3, [pc, #52]	; (800bb3c <UART_SetConfig+0x4e4>)
 800bb06:	fba3 1302 	umull	r1, r3, r3, r2
 800bb0a:	095b      	lsrs	r3, r3, #5
 800bb0c:	2164      	movs	r1, #100	; 0x64
 800bb0e:	fb01 f303 	mul.w	r3, r1, r3
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	011b      	lsls	r3, r3, #4
 800bb16:	3332      	adds	r3, #50	; 0x32
 800bb18:	4a08      	ldr	r2, [pc, #32]	; (800bb3c <UART_SetConfig+0x4e4>)
 800bb1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb1e:	095b      	lsrs	r3, r3, #5
 800bb20:	f003 020f 	and.w	r2, r3, #15
 800bb24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4422      	add	r2, r4
 800bb2c:	609a      	str	r2, [r3, #8]
}
 800bb2e:	bf00      	nop
 800bb30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb34:	46bd      	mov	sp, r7
 800bb36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb3a:	bf00      	nop
 800bb3c:	51eb851f 	.word	0x51eb851f

0800bb40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb40:	b084      	sub	sp, #16
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	f107 001c 	add.w	r0, r7, #28
 800bb4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d122      	bne.n	800bb9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bb6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bb80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d105      	bne.n	800bb92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 faa2 	bl	800c0dc <USB_CoreReset>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]
 800bb9c:	e01a      	b.n	800bbd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fa96 	bl	800c0dc <USB_CoreReset>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bbb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d106      	bne.n	800bbc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	639a      	str	r2, [r3, #56]	; 0x38
 800bbc6:	e005      	b.n	800bbd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d10b      	bne.n	800bbf2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f043 0206 	orr.w	r2, r3, #6
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	f043 0220 	orr.w	r2, r3, #32
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbfe:	b004      	add	sp, #16
 800bc00:	4770      	bx	lr

0800bc02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc02:	b480      	push	{r7}
 800bc04:	b083      	sub	sp, #12
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	f023 0201 	bic.w	r2, r3, #1
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bc40:	78fb      	ldrb	r3, [r7, #3]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d115      	bne.n	800bc72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc52:	2001      	movs	r0, #1
 800bc54:	f7fa f96a 	bl	8005f2c <HAL_Delay>
      ms++;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fa2e 	bl	800c0c0 <USB_GetMode>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d01e      	beq.n	800bca8 <USB_SetCurrentMode+0x84>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2b31      	cmp	r3, #49	; 0x31
 800bc6e:	d9f0      	bls.n	800bc52 <USB_SetCurrentMode+0x2e>
 800bc70:	e01a      	b.n	800bca8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bc72:	78fb      	ldrb	r3, [r7, #3]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d115      	bne.n	800bca4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bc84:	2001      	movs	r0, #1
 800bc86:	f7fa f951 	bl	8005f2c <HAL_Delay>
      ms++;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fa15 	bl	800c0c0 <USB_GetMode>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d005      	beq.n	800bca8 <USB_SetCurrentMode+0x84>
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2b31      	cmp	r3, #49	; 0x31
 800bca0:	d9f0      	bls.n	800bc84 <USB_SetCurrentMode+0x60>
 800bca2:	e001      	b.n	800bca8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	e005      	b.n	800bcb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b32      	cmp	r3, #50	; 0x32
 800bcac:	d101      	bne.n	800bcb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e000      	b.n	800bcb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b086      	sub	sp, #24
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bcca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	613b      	str	r3, [r7, #16]
 800bcda:	e009      	b.n	800bcf0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	3340      	adds	r3, #64	; 0x40
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	2200      	movs	r2, #0
 800bce8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	3301      	adds	r3, #1
 800bcee:	613b      	str	r3, [r7, #16]
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	2b0e      	cmp	r3, #14
 800bcf4:	d9f2      	bls.n	800bcdc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bcf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d11c      	bne.n	800bd36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd0a:	f043 0302 	orr.w	r3, r3, #2
 800bd0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	639a      	str	r2, [r3, #56]	; 0x38
 800bd34:	e00b      	b.n	800bd4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd54:	461a      	mov	r2, r3
 800bd56:	2300      	movs	r3, #0
 800bd58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd60:	4619      	mov	r1, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd68:	461a      	mov	r2, r3
 800bd6a:	680b      	ldr	r3, [r1, #0]
 800bd6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d10c      	bne.n	800bd8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d104      	bne.n	800bd84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 f965 	bl	800c04c <USB_SetDevSpeed>
 800bd82:	e008      	b.n	800bd96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bd84:	2101      	movs	r1, #1
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 f960 	bl	800c04c <USB_SetDevSpeed>
 800bd8c:	e003      	b.n	800bd96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bd8e:	2103      	movs	r1, #3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 f95b 	bl	800c04c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bd96:	2110      	movs	r1, #16
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 f8f3 	bl	800bf84 <USB_FlushTxFifo>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d001      	beq.n	800bda8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 f91f 	bl	800bfec <USB_FlushRxFifo>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdca:	461a      	mov	r2, r3
 800bdcc:	2300      	movs	r3, #0
 800bdce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	2300      	movs	r3, #0
 800bdda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bddc:	2300      	movs	r3, #0
 800bdde:	613b      	str	r3, [r7, #16]
 800bde0:	e043      	b.n	800be6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	015a      	lsls	r2, r3, #5
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	4413      	add	r3, r2
 800bdea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdf8:	d118      	bne.n	800be2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10a      	bne.n	800be16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	015a      	lsls	r2, r3, #5
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	4413      	add	r3, r2
 800be08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be0c:	461a      	mov	r2, r3
 800be0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	e013      	b.n	800be3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	015a      	lsls	r2, r3, #5
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	4413      	add	r3, r2
 800be1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be22:	461a      	mov	r2, r3
 800be24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	e008      	b.n	800be3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be38:	461a      	mov	r2, r3
 800be3a:	2300      	movs	r3, #0
 800be3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	015a      	lsls	r2, r3, #5
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	4413      	add	r3, r2
 800be46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be4a:	461a      	mov	r2, r3
 800be4c:	2300      	movs	r3, #0
 800be4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	015a      	lsls	r2, r3, #5
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	4413      	add	r3, r2
 800be58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be5c:	461a      	mov	r2, r3
 800be5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	3301      	adds	r3, #1
 800be68:	613b      	str	r3, [r7, #16]
 800be6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d3b7      	bcc.n	800bde2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be72:	2300      	movs	r3, #0
 800be74:	613b      	str	r3, [r7, #16]
 800be76:	e043      	b.n	800bf00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be8e:	d118      	bne.n	800bec2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10a      	bne.n	800beac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	015a      	lsls	r2, r3, #5
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	4413      	add	r3, r2
 800be9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea2:	461a      	mov	r2, r3
 800bea4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bea8:	6013      	str	r3, [r2, #0]
 800beaa:	e013      	b.n	800bed4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	015a      	lsls	r2, r3, #5
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	4413      	add	r3, r2
 800beb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb8:	461a      	mov	r2, r3
 800beba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bebe:	6013      	str	r3, [r2, #0]
 800bec0:	e008      	b.n	800bed4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bece:	461a      	mov	r2, r3
 800bed0:	2300      	movs	r3, #0
 800bed2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee0:	461a      	mov	r2, r3
 800bee2:	2300      	movs	r3, #0
 800bee4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	4413      	add	r3, r2
 800beee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef2:	461a      	mov	r2, r3
 800bef4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bef8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	3301      	adds	r3, #1
 800befe:	613b      	str	r3, [r7, #16]
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d3b7      	bcc.n	800be78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bf28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d105      	bne.n	800bf3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	f043 0210 	orr.w	r2, r3, #16
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	699a      	ldr	r2, [r3, #24]
 800bf40:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <USB_DevInit+0x2c4>)
 800bf42:	4313      	orrs	r3, r2
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bf48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d005      	beq.n	800bf5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	699b      	ldr	r3, [r3, #24]
 800bf52:	f043 0208 	orr.w	r2, r3, #8
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bf5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d107      	bne.n	800bf70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf68:	f043 0304 	orr.w	r3, r3, #4
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf7c:	b004      	add	sp, #16
 800bf7e:	4770      	bx	lr
 800bf80:	803c3800 	.word	0x803c3800

0800bf84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	3301      	adds	r3, #1
 800bf96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4a13      	ldr	r2, [pc, #76]	; (800bfe8 <USB_FlushTxFifo+0x64>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d901      	bls.n	800bfa4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e01b      	b.n	800bfdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	daf2      	bge.n	800bf92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	019b      	lsls	r3, r3, #6
 800bfb4:	f043 0220 	orr.w	r2, r3, #32
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	4a08      	ldr	r2, [pc, #32]	; (800bfe8 <USB_FlushTxFifo+0x64>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d901      	bls.n	800bfce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	e006      	b.n	800bfdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	f003 0320 	and.w	r3, r3, #32
 800bfd6:	2b20      	cmp	r3, #32
 800bfd8:	d0f0      	beq.n	800bfbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3714      	adds	r7, #20
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	00030d40 	.word	0x00030d40

0800bfec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bff4:	2300      	movs	r3, #0
 800bff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	3301      	adds	r3, #1
 800bffc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	4a11      	ldr	r2, [pc, #68]	; (800c048 <USB_FlushRxFifo+0x5c>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d901      	bls.n	800c00a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e018      	b.n	800c03c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	daf2      	bge.n	800bff8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c012:	2300      	movs	r3, #0
 800c014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2210      	movs	r2, #16
 800c01a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	3301      	adds	r3, #1
 800c020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	4a08      	ldr	r2, [pc, #32]	; (800c048 <USB_FlushRxFifo+0x5c>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d901      	bls.n	800c02e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e006      	b.n	800c03c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	f003 0310 	and.w	r3, r3, #16
 800c036:	2b10      	cmp	r3, #16
 800c038:	d0f0      	beq.n	800c01c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	00030d40 	.word	0x00030d40

0800c04c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	78fb      	ldrb	r3, [r7, #3]
 800c066:	68f9      	ldr	r1, [r7, #12]
 800c068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c06c:	4313      	orrs	r3, r2
 800c06e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr

0800c07e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c07e:	b480      	push	{r7}
 800c080:	b085      	sub	sp, #20
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c098:	f023 0303 	bic.w	r3, r3, #3
 800c09c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0ac:	f043 0302 	orr.w	r3, r3, #2
 800c0b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	f003 0301 	and.w	r3, r3, #1
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	4a13      	ldr	r2, [pc, #76]	; (800c140 <USB_CoreReset+0x64>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d901      	bls.n	800c0fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	e01b      	b.n	800c132 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	daf2      	bge.n	800c0e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c102:	2300      	movs	r3, #0
 800c104:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	f043 0201 	orr.w	r2, r3, #1
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3301      	adds	r3, #1
 800c116:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4a09      	ldr	r2, [pc, #36]	; (800c140 <USB_CoreReset+0x64>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d901      	bls.n	800c124 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c120:	2303      	movs	r3, #3
 800c122:	e006      	b.n	800c132 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	f003 0301 	and.w	r3, r3, #1
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d0f0      	beq.n	800c112 <USB_CoreReset+0x36>

  return HAL_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3714      	adds	r7, #20
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	00030d40 	.word	0x00030d40

0800c144 <__cxa_pure_virtual>:
 800c144:	b508      	push	{r3, lr}
 800c146:	f000 f80d 	bl	800c164 <_ZSt9terminatev>

0800c14a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c14a:	b508      	push	{r3, lr}
 800c14c:	4780      	blx	r0
 800c14e:	f000 fd6b 	bl	800cc28 <abort>
	...

0800c154 <_ZSt13get_terminatev>:
 800c154:	4b02      	ldr	r3, [pc, #8]	; (800c160 <_ZSt13get_terminatev+0xc>)
 800c156:	6818      	ldr	r0, [r3, #0]
 800c158:	f3bf 8f5b 	dmb	ish
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	20000014 	.word	0x20000014

0800c164 <_ZSt9terminatev>:
 800c164:	b508      	push	{r3, lr}
 800c166:	f7ff fff5 	bl	800c154 <_ZSt13get_terminatev>
 800c16a:	f7ff ffee 	bl	800c14a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800c170 <sinf>:
 800c170:	ee10 3a10 	vmov	r3, s0
 800c174:	b507      	push	{r0, r1, r2, lr}
 800c176:	4a1f      	ldr	r2, [pc, #124]	; (800c1f4 <sinf+0x84>)
 800c178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c17c:	4293      	cmp	r3, r2
 800c17e:	dc07      	bgt.n	800c190 <sinf+0x20>
 800c180:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800c1f8 <sinf+0x88>
 800c184:	2000      	movs	r0, #0
 800c186:	b003      	add	sp, #12
 800c188:	f85d eb04 	ldr.w	lr, [sp], #4
 800c18c:	f000 bc48 	b.w	800ca20 <__kernel_sinf>
 800c190:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c194:	db04      	blt.n	800c1a0 <sinf+0x30>
 800c196:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c19a:	b003      	add	sp, #12
 800c19c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1a0:	4668      	mov	r0, sp
 800c1a2:	f000 f82b 	bl	800c1fc <__ieee754_rem_pio2f>
 800c1a6:	f000 0003 	and.w	r0, r0, #3
 800c1aa:	2801      	cmp	r0, #1
 800c1ac:	d00a      	beq.n	800c1c4 <sinf+0x54>
 800c1ae:	2802      	cmp	r0, #2
 800c1b0:	d00f      	beq.n	800c1d2 <sinf+0x62>
 800c1b2:	b9c0      	cbnz	r0, 800c1e6 <sinf+0x76>
 800c1b4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c1b8:	ed9d 0a00 	vldr	s0, [sp]
 800c1bc:	2001      	movs	r0, #1
 800c1be:	f000 fc2f 	bl	800ca20 <__kernel_sinf>
 800c1c2:	e7ea      	b.n	800c19a <sinf+0x2a>
 800c1c4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c1c8:	ed9d 0a00 	vldr	s0, [sp]
 800c1cc:	f000 f952 	bl	800c474 <__kernel_cosf>
 800c1d0:	e7e3      	b.n	800c19a <sinf+0x2a>
 800c1d2:	eddd 0a01 	vldr	s1, [sp, #4]
 800c1d6:	ed9d 0a00 	vldr	s0, [sp]
 800c1da:	2001      	movs	r0, #1
 800c1dc:	f000 fc20 	bl	800ca20 <__kernel_sinf>
 800c1e0:	eeb1 0a40 	vneg.f32	s0, s0
 800c1e4:	e7d9      	b.n	800c19a <sinf+0x2a>
 800c1e6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c1ea:	ed9d 0a00 	vldr	s0, [sp]
 800c1ee:	f000 f941 	bl	800c474 <__kernel_cosf>
 800c1f2:	e7f5      	b.n	800c1e0 <sinf+0x70>
 800c1f4:	3f490fd8 	.word	0x3f490fd8
 800c1f8:	00000000 	.word	0x00000000

0800c1fc <__ieee754_rem_pio2f>:
 800c1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1fe:	ee10 6a10 	vmov	r6, s0
 800c202:	4b8e      	ldr	r3, [pc, #568]	; (800c43c <__ieee754_rem_pio2f+0x240>)
 800c204:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c208:	429d      	cmp	r5, r3
 800c20a:	b087      	sub	sp, #28
 800c20c:	eef0 7a40 	vmov.f32	s15, s0
 800c210:	4604      	mov	r4, r0
 800c212:	dc05      	bgt.n	800c220 <__ieee754_rem_pio2f+0x24>
 800c214:	2300      	movs	r3, #0
 800c216:	ed80 0a00 	vstr	s0, [r0]
 800c21a:	6043      	str	r3, [r0, #4]
 800c21c:	2000      	movs	r0, #0
 800c21e:	e01a      	b.n	800c256 <__ieee754_rem_pio2f+0x5a>
 800c220:	4b87      	ldr	r3, [pc, #540]	; (800c440 <__ieee754_rem_pio2f+0x244>)
 800c222:	429d      	cmp	r5, r3
 800c224:	dc46      	bgt.n	800c2b4 <__ieee754_rem_pio2f+0xb8>
 800c226:	2e00      	cmp	r6, #0
 800c228:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c444 <__ieee754_rem_pio2f+0x248>
 800c22c:	4b86      	ldr	r3, [pc, #536]	; (800c448 <__ieee754_rem_pio2f+0x24c>)
 800c22e:	f025 050f 	bic.w	r5, r5, #15
 800c232:	dd1f      	ble.n	800c274 <__ieee754_rem_pio2f+0x78>
 800c234:	429d      	cmp	r5, r3
 800c236:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c23a:	d00e      	beq.n	800c25a <__ieee754_rem_pio2f+0x5e>
 800c23c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c44c <__ieee754_rem_pio2f+0x250>
 800c240:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c244:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c248:	ed80 0a00 	vstr	s0, [r0]
 800c24c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c250:	2001      	movs	r0, #1
 800c252:	edc4 7a01 	vstr	s15, [r4, #4]
 800c256:	b007      	add	sp, #28
 800c258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c25a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c450 <__ieee754_rem_pio2f+0x254>
 800c25e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c454 <__ieee754_rem_pio2f+0x258>
 800c262:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c266:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c26a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c26e:	edc0 6a00 	vstr	s13, [r0]
 800c272:	e7eb      	b.n	800c24c <__ieee754_rem_pio2f+0x50>
 800c274:	429d      	cmp	r5, r3
 800c276:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c27a:	d00e      	beq.n	800c29a <__ieee754_rem_pio2f+0x9e>
 800c27c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c44c <__ieee754_rem_pio2f+0x250>
 800c280:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c284:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c288:	ed80 0a00 	vstr	s0, [r0]
 800c28c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c290:	f04f 30ff 	mov.w	r0, #4294967295
 800c294:	edc4 7a01 	vstr	s15, [r4, #4]
 800c298:	e7dd      	b.n	800c256 <__ieee754_rem_pio2f+0x5a>
 800c29a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c450 <__ieee754_rem_pio2f+0x254>
 800c29e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c454 <__ieee754_rem_pio2f+0x258>
 800c2a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c2a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c2aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c2ae:	edc0 6a00 	vstr	s13, [r0]
 800c2b2:	e7eb      	b.n	800c28c <__ieee754_rem_pio2f+0x90>
 800c2b4:	4b68      	ldr	r3, [pc, #416]	; (800c458 <__ieee754_rem_pio2f+0x25c>)
 800c2b6:	429d      	cmp	r5, r3
 800c2b8:	dc72      	bgt.n	800c3a0 <__ieee754_rem_pio2f+0x1a4>
 800c2ba:	f000 fbf9 	bl	800cab0 <fabsf>
 800c2be:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c45c <__ieee754_rem_pio2f+0x260>
 800c2c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c2c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c2ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2d2:	ee17 0a90 	vmov	r0, s15
 800c2d6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c444 <__ieee754_rem_pio2f+0x248>
 800c2da:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c2de:	281f      	cmp	r0, #31
 800c2e0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c44c <__ieee754_rem_pio2f+0x250>
 800c2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2e8:	eeb1 6a47 	vneg.f32	s12, s14
 800c2ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c2f0:	ee16 2a90 	vmov	r2, s13
 800c2f4:	dc1c      	bgt.n	800c330 <__ieee754_rem_pio2f+0x134>
 800c2f6:	495a      	ldr	r1, [pc, #360]	; (800c460 <__ieee754_rem_pio2f+0x264>)
 800c2f8:	1e47      	subs	r7, r0, #1
 800c2fa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c2fe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c302:	428b      	cmp	r3, r1
 800c304:	d014      	beq.n	800c330 <__ieee754_rem_pio2f+0x134>
 800c306:	6022      	str	r2, [r4, #0]
 800c308:	ed94 7a00 	vldr	s14, [r4]
 800c30c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c310:	2e00      	cmp	r6, #0
 800c312:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c316:	ed84 0a01 	vstr	s0, [r4, #4]
 800c31a:	da9c      	bge.n	800c256 <__ieee754_rem_pio2f+0x5a>
 800c31c:	eeb1 7a47 	vneg.f32	s14, s14
 800c320:	eeb1 0a40 	vneg.f32	s0, s0
 800c324:	ed84 7a00 	vstr	s14, [r4]
 800c328:	ed84 0a01 	vstr	s0, [r4, #4]
 800c32c:	4240      	negs	r0, r0
 800c32e:	e792      	b.n	800c256 <__ieee754_rem_pio2f+0x5a>
 800c330:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c334:	15eb      	asrs	r3, r5, #23
 800c336:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800c33a:	2d08      	cmp	r5, #8
 800c33c:	dde3      	ble.n	800c306 <__ieee754_rem_pio2f+0x10a>
 800c33e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c450 <__ieee754_rem_pio2f+0x254>
 800c342:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c454 <__ieee754_rem_pio2f+0x258>
 800c346:	eef0 6a40 	vmov.f32	s13, s0
 800c34a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c34e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c352:	eea6 0a27 	vfma.f32	s0, s12, s15
 800c356:	eef0 7a40 	vmov.f32	s15, s0
 800c35a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c35e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c362:	ee15 2a90 	vmov	r2, s11
 800c366:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c36a:	1a5b      	subs	r3, r3, r1
 800c36c:	2b19      	cmp	r3, #25
 800c36e:	dc04      	bgt.n	800c37a <__ieee754_rem_pio2f+0x17e>
 800c370:	edc4 5a00 	vstr	s11, [r4]
 800c374:	eeb0 0a66 	vmov.f32	s0, s13
 800c378:	e7c6      	b.n	800c308 <__ieee754_rem_pio2f+0x10c>
 800c37a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c464 <__ieee754_rem_pio2f+0x268>
 800c37e:	eeb0 0a66 	vmov.f32	s0, s13
 800c382:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c386:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c38a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c468 <__ieee754_rem_pio2f+0x26c>
 800c38e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c392:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c396:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c39a:	ed84 7a00 	vstr	s14, [r4]
 800c39e:	e7b3      	b.n	800c308 <__ieee754_rem_pio2f+0x10c>
 800c3a0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c3a4:	db06      	blt.n	800c3b4 <__ieee754_rem_pio2f+0x1b8>
 800c3a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c3aa:	edc0 7a01 	vstr	s15, [r0, #4]
 800c3ae:	edc0 7a00 	vstr	s15, [r0]
 800c3b2:	e733      	b.n	800c21c <__ieee754_rem_pio2f+0x20>
 800c3b4:	15ea      	asrs	r2, r5, #23
 800c3b6:	3a86      	subs	r2, #134	; 0x86
 800c3b8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c3bc:	ee07 3a90 	vmov	s15, r3
 800c3c0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c3c4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c46c <__ieee754_rem_pio2f+0x270>
 800c3c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c3cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3d0:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c3d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c3dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c3e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3e4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c3e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f4:	edcd 7a05 	vstr	s15, [sp, #20]
 800c3f8:	d11e      	bne.n	800c438 <__ieee754_rem_pio2f+0x23c>
 800c3fa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c402:	bf14      	ite	ne
 800c404:	2302      	movne	r3, #2
 800c406:	2301      	moveq	r3, #1
 800c408:	4919      	ldr	r1, [pc, #100]	; (800c470 <__ieee754_rem_pio2f+0x274>)
 800c40a:	9101      	str	r1, [sp, #4]
 800c40c:	2102      	movs	r1, #2
 800c40e:	9100      	str	r1, [sp, #0]
 800c410:	a803      	add	r0, sp, #12
 800c412:	4621      	mov	r1, r4
 800c414:	f000 f88e 	bl	800c534 <__kernel_rem_pio2f>
 800c418:	2e00      	cmp	r6, #0
 800c41a:	f6bf af1c 	bge.w	800c256 <__ieee754_rem_pio2f+0x5a>
 800c41e:	edd4 7a00 	vldr	s15, [r4]
 800c422:	eef1 7a67 	vneg.f32	s15, s15
 800c426:	edc4 7a00 	vstr	s15, [r4]
 800c42a:	edd4 7a01 	vldr	s15, [r4, #4]
 800c42e:	eef1 7a67 	vneg.f32	s15, s15
 800c432:	edc4 7a01 	vstr	s15, [r4, #4]
 800c436:	e779      	b.n	800c32c <__ieee754_rem_pio2f+0x130>
 800c438:	2303      	movs	r3, #3
 800c43a:	e7e5      	b.n	800c408 <__ieee754_rem_pio2f+0x20c>
 800c43c:	3f490fd8 	.word	0x3f490fd8
 800c440:	4016cbe3 	.word	0x4016cbe3
 800c444:	3fc90f80 	.word	0x3fc90f80
 800c448:	3fc90fd0 	.word	0x3fc90fd0
 800c44c:	37354443 	.word	0x37354443
 800c450:	37354400 	.word	0x37354400
 800c454:	2e85a308 	.word	0x2e85a308
 800c458:	43490f80 	.word	0x43490f80
 800c45c:	3f22f984 	.word	0x3f22f984
 800c460:	0800d478 	.word	0x0800d478
 800c464:	2e85a300 	.word	0x2e85a300
 800c468:	248d3132 	.word	0x248d3132
 800c46c:	43800000 	.word	0x43800000
 800c470:	0800d4f8 	.word	0x0800d4f8

0800c474 <__kernel_cosf>:
 800c474:	ee10 3a10 	vmov	r3, s0
 800c478:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c47c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c480:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c484:	da05      	bge.n	800c492 <__kernel_cosf+0x1e>
 800c486:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c48a:	ee17 2a90 	vmov	r2, s15
 800c48e:	2a00      	cmp	r2, #0
 800c490:	d03d      	beq.n	800c50e <__kernel_cosf+0x9a>
 800c492:	ee60 5a00 	vmul.f32	s11, s0, s0
 800c496:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c514 <__kernel_cosf+0xa0>
 800c49a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c518 <__kernel_cosf+0xa4>
 800c49e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c51c <__kernel_cosf+0xa8>
 800c4a2:	4a1f      	ldr	r2, [pc, #124]	; (800c520 <__kernel_cosf+0xac>)
 800c4a4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c524 <__kernel_cosf+0xb0>
 800c4ae:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c4b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c528 <__kernel_cosf+0xb4>
 800c4b6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c4ba:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c52c <__kernel_cosf+0xb8>
 800c4be:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c4c2:	eeb0 7a66 	vmov.f32	s14, s13
 800c4c6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c4ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c4ce:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800c4d2:	ee67 6a25 	vmul.f32	s13, s14, s11
 800c4d6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800c4da:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c4de:	dc04      	bgt.n	800c4ea <__kernel_cosf+0x76>
 800c4e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c4e4:	ee36 0a47 	vsub.f32	s0, s12, s14
 800c4e8:	4770      	bx	lr
 800c4ea:	4a11      	ldr	r2, [pc, #68]	; (800c530 <__kernel_cosf+0xbc>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	bfda      	itte	le
 800c4f0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c4f4:	ee06 3a90 	vmovle	s13, r3
 800c4f8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800c4fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c500:	ee36 0a66 	vsub.f32	s0, s12, s13
 800c504:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c508:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c50c:	4770      	bx	lr
 800c50e:	eeb0 0a46 	vmov.f32	s0, s12
 800c512:	4770      	bx	lr
 800c514:	ad47d74e 	.word	0xad47d74e
 800c518:	310f74f6 	.word	0x310f74f6
 800c51c:	3d2aaaab 	.word	0x3d2aaaab
 800c520:	3e999999 	.word	0x3e999999
 800c524:	b493f27c 	.word	0xb493f27c
 800c528:	37d00d01 	.word	0x37d00d01
 800c52c:	bab60b61 	.word	0xbab60b61
 800c530:	3f480000 	.word	0x3f480000

0800c534 <__kernel_rem_pio2f>:
 800c534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c538:	ed2d 8b04 	vpush	{d8-d9}
 800c53c:	b0d9      	sub	sp, #356	; 0x164
 800c53e:	4688      	mov	r8, r1
 800c540:	9002      	str	r0, [sp, #8]
 800c542:	49bb      	ldr	r1, [pc, #748]	; (800c830 <__kernel_rem_pio2f+0x2fc>)
 800c544:	9866      	ldr	r0, [sp, #408]	; 0x198
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800c54c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800c550:	1e59      	subs	r1, r3, #1
 800c552:	1d13      	adds	r3, r2, #4
 800c554:	db27      	blt.n	800c5a6 <__kernel_rem_pio2f+0x72>
 800c556:	f1b2 0b03 	subs.w	fp, r2, #3
 800c55a:	bf48      	it	mi
 800c55c:	f102 0b04 	addmi.w	fp, r2, #4
 800c560:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800c564:	1c45      	adds	r5, r0, #1
 800c566:	00ec      	lsls	r4, r5, #3
 800c568:	1a47      	subs	r7, r0, r1
 800c56a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800c840 <__kernel_rem_pio2f+0x30c>
 800c56e:	9403      	str	r4, [sp, #12]
 800c570:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800c574:	eb0a 0c01 	add.w	ip, sl, r1
 800c578:	ae1c      	add	r6, sp, #112	; 0x70
 800c57a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800c57e:	2400      	movs	r4, #0
 800c580:	4564      	cmp	r4, ip
 800c582:	dd12      	ble.n	800c5aa <__kernel_rem_pio2f+0x76>
 800c584:	9b01      	ldr	r3, [sp, #4]
 800c586:	ac1c      	add	r4, sp, #112	; 0x70
 800c588:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c58c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800c590:	f04f 0c00 	mov.w	ip, #0
 800c594:	45d4      	cmp	ip, sl
 800c596:	dc27      	bgt.n	800c5e8 <__kernel_rem_pio2f+0xb4>
 800c598:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c59c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c840 <__kernel_rem_pio2f+0x30c>
 800c5a0:	4627      	mov	r7, r4
 800c5a2:	2600      	movs	r6, #0
 800c5a4:	e016      	b.n	800c5d4 <__kernel_rem_pio2f+0xa0>
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	e7dc      	b.n	800c564 <__kernel_rem_pio2f+0x30>
 800c5aa:	42e7      	cmn	r7, r4
 800c5ac:	bf5d      	ittte	pl
 800c5ae:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800c5b2:	ee07 3a90 	vmovpl	s15, r3
 800c5b6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c5ba:	eef0 7a47 	vmovmi.f32	s15, s14
 800c5be:	ece6 7a01 	vstmia	r6!, {s15}
 800c5c2:	3401      	adds	r4, #1
 800c5c4:	e7dc      	b.n	800c580 <__kernel_rem_pio2f+0x4c>
 800c5c6:	ecf9 6a01 	vldmia	r9!, {s13}
 800c5ca:	ed97 7a00 	vldr	s14, [r7]
 800c5ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c5d2:	3601      	adds	r6, #1
 800c5d4:	428e      	cmp	r6, r1
 800c5d6:	f1a7 0704 	sub.w	r7, r7, #4
 800c5da:	ddf4      	ble.n	800c5c6 <__kernel_rem_pio2f+0x92>
 800c5dc:	eceb 7a01 	vstmia	fp!, {s15}
 800c5e0:	f10c 0c01 	add.w	ip, ip, #1
 800c5e4:	3404      	adds	r4, #4
 800c5e6:	e7d5      	b.n	800c594 <__kernel_rem_pio2f+0x60>
 800c5e8:	ab08      	add	r3, sp, #32
 800c5ea:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c5ee:	eddf 8a93 	vldr	s17, [pc, #588]	; 800c83c <__kernel_rem_pio2f+0x308>
 800c5f2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800c838 <__kernel_rem_pio2f+0x304>
 800c5f6:	9304      	str	r3, [sp, #16]
 800c5f8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800c5fc:	4656      	mov	r6, sl
 800c5fe:	00b3      	lsls	r3, r6, #2
 800c600:	9305      	str	r3, [sp, #20]
 800c602:	ab58      	add	r3, sp, #352	; 0x160
 800c604:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c608:	ac08      	add	r4, sp, #32
 800c60a:	ab44      	add	r3, sp, #272	; 0x110
 800c60c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800c610:	46a4      	mov	ip, r4
 800c612:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c616:	4637      	mov	r7, r6
 800c618:	2f00      	cmp	r7, #0
 800c61a:	f1a0 0004 	sub.w	r0, r0, #4
 800c61e:	dc4f      	bgt.n	800c6c0 <__kernel_rem_pio2f+0x18c>
 800c620:	4628      	mov	r0, r5
 800c622:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c626:	f000 fa8d 	bl	800cb44 <scalbnf>
 800c62a:	eeb0 8a40 	vmov.f32	s16, s0
 800c62e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c632:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c636:	f000 fa43 	bl	800cac0 <floorf>
 800c63a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c63e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c642:	2d00      	cmp	r5, #0
 800c644:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c648:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c64c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c650:	ee17 9a90 	vmov	r9, s15
 800c654:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c658:	dd44      	ble.n	800c6e4 <__kernel_rem_pio2f+0x1b0>
 800c65a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c65e:	ab08      	add	r3, sp, #32
 800c660:	f1c5 0e08 	rsb	lr, r5, #8
 800c664:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800c668:	fa47 f00e 	asr.w	r0, r7, lr
 800c66c:	4481      	add	r9, r0
 800c66e:	fa00 f00e 	lsl.w	r0, r0, lr
 800c672:	1a3f      	subs	r7, r7, r0
 800c674:	f1c5 0007 	rsb	r0, r5, #7
 800c678:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800c67c:	4107      	asrs	r7, r0
 800c67e:	2f00      	cmp	r7, #0
 800c680:	dd3f      	ble.n	800c702 <__kernel_rem_pio2f+0x1ce>
 800c682:	f04f 0e00 	mov.w	lr, #0
 800c686:	f109 0901 	add.w	r9, r9, #1
 800c68a:	4673      	mov	r3, lr
 800c68c:	4576      	cmp	r6, lr
 800c68e:	dc6b      	bgt.n	800c768 <__kernel_rem_pio2f+0x234>
 800c690:	2d00      	cmp	r5, #0
 800c692:	dd04      	ble.n	800c69e <__kernel_rem_pio2f+0x16a>
 800c694:	2d01      	cmp	r5, #1
 800c696:	d078      	beq.n	800c78a <__kernel_rem_pio2f+0x256>
 800c698:	2d02      	cmp	r5, #2
 800c69a:	f000 8081 	beq.w	800c7a0 <__kernel_rem_pio2f+0x26c>
 800c69e:	2f02      	cmp	r7, #2
 800c6a0:	d12f      	bne.n	800c702 <__kernel_rem_pio2f+0x1ce>
 800c6a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c6a6:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c6aa:	b353      	cbz	r3, 800c702 <__kernel_rem_pio2f+0x1ce>
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c6b2:	f000 fa47 	bl	800cb44 <scalbnf>
 800c6b6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c6ba:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c6be:	e020      	b.n	800c702 <__kernel_rem_pio2f+0x1ce>
 800c6c0:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c6c4:	3f01      	subs	r7, #1
 800c6c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6ce:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c6d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c6d6:	ecac 0a01 	vstmia	ip!, {s0}
 800c6da:	ed90 0a00 	vldr	s0, [r0]
 800c6de:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c6e2:	e799      	b.n	800c618 <__kernel_rem_pio2f+0xe4>
 800c6e4:	d105      	bne.n	800c6f2 <__kernel_rem_pio2f+0x1be>
 800c6e6:	1e70      	subs	r0, r6, #1
 800c6e8:	ab08      	add	r3, sp, #32
 800c6ea:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800c6ee:	11ff      	asrs	r7, r7, #7
 800c6f0:	e7c5      	b.n	800c67e <__kernel_rem_pio2f+0x14a>
 800c6f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c6f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6fe:	da31      	bge.n	800c764 <__kernel_rem_pio2f+0x230>
 800c700:	2700      	movs	r7, #0
 800c702:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c70a:	f040 809b 	bne.w	800c844 <__kernel_rem_pio2f+0x310>
 800c70e:	1e74      	subs	r4, r6, #1
 800c710:	46a4      	mov	ip, r4
 800c712:	2000      	movs	r0, #0
 800c714:	45d4      	cmp	ip, sl
 800c716:	da4a      	bge.n	800c7ae <__kernel_rem_pio2f+0x27a>
 800c718:	2800      	cmp	r0, #0
 800c71a:	d07a      	beq.n	800c812 <__kernel_rem_pio2f+0x2de>
 800c71c:	ab08      	add	r3, sp, #32
 800c71e:	3d08      	subs	r5, #8
 800c720:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c724:	2b00      	cmp	r3, #0
 800c726:	f000 8081 	beq.w	800c82c <__kernel_rem_pio2f+0x2f8>
 800c72a:	4628      	mov	r0, r5
 800c72c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c730:	00a5      	lsls	r5, r4, #2
 800c732:	f000 fa07 	bl	800cb44 <scalbnf>
 800c736:	aa44      	add	r2, sp, #272	; 0x110
 800c738:	1d2b      	adds	r3, r5, #4
 800c73a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800c83c <__kernel_rem_pio2f+0x308>
 800c73e:	18d1      	adds	r1, r2, r3
 800c740:	4622      	mov	r2, r4
 800c742:	2a00      	cmp	r2, #0
 800c744:	f280 80ae 	bge.w	800c8a4 <__kernel_rem_pio2f+0x370>
 800c748:	4622      	mov	r2, r4
 800c74a:	2a00      	cmp	r2, #0
 800c74c:	f2c0 80cc 	blt.w	800c8e8 <__kernel_rem_pio2f+0x3b4>
 800c750:	a944      	add	r1, sp, #272	; 0x110
 800c752:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800c756:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c834 <__kernel_rem_pio2f+0x300>
 800c75a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c840 <__kernel_rem_pio2f+0x30c>
 800c75e:	2000      	movs	r0, #0
 800c760:	1aa1      	subs	r1, r4, r2
 800c762:	e0b6      	b.n	800c8d2 <__kernel_rem_pio2f+0x39e>
 800c764:	2702      	movs	r7, #2
 800c766:	e78c      	b.n	800c682 <__kernel_rem_pio2f+0x14e>
 800c768:	6820      	ldr	r0, [r4, #0]
 800c76a:	b94b      	cbnz	r3, 800c780 <__kernel_rem_pio2f+0x24c>
 800c76c:	b118      	cbz	r0, 800c776 <__kernel_rem_pio2f+0x242>
 800c76e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800c772:	6020      	str	r0, [r4, #0]
 800c774:	2001      	movs	r0, #1
 800c776:	f10e 0e01 	add.w	lr, lr, #1
 800c77a:	3404      	adds	r4, #4
 800c77c:	4603      	mov	r3, r0
 800c77e:	e785      	b.n	800c68c <__kernel_rem_pio2f+0x158>
 800c780:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800c784:	6020      	str	r0, [r4, #0]
 800c786:	4618      	mov	r0, r3
 800c788:	e7f5      	b.n	800c776 <__kernel_rem_pio2f+0x242>
 800c78a:	1e74      	subs	r4, r6, #1
 800c78c:	a808      	add	r0, sp, #32
 800c78e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c792:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c796:	f10d 0c20 	add.w	ip, sp, #32
 800c79a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800c79e:	e77e      	b.n	800c69e <__kernel_rem_pio2f+0x16a>
 800c7a0:	1e74      	subs	r4, r6, #1
 800c7a2:	a808      	add	r0, sp, #32
 800c7a4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c7a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800c7ac:	e7f3      	b.n	800c796 <__kernel_rem_pio2f+0x262>
 800c7ae:	ab08      	add	r3, sp, #32
 800c7b0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c7b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c7b8:	4318      	orrs	r0, r3
 800c7ba:	e7ab      	b.n	800c714 <__kernel_rem_pio2f+0x1e0>
 800c7bc:	f10c 0c01 	add.w	ip, ip, #1
 800c7c0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800c7c4:	2c00      	cmp	r4, #0
 800c7c6:	d0f9      	beq.n	800c7bc <__kernel_rem_pio2f+0x288>
 800c7c8:	9b05      	ldr	r3, [sp, #20]
 800c7ca:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c7ce:	eb0d 0003 	add.w	r0, sp, r3
 800c7d2:	9b01      	ldr	r3, [sp, #4]
 800c7d4:	18f4      	adds	r4, r6, r3
 800c7d6:	ab1c      	add	r3, sp, #112	; 0x70
 800c7d8:	1c77      	adds	r7, r6, #1
 800c7da:	384c      	subs	r0, #76	; 0x4c
 800c7dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7e0:	4466      	add	r6, ip
 800c7e2:	42be      	cmp	r6, r7
 800c7e4:	f6ff af0b 	blt.w	800c5fe <__kernel_rem_pio2f+0xca>
 800c7e8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800c7ec:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c7f0:	ee07 3a90 	vmov	s15, r3
 800c7f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7f8:	f04f 0c00 	mov.w	ip, #0
 800c7fc:	ece4 7a01 	vstmia	r4!, {s15}
 800c800:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c840 <__kernel_rem_pio2f+0x30c>
 800c804:	46a1      	mov	r9, r4
 800c806:	458c      	cmp	ip, r1
 800c808:	dd07      	ble.n	800c81a <__kernel_rem_pio2f+0x2e6>
 800c80a:	ece0 7a01 	vstmia	r0!, {s15}
 800c80e:	3701      	adds	r7, #1
 800c810:	e7e7      	b.n	800c7e2 <__kernel_rem_pio2f+0x2ae>
 800c812:	9804      	ldr	r0, [sp, #16]
 800c814:	f04f 0c01 	mov.w	ip, #1
 800c818:	e7d2      	b.n	800c7c0 <__kernel_rem_pio2f+0x28c>
 800c81a:	ecfe 6a01 	vldmia	lr!, {s13}
 800c81e:	ed39 7a01 	vldmdb	r9!, {s14}
 800c822:	f10c 0c01 	add.w	ip, ip, #1
 800c826:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c82a:	e7ec      	b.n	800c806 <__kernel_rem_pio2f+0x2d2>
 800c82c:	3c01      	subs	r4, #1
 800c82e:	e775      	b.n	800c71c <__kernel_rem_pio2f+0x1e8>
 800c830:	0800d83c 	.word	0x0800d83c
 800c834:	0800d810 	.word	0x0800d810
 800c838:	43800000 	.word	0x43800000
 800c83c:	3b800000 	.word	0x3b800000
 800c840:	00000000 	.word	0x00000000
 800c844:	9b03      	ldr	r3, [sp, #12]
 800c846:	eeb0 0a48 	vmov.f32	s0, s16
 800c84a:	1a98      	subs	r0, r3, r2
 800c84c:	f000 f97a 	bl	800cb44 <scalbnf>
 800c850:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c838 <__kernel_rem_pio2f+0x304>
 800c854:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c85c:	db19      	blt.n	800c892 <__kernel_rem_pio2f+0x35e>
 800c85e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c83c <__kernel_rem_pio2f+0x308>
 800c862:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c866:	aa08      	add	r2, sp, #32
 800c868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c86c:	1c74      	adds	r4, r6, #1
 800c86e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c872:	3508      	adds	r5, #8
 800c874:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c87c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c880:	ee10 3a10 	vmov	r3, s0
 800c884:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c888:	ee17 3a90 	vmov	r3, s15
 800c88c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c890:	e74b      	b.n	800c72a <__kernel_rem_pio2f+0x1f6>
 800c892:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c896:	aa08      	add	r2, sp, #32
 800c898:	ee10 3a10 	vmov	r3, s0
 800c89c:	4634      	mov	r4, r6
 800c89e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c8a2:	e742      	b.n	800c72a <__kernel_rem_pio2f+0x1f6>
 800c8a4:	a808      	add	r0, sp, #32
 800c8a6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c8aa:	9001      	str	r0, [sp, #4]
 800c8ac:	ee07 0a90 	vmov	s15, r0
 800c8b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8b4:	3a01      	subs	r2, #1
 800c8b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c8ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c8be:	ed61 7a01 	vstmdb	r1!, {s15}
 800c8c2:	e73e      	b.n	800c742 <__kernel_rem_pio2f+0x20e>
 800c8c4:	ecfc 6a01 	vldmia	ip!, {s13}
 800c8c8:	ecb6 7a01 	vldmia	r6!, {s14}
 800c8cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	4550      	cmp	r0, sl
 800c8d4:	dc01      	bgt.n	800c8da <__kernel_rem_pio2f+0x3a6>
 800c8d6:	4288      	cmp	r0, r1
 800c8d8:	ddf4      	ble.n	800c8c4 <__kernel_rem_pio2f+0x390>
 800c8da:	a858      	add	r0, sp, #352	; 0x160
 800c8dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c8e0:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c8e4:	3a01      	subs	r2, #1
 800c8e6:	e730      	b.n	800c74a <__kernel_rem_pio2f+0x216>
 800c8e8:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800c8ea:	2a02      	cmp	r2, #2
 800c8ec:	dc09      	bgt.n	800c902 <__kernel_rem_pio2f+0x3ce>
 800c8ee:	2a00      	cmp	r2, #0
 800c8f0:	dc2a      	bgt.n	800c948 <__kernel_rem_pio2f+0x414>
 800c8f2:	d043      	beq.n	800c97c <__kernel_rem_pio2f+0x448>
 800c8f4:	f009 0007 	and.w	r0, r9, #7
 800c8f8:	b059      	add	sp, #356	; 0x164
 800c8fa:	ecbd 8b04 	vpop	{d8-d9}
 800c8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c902:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c904:	2b03      	cmp	r3, #3
 800c906:	d1f5      	bne.n	800c8f4 <__kernel_rem_pio2f+0x3c0>
 800c908:	ab30      	add	r3, sp, #192	; 0xc0
 800c90a:	442b      	add	r3, r5
 800c90c:	461a      	mov	r2, r3
 800c90e:	4619      	mov	r1, r3
 800c910:	4620      	mov	r0, r4
 800c912:	2800      	cmp	r0, #0
 800c914:	f1a1 0104 	sub.w	r1, r1, #4
 800c918:	dc51      	bgt.n	800c9be <__kernel_rem_pio2f+0x48a>
 800c91a:	4621      	mov	r1, r4
 800c91c:	2901      	cmp	r1, #1
 800c91e:	f1a2 0204 	sub.w	r2, r2, #4
 800c922:	dc5c      	bgt.n	800c9de <__kernel_rem_pio2f+0x4aa>
 800c924:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800c840 <__kernel_rem_pio2f+0x30c>
 800c928:	3304      	adds	r3, #4
 800c92a:	2c01      	cmp	r4, #1
 800c92c:	dc67      	bgt.n	800c9fe <__kernel_rem_pio2f+0x4ca>
 800c92e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c932:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800c936:	2f00      	cmp	r7, #0
 800c938:	d167      	bne.n	800ca0a <__kernel_rem_pio2f+0x4d6>
 800c93a:	edc8 6a00 	vstr	s13, [r8]
 800c93e:	ed88 7a01 	vstr	s14, [r8, #4]
 800c942:	edc8 7a02 	vstr	s15, [r8, #8]
 800c946:	e7d5      	b.n	800c8f4 <__kernel_rem_pio2f+0x3c0>
 800c948:	aa30      	add	r2, sp, #192	; 0xc0
 800c94a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800c840 <__kernel_rem_pio2f+0x30c>
 800c94e:	4413      	add	r3, r2
 800c950:	4622      	mov	r2, r4
 800c952:	2a00      	cmp	r2, #0
 800c954:	da24      	bge.n	800c9a0 <__kernel_rem_pio2f+0x46c>
 800c956:	b34f      	cbz	r7, 800c9ac <__kernel_rem_pio2f+0x478>
 800c958:	eef1 7a47 	vneg.f32	s15, s14
 800c95c:	edc8 7a00 	vstr	s15, [r8]
 800c960:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800c964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c968:	aa31      	add	r2, sp, #196	; 0xc4
 800c96a:	2301      	movs	r3, #1
 800c96c:	429c      	cmp	r4, r3
 800c96e:	da20      	bge.n	800c9b2 <__kernel_rem_pio2f+0x47e>
 800c970:	b10f      	cbz	r7, 800c976 <__kernel_rem_pio2f+0x442>
 800c972:	eef1 7a67 	vneg.f32	s15, s15
 800c976:	edc8 7a01 	vstr	s15, [r8, #4]
 800c97a:	e7bb      	b.n	800c8f4 <__kernel_rem_pio2f+0x3c0>
 800c97c:	aa30      	add	r2, sp, #192	; 0xc0
 800c97e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800c840 <__kernel_rem_pio2f+0x30c>
 800c982:	4413      	add	r3, r2
 800c984:	2c00      	cmp	r4, #0
 800c986:	da05      	bge.n	800c994 <__kernel_rem_pio2f+0x460>
 800c988:	b10f      	cbz	r7, 800c98e <__kernel_rem_pio2f+0x45a>
 800c98a:	eef1 7a67 	vneg.f32	s15, s15
 800c98e:	edc8 7a00 	vstr	s15, [r8]
 800c992:	e7af      	b.n	800c8f4 <__kernel_rem_pio2f+0x3c0>
 800c994:	ed33 7a01 	vldmdb	r3!, {s14}
 800c998:	3c01      	subs	r4, #1
 800c99a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c99e:	e7f1      	b.n	800c984 <__kernel_rem_pio2f+0x450>
 800c9a0:	ed73 7a01 	vldmdb	r3!, {s15}
 800c9a4:	3a01      	subs	r2, #1
 800c9a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9aa:	e7d2      	b.n	800c952 <__kernel_rem_pio2f+0x41e>
 800c9ac:	eef0 7a47 	vmov.f32	s15, s14
 800c9b0:	e7d4      	b.n	800c95c <__kernel_rem_pio2f+0x428>
 800c9b2:	ecb2 7a01 	vldmia	r2!, {s14}
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9bc:	e7d6      	b.n	800c96c <__kernel_rem_pio2f+0x438>
 800c9be:	edd1 7a00 	vldr	s15, [r1]
 800c9c2:	edd1 6a01 	vldr	s13, [r1, #4]
 800c9c6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c9ca:	3801      	subs	r0, #1
 800c9cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9d0:	ed81 7a00 	vstr	s14, [r1]
 800c9d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d8:	edc1 7a01 	vstr	s15, [r1, #4]
 800c9dc:	e799      	b.n	800c912 <__kernel_rem_pio2f+0x3de>
 800c9de:	edd2 7a00 	vldr	s15, [r2]
 800c9e2:	edd2 6a01 	vldr	s13, [r2, #4]
 800c9e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c9ea:	3901      	subs	r1, #1
 800c9ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9f0:	ed82 7a00 	vstr	s14, [r2]
 800c9f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f8:	edc2 7a01 	vstr	s15, [r2, #4]
 800c9fc:	e78e      	b.n	800c91c <__kernel_rem_pio2f+0x3e8>
 800c9fe:	ed33 7a01 	vldmdb	r3!, {s14}
 800ca02:	3c01      	subs	r4, #1
 800ca04:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca08:	e78f      	b.n	800c92a <__kernel_rem_pio2f+0x3f6>
 800ca0a:	eef1 6a66 	vneg.f32	s13, s13
 800ca0e:	eeb1 7a47 	vneg.f32	s14, s14
 800ca12:	edc8 6a00 	vstr	s13, [r8]
 800ca16:	ed88 7a01 	vstr	s14, [r8, #4]
 800ca1a:	eef1 7a67 	vneg.f32	s15, s15
 800ca1e:	e790      	b.n	800c942 <__kernel_rem_pio2f+0x40e>

0800ca20 <__kernel_sinf>:
 800ca20:	ee10 3a10 	vmov	r3, s0
 800ca24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca28:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ca2c:	da04      	bge.n	800ca38 <__kernel_sinf+0x18>
 800ca2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ca32:	ee17 3a90 	vmov	r3, s15
 800ca36:	b35b      	cbz	r3, 800ca90 <__kernel_sinf+0x70>
 800ca38:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ca3c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ca94 <__kernel_sinf+0x74>
 800ca40:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800ca98 <__kernel_sinf+0x78>
 800ca44:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ca48:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ca9c <__kernel_sinf+0x7c>
 800ca4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca50:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800caa0 <__kernel_sinf+0x80>
 800ca54:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ca58:	eddf 7a12 	vldr	s15, [pc, #72]	; 800caa4 <__kernel_sinf+0x84>
 800ca5c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ca60:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca64:	b930      	cbnz	r0, 800ca74 <__kernel_sinf+0x54>
 800ca66:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800caa8 <__kernel_sinf+0x88>
 800ca6a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ca6e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ca72:	4770      	bx	lr
 800ca74:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ca78:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ca7c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ca80:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ca84:	eddf 7a09 	vldr	s15, [pc, #36]	; 800caac <__kernel_sinf+0x8c>
 800ca88:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ca8c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	2f2ec9d3 	.word	0x2f2ec9d3
 800ca98:	b2d72f34 	.word	0xb2d72f34
 800ca9c:	3638ef1b 	.word	0x3638ef1b
 800caa0:	b9500d01 	.word	0xb9500d01
 800caa4:	3c088889 	.word	0x3c088889
 800caa8:	be2aaaab 	.word	0xbe2aaaab
 800caac:	3e2aaaab 	.word	0x3e2aaaab

0800cab0 <fabsf>:
 800cab0:	ee10 3a10 	vmov	r3, s0
 800cab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cab8:	ee00 3a10 	vmov	s0, r3
 800cabc:	4770      	bx	lr
	...

0800cac0 <floorf>:
 800cac0:	ee10 3a10 	vmov	r3, s0
 800cac4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cac8:	3a7f      	subs	r2, #127	; 0x7f
 800caca:	2a16      	cmp	r2, #22
 800cacc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cad0:	dc2a      	bgt.n	800cb28 <floorf+0x68>
 800cad2:	2a00      	cmp	r2, #0
 800cad4:	da11      	bge.n	800cafa <floorf+0x3a>
 800cad6:	eddf 7a18 	vldr	s15, [pc, #96]	; 800cb38 <floorf+0x78>
 800cada:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cade:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae6:	dd05      	ble.n	800caf4 <floorf+0x34>
 800cae8:	2b00      	cmp	r3, #0
 800caea:	da23      	bge.n	800cb34 <floorf+0x74>
 800caec:	4a13      	ldr	r2, [pc, #76]	; (800cb3c <floorf+0x7c>)
 800caee:	2900      	cmp	r1, #0
 800caf0:	bf18      	it	ne
 800caf2:	4613      	movne	r3, r2
 800caf4:	ee00 3a10 	vmov	s0, r3
 800caf8:	4770      	bx	lr
 800cafa:	4911      	ldr	r1, [pc, #68]	; (800cb40 <floorf+0x80>)
 800cafc:	4111      	asrs	r1, r2
 800cafe:	420b      	tst	r3, r1
 800cb00:	d0fa      	beq.n	800caf8 <floorf+0x38>
 800cb02:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800cb38 <floorf+0x78>
 800cb06:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cb0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb12:	ddef      	ble.n	800caf4 <floorf+0x34>
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	bfbe      	ittt	lt
 800cb18:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800cb1c:	fa40 f202 	asrlt.w	r2, r0, r2
 800cb20:	189b      	addlt	r3, r3, r2
 800cb22:	ea23 0301 	bic.w	r3, r3, r1
 800cb26:	e7e5      	b.n	800caf4 <floorf+0x34>
 800cb28:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cb2c:	d3e4      	bcc.n	800caf8 <floorf+0x38>
 800cb2e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cb32:	4770      	bx	lr
 800cb34:	2300      	movs	r3, #0
 800cb36:	e7dd      	b.n	800caf4 <floorf+0x34>
 800cb38:	7149f2ca 	.word	0x7149f2ca
 800cb3c:	bf800000 	.word	0xbf800000
 800cb40:	007fffff 	.word	0x007fffff

0800cb44 <scalbnf>:
 800cb44:	ee10 3a10 	vmov	r3, s0
 800cb48:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cb4c:	d025      	beq.n	800cb9a <scalbnf+0x56>
 800cb4e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cb52:	d302      	bcc.n	800cb5a <scalbnf+0x16>
 800cb54:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cb58:	4770      	bx	lr
 800cb5a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800cb5e:	d122      	bne.n	800cba6 <scalbnf+0x62>
 800cb60:	4b2a      	ldr	r3, [pc, #168]	; (800cc0c <scalbnf+0xc8>)
 800cb62:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cc10 <scalbnf+0xcc>
 800cb66:	4298      	cmp	r0, r3
 800cb68:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cb6c:	db16      	blt.n	800cb9c <scalbnf+0x58>
 800cb6e:	ee10 3a10 	vmov	r3, s0
 800cb72:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cb76:	3a19      	subs	r2, #25
 800cb78:	4402      	add	r2, r0
 800cb7a:	2afe      	cmp	r2, #254	; 0xfe
 800cb7c:	dd15      	ble.n	800cbaa <scalbnf+0x66>
 800cb7e:	ee10 3a10 	vmov	r3, s0
 800cb82:	eddf 7a24 	vldr	s15, [pc, #144]	; 800cc14 <scalbnf+0xd0>
 800cb86:	eddf 6a24 	vldr	s13, [pc, #144]	; 800cc18 <scalbnf+0xd4>
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	eeb0 7a67 	vmov.f32	s14, s15
 800cb90:	bfb8      	it	lt
 800cb92:	eef0 7a66 	vmovlt.f32	s15, s13
 800cb96:	ee27 0a27 	vmul.f32	s0, s14, s15
 800cb9a:	4770      	bx	lr
 800cb9c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cc1c <scalbnf+0xd8>
 800cba0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cba4:	4770      	bx	lr
 800cba6:	0dd2      	lsrs	r2, r2, #23
 800cba8:	e7e6      	b.n	800cb78 <scalbnf+0x34>
 800cbaa:	2a00      	cmp	r2, #0
 800cbac:	dd06      	ble.n	800cbbc <scalbnf+0x78>
 800cbae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cbb2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800cbb6:	ee00 3a10 	vmov	s0, r3
 800cbba:	4770      	bx	lr
 800cbbc:	f112 0f16 	cmn.w	r2, #22
 800cbc0:	da1a      	bge.n	800cbf8 <scalbnf+0xb4>
 800cbc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cbc6:	4298      	cmp	r0, r3
 800cbc8:	ee10 3a10 	vmov	r3, s0
 800cbcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbd0:	dd0a      	ble.n	800cbe8 <scalbnf+0xa4>
 800cbd2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800cc14 <scalbnf+0xd0>
 800cbd6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800cc18 <scalbnf+0xd4>
 800cbda:	eef0 7a40 	vmov.f32	s15, s0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	bf18      	it	ne
 800cbe2:	eeb0 0a47 	vmovne.f32	s0, s14
 800cbe6:	e7db      	b.n	800cba0 <scalbnf+0x5c>
 800cbe8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800cc1c <scalbnf+0xd8>
 800cbec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800cc20 <scalbnf+0xdc>
 800cbf0:	eef0 7a40 	vmov.f32	s15, s0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	e7f3      	b.n	800cbe0 <scalbnf+0x9c>
 800cbf8:	3219      	adds	r2, #25
 800cbfa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cbfe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800cc02:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cc24 <scalbnf+0xe0>
 800cc06:	ee07 3a10 	vmov	s14, r3
 800cc0a:	e7c4      	b.n	800cb96 <scalbnf+0x52>
 800cc0c:	ffff3cb0 	.word	0xffff3cb0
 800cc10:	4c000000 	.word	0x4c000000
 800cc14:	7149f2ca 	.word	0x7149f2ca
 800cc18:	f149f2ca 	.word	0xf149f2ca
 800cc1c:	0da24260 	.word	0x0da24260
 800cc20:	8da24260 	.word	0x8da24260
 800cc24:	33000000 	.word	0x33000000

0800cc28 <abort>:
 800cc28:	b508      	push	{r3, lr}
 800cc2a:	2006      	movs	r0, #6
 800cc2c:	f000 f874 	bl	800cd18 <raise>
 800cc30:	2001      	movs	r0, #1
 800cc32:	f7f8 fd41 	bl	80056b8 <_exit>
	...

0800cc38 <__errno>:
 800cc38:	4b01      	ldr	r3, [pc, #4]	; (800cc40 <__errno+0x8>)
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	20000018 	.word	0x20000018

0800cc44 <__libc_init_array>:
 800cc44:	b570      	push	{r4, r5, r6, lr}
 800cc46:	4d0d      	ldr	r5, [pc, #52]	; (800cc7c <__libc_init_array+0x38>)
 800cc48:	4c0d      	ldr	r4, [pc, #52]	; (800cc80 <__libc_init_array+0x3c>)
 800cc4a:	1b64      	subs	r4, r4, r5
 800cc4c:	10a4      	asrs	r4, r4, #2
 800cc4e:	2600      	movs	r6, #0
 800cc50:	42a6      	cmp	r6, r4
 800cc52:	d109      	bne.n	800cc68 <__libc_init_array+0x24>
 800cc54:	4d0b      	ldr	r5, [pc, #44]	; (800cc84 <__libc_init_array+0x40>)
 800cc56:	4c0c      	ldr	r4, [pc, #48]	; (800cc88 <__libc_init_array+0x44>)
 800cc58:	f000 f9b0 	bl	800cfbc <_init>
 800cc5c:	1b64      	subs	r4, r4, r5
 800cc5e:	10a4      	asrs	r4, r4, #2
 800cc60:	2600      	movs	r6, #0
 800cc62:	42a6      	cmp	r6, r4
 800cc64:	d105      	bne.n	800cc72 <__libc_init_array+0x2e>
 800cc66:	bd70      	pop	{r4, r5, r6, pc}
 800cc68:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc6c:	4798      	blx	r3
 800cc6e:	3601      	adds	r6, #1
 800cc70:	e7ee      	b.n	800cc50 <__libc_init_array+0xc>
 800cc72:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc76:	4798      	blx	r3
 800cc78:	3601      	adds	r6, #1
 800cc7a:	e7f2      	b.n	800cc62 <__libc_init_array+0x1e>
 800cc7c:	0800d850 	.word	0x0800d850
 800cc80:	0800d850 	.word	0x0800d850
 800cc84:	0800d850 	.word	0x0800d850
 800cc88:	0800d85c 	.word	0x0800d85c

0800cc8c <memcpy>:
 800cc8c:	440a      	add	r2, r1
 800cc8e:	4291      	cmp	r1, r2
 800cc90:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc94:	d100      	bne.n	800cc98 <memcpy+0xc>
 800cc96:	4770      	bx	lr
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cca2:	4291      	cmp	r1, r2
 800cca4:	d1f9      	bne.n	800cc9a <memcpy+0xe>
 800cca6:	bd10      	pop	{r4, pc}

0800cca8 <memset>:
 800cca8:	4402      	add	r2, r0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d100      	bne.n	800ccb2 <memset+0xa>
 800ccb0:	4770      	bx	lr
 800ccb2:	f803 1b01 	strb.w	r1, [r3], #1
 800ccb6:	e7f9      	b.n	800ccac <memset+0x4>

0800ccb8 <realloc>:
 800ccb8:	4b02      	ldr	r3, [pc, #8]	; (800ccc4 <realloc+0xc>)
 800ccba:	460a      	mov	r2, r1
 800ccbc:	4601      	mov	r1, r0
 800ccbe:	6818      	ldr	r0, [r3, #0]
 800ccc0:	f000 b8da 	b.w	800ce78 <_realloc_r>
 800ccc4:	20000018 	.word	0x20000018

0800ccc8 <_raise_r>:
 800ccc8:	291f      	cmp	r1, #31
 800ccca:	b538      	push	{r3, r4, r5, lr}
 800cccc:	4604      	mov	r4, r0
 800ccce:	460d      	mov	r5, r1
 800ccd0:	d904      	bls.n	800ccdc <_raise_r+0x14>
 800ccd2:	2316      	movs	r3, #22
 800ccd4:	6003      	str	r3, [r0, #0]
 800ccd6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ccde:	b112      	cbz	r2, 800cce6 <_raise_r+0x1e>
 800cce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cce4:	b94b      	cbnz	r3, 800ccfa <_raise_r+0x32>
 800cce6:	4620      	mov	r0, r4
 800cce8:	f000 f830 	bl	800cd4c <_getpid_r>
 800ccec:	462a      	mov	r2, r5
 800ccee:	4601      	mov	r1, r0
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccf6:	f000 b817 	b.w	800cd28 <_kill_r>
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d00a      	beq.n	800cd14 <_raise_r+0x4c>
 800ccfe:	1c59      	adds	r1, r3, #1
 800cd00:	d103      	bne.n	800cd0a <_raise_r+0x42>
 800cd02:	2316      	movs	r3, #22
 800cd04:	6003      	str	r3, [r0, #0]
 800cd06:	2001      	movs	r0, #1
 800cd08:	e7e7      	b.n	800ccda <_raise_r+0x12>
 800cd0a:	2400      	movs	r4, #0
 800cd0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd10:	4628      	mov	r0, r5
 800cd12:	4798      	blx	r3
 800cd14:	2000      	movs	r0, #0
 800cd16:	e7e0      	b.n	800ccda <_raise_r+0x12>

0800cd18 <raise>:
 800cd18:	4b02      	ldr	r3, [pc, #8]	; (800cd24 <raise+0xc>)
 800cd1a:	4601      	mov	r1, r0
 800cd1c:	6818      	ldr	r0, [r3, #0]
 800cd1e:	f7ff bfd3 	b.w	800ccc8 <_raise_r>
 800cd22:	bf00      	nop
 800cd24:	20000018 	.word	0x20000018

0800cd28 <_kill_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	4d07      	ldr	r5, [pc, #28]	; (800cd48 <_kill_r+0x20>)
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4604      	mov	r4, r0
 800cd30:	4608      	mov	r0, r1
 800cd32:	4611      	mov	r1, r2
 800cd34:	602b      	str	r3, [r5, #0]
 800cd36:	f7f8 fcaf 	bl	8005698 <_kill>
 800cd3a:	1c43      	adds	r3, r0, #1
 800cd3c:	d102      	bne.n	800cd44 <_kill_r+0x1c>
 800cd3e:	682b      	ldr	r3, [r5, #0]
 800cd40:	b103      	cbz	r3, 800cd44 <_kill_r+0x1c>
 800cd42:	6023      	str	r3, [r4, #0]
 800cd44:	bd38      	pop	{r3, r4, r5, pc}
 800cd46:	bf00      	nop
 800cd48:	20001fdc 	.word	0x20001fdc

0800cd4c <_getpid_r>:
 800cd4c:	f7f8 bc9c 	b.w	8005688 <_getpid>

0800cd50 <sbrk_aligned>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	4e0e      	ldr	r6, [pc, #56]	; (800cd8c <sbrk_aligned+0x3c>)
 800cd54:	460c      	mov	r4, r1
 800cd56:	6831      	ldr	r1, [r6, #0]
 800cd58:	4605      	mov	r5, r0
 800cd5a:	b911      	cbnz	r1, 800cd62 <sbrk_aligned+0x12>
 800cd5c:	f000 f8bc 	bl	800ced8 <_sbrk_r>
 800cd60:	6030      	str	r0, [r6, #0]
 800cd62:	4621      	mov	r1, r4
 800cd64:	4628      	mov	r0, r5
 800cd66:	f000 f8b7 	bl	800ced8 <_sbrk_r>
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	d00a      	beq.n	800cd84 <sbrk_aligned+0x34>
 800cd6e:	1cc4      	adds	r4, r0, #3
 800cd70:	f024 0403 	bic.w	r4, r4, #3
 800cd74:	42a0      	cmp	r0, r4
 800cd76:	d007      	beq.n	800cd88 <sbrk_aligned+0x38>
 800cd78:	1a21      	subs	r1, r4, r0
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f000 f8ac 	bl	800ced8 <_sbrk_r>
 800cd80:	3001      	adds	r0, #1
 800cd82:	d101      	bne.n	800cd88 <sbrk_aligned+0x38>
 800cd84:	f04f 34ff 	mov.w	r4, #4294967295
 800cd88:	4620      	mov	r0, r4
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}
 800cd8c:	20001fd8 	.word	0x20001fd8

0800cd90 <_malloc_r>:
 800cd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd94:	1ccd      	adds	r5, r1, #3
 800cd96:	f025 0503 	bic.w	r5, r5, #3
 800cd9a:	3508      	adds	r5, #8
 800cd9c:	2d0c      	cmp	r5, #12
 800cd9e:	bf38      	it	cc
 800cda0:	250c      	movcc	r5, #12
 800cda2:	2d00      	cmp	r5, #0
 800cda4:	4607      	mov	r7, r0
 800cda6:	db01      	blt.n	800cdac <_malloc_r+0x1c>
 800cda8:	42a9      	cmp	r1, r5
 800cdaa:	d905      	bls.n	800cdb8 <_malloc_r+0x28>
 800cdac:	230c      	movs	r3, #12
 800cdae:	603b      	str	r3, [r7, #0]
 800cdb0:	2600      	movs	r6, #0
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb8:	4e2e      	ldr	r6, [pc, #184]	; (800ce74 <_malloc_r+0xe4>)
 800cdba:	f000 f89d 	bl	800cef8 <__malloc_lock>
 800cdbe:	6833      	ldr	r3, [r6, #0]
 800cdc0:	461c      	mov	r4, r3
 800cdc2:	bb34      	cbnz	r4, 800ce12 <_malloc_r+0x82>
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	4638      	mov	r0, r7
 800cdc8:	f7ff ffc2 	bl	800cd50 <sbrk_aligned>
 800cdcc:	1c43      	adds	r3, r0, #1
 800cdce:	4604      	mov	r4, r0
 800cdd0:	d14d      	bne.n	800ce6e <_malloc_r+0xde>
 800cdd2:	6834      	ldr	r4, [r6, #0]
 800cdd4:	4626      	mov	r6, r4
 800cdd6:	2e00      	cmp	r6, #0
 800cdd8:	d140      	bne.n	800ce5c <_malloc_r+0xcc>
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	4631      	mov	r1, r6
 800cdde:	4638      	mov	r0, r7
 800cde0:	eb04 0803 	add.w	r8, r4, r3
 800cde4:	f000 f878 	bl	800ced8 <_sbrk_r>
 800cde8:	4580      	cmp	r8, r0
 800cdea:	d13a      	bne.n	800ce62 <_malloc_r+0xd2>
 800cdec:	6821      	ldr	r1, [r4, #0]
 800cdee:	3503      	adds	r5, #3
 800cdf0:	1a6d      	subs	r5, r5, r1
 800cdf2:	f025 0503 	bic.w	r5, r5, #3
 800cdf6:	3508      	adds	r5, #8
 800cdf8:	2d0c      	cmp	r5, #12
 800cdfa:	bf38      	it	cc
 800cdfc:	250c      	movcc	r5, #12
 800cdfe:	4629      	mov	r1, r5
 800ce00:	4638      	mov	r0, r7
 800ce02:	f7ff ffa5 	bl	800cd50 <sbrk_aligned>
 800ce06:	3001      	adds	r0, #1
 800ce08:	d02b      	beq.n	800ce62 <_malloc_r+0xd2>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	442b      	add	r3, r5
 800ce0e:	6023      	str	r3, [r4, #0]
 800ce10:	e00e      	b.n	800ce30 <_malloc_r+0xa0>
 800ce12:	6822      	ldr	r2, [r4, #0]
 800ce14:	1b52      	subs	r2, r2, r5
 800ce16:	d41e      	bmi.n	800ce56 <_malloc_r+0xc6>
 800ce18:	2a0b      	cmp	r2, #11
 800ce1a:	d916      	bls.n	800ce4a <_malloc_r+0xba>
 800ce1c:	1961      	adds	r1, r4, r5
 800ce1e:	42a3      	cmp	r3, r4
 800ce20:	6025      	str	r5, [r4, #0]
 800ce22:	bf18      	it	ne
 800ce24:	6059      	strne	r1, [r3, #4]
 800ce26:	6863      	ldr	r3, [r4, #4]
 800ce28:	bf08      	it	eq
 800ce2a:	6031      	streq	r1, [r6, #0]
 800ce2c:	5162      	str	r2, [r4, r5]
 800ce2e:	604b      	str	r3, [r1, #4]
 800ce30:	4638      	mov	r0, r7
 800ce32:	f104 060b 	add.w	r6, r4, #11
 800ce36:	f000 f865 	bl	800cf04 <__malloc_unlock>
 800ce3a:	f026 0607 	bic.w	r6, r6, #7
 800ce3e:	1d23      	adds	r3, r4, #4
 800ce40:	1af2      	subs	r2, r6, r3
 800ce42:	d0b6      	beq.n	800cdb2 <_malloc_r+0x22>
 800ce44:	1b9b      	subs	r3, r3, r6
 800ce46:	50a3      	str	r3, [r4, r2]
 800ce48:	e7b3      	b.n	800cdb2 <_malloc_r+0x22>
 800ce4a:	6862      	ldr	r2, [r4, #4]
 800ce4c:	42a3      	cmp	r3, r4
 800ce4e:	bf0c      	ite	eq
 800ce50:	6032      	streq	r2, [r6, #0]
 800ce52:	605a      	strne	r2, [r3, #4]
 800ce54:	e7ec      	b.n	800ce30 <_malloc_r+0xa0>
 800ce56:	4623      	mov	r3, r4
 800ce58:	6864      	ldr	r4, [r4, #4]
 800ce5a:	e7b2      	b.n	800cdc2 <_malloc_r+0x32>
 800ce5c:	4634      	mov	r4, r6
 800ce5e:	6876      	ldr	r6, [r6, #4]
 800ce60:	e7b9      	b.n	800cdd6 <_malloc_r+0x46>
 800ce62:	230c      	movs	r3, #12
 800ce64:	603b      	str	r3, [r7, #0]
 800ce66:	4638      	mov	r0, r7
 800ce68:	f000 f84c 	bl	800cf04 <__malloc_unlock>
 800ce6c:	e7a1      	b.n	800cdb2 <_malloc_r+0x22>
 800ce6e:	6025      	str	r5, [r4, #0]
 800ce70:	e7de      	b.n	800ce30 <_malloc_r+0xa0>
 800ce72:	bf00      	nop
 800ce74:	20001fd4 	.word	0x20001fd4

0800ce78 <_realloc_r>:
 800ce78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7c:	4680      	mov	r8, r0
 800ce7e:	4614      	mov	r4, r2
 800ce80:	460e      	mov	r6, r1
 800ce82:	b921      	cbnz	r1, 800ce8e <_realloc_r+0x16>
 800ce84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce88:	4611      	mov	r1, r2
 800ce8a:	f7ff bf81 	b.w	800cd90 <_malloc_r>
 800ce8e:	b92a      	cbnz	r2, 800ce9c <_realloc_r+0x24>
 800ce90:	f000 f83e 	bl	800cf10 <_free_r>
 800ce94:	4625      	mov	r5, r4
 800ce96:	4628      	mov	r0, r5
 800ce98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce9c:	f000 f884 	bl	800cfa8 <_malloc_usable_size_r>
 800cea0:	4284      	cmp	r4, r0
 800cea2:	4607      	mov	r7, r0
 800cea4:	d802      	bhi.n	800ceac <_realloc_r+0x34>
 800cea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ceaa:	d812      	bhi.n	800ced2 <_realloc_r+0x5a>
 800ceac:	4621      	mov	r1, r4
 800ceae:	4640      	mov	r0, r8
 800ceb0:	f7ff ff6e 	bl	800cd90 <_malloc_r>
 800ceb4:	4605      	mov	r5, r0
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	d0ed      	beq.n	800ce96 <_realloc_r+0x1e>
 800ceba:	42bc      	cmp	r4, r7
 800cebc:	4622      	mov	r2, r4
 800cebe:	4631      	mov	r1, r6
 800cec0:	bf28      	it	cs
 800cec2:	463a      	movcs	r2, r7
 800cec4:	f7ff fee2 	bl	800cc8c <memcpy>
 800cec8:	4631      	mov	r1, r6
 800ceca:	4640      	mov	r0, r8
 800cecc:	f000 f820 	bl	800cf10 <_free_r>
 800ced0:	e7e1      	b.n	800ce96 <_realloc_r+0x1e>
 800ced2:	4635      	mov	r5, r6
 800ced4:	e7df      	b.n	800ce96 <_realloc_r+0x1e>
	...

0800ced8 <_sbrk_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4d06      	ldr	r5, [pc, #24]	; (800cef4 <_sbrk_r+0x1c>)
 800cedc:	2300      	movs	r3, #0
 800cede:	4604      	mov	r4, r0
 800cee0:	4608      	mov	r0, r1
 800cee2:	602b      	str	r3, [r5, #0]
 800cee4:	f7f8 fbf2 	bl	80056cc <_sbrk>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	d102      	bne.n	800cef2 <_sbrk_r+0x1a>
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	b103      	cbz	r3, 800cef2 <_sbrk_r+0x1a>
 800cef0:	6023      	str	r3, [r4, #0]
 800cef2:	bd38      	pop	{r3, r4, r5, pc}
 800cef4:	20001fdc 	.word	0x20001fdc

0800cef8 <__malloc_lock>:
 800cef8:	4801      	ldr	r0, [pc, #4]	; (800cf00 <__malloc_lock+0x8>)
 800cefa:	f000 b85d 	b.w	800cfb8 <__retarget_lock_acquire_recursive>
 800cefe:	bf00      	nop
 800cf00:	20001fe0 	.word	0x20001fe0

0800cf04 <__malloc_unlock>:
 800cf04:	4801      	ldr	r0, [pc, #4]	; (800cf0c <__malloc_unlock+0x8>)
 800cf06:	f000 b858 	b.w	800cfba <__retarget_lock_release_recursive>
 800cf0a:	bf00      	nop
 800cf0c:	20001fe0 	.word	0x20001fe0

0800cf10 <_free_r>:
 800cf10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf12:	2900      	cmp	r1, #0
 800cf14:	d044      	beq.n	800cfa0 <_free_r+0x90>
 800cf16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf1a:	9001      	str	r0, [sp, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f1a1 0404 	sub.w	r4, r1, #4
 800cf22:	bfb8      	it	lt
 800cf24:	18e4      	addlt	r4, r4, r3
 800cf26:	f7ff ffe7 	bl	800cef8 <__malloc_lock>
 800cf2a:	4a1e      	ldr	r2, [pc, #120]	; (800cfa4 <_free_r+0x94>)
 800cf2c:	9801      	ldr	r0, [sp, #4]
 800cf2e:	6813      	ldr	r3, [r2, #0]
 800cf30:	b933      	cbnz	r3, 800cf40 <_free_r+0x30>
 800cf32:	6063      	str	r3, [r4, #4]
 800cf34:	6014      	str	r4, [r2, #0]
 800cf36:	b003      	add	sp, #12
 800cf38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf3c:	f7ff bfe2 	b.w	800cf04 <__malloc_unlock>
 800cf40:	42a3      	cmp	r3, r4
 800cf42:	d908      	bls.n	800cf56 <_free_r+0x46>
 800cf44:	6825      	ldr	r5, [r4, #0]
 800cf46:	1961      	adds	r1, r4, r5
 800cf48:	428b      	cmp	r3, r1
 800cf4a:	bf01      	itttt	eq
 800cf4c:	6819      	ldreq	r1, [r3, #0]
 800cf4e:	685b      	ldreq	r3, [r3, #4]
 800cf50:	1949      	addeq	r1, r1, r5
 800cf52:	6021      	streq	r1, [r4, #0]
 800cf54:	e7ed      	b.n	800cf32 <_free_r+0x22>
 800cf56:	461a      	mov	r2, r3
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	b10b      	cbz	r3, 800cf60 <_free_r+0x50>
 800cf5c:	42a3      	cmp	r3, r4
 800cf5e:	d9fa      	bls.n	800cf56 <_free_r+0x46>
 800cf60:	6811      	ldr	r1, [r2, #0]
 800cf62:	1855      	adds	r5, r2, r1
 800cf64:	42a5      	cmp	r5, r4
 800cf66:	d10b      	bne.n	800cf80 <_free_r+0x70>
 800cf68:	6824      	ldr	r4, [r4, #0]
 800cf6a:	4421      	add	r1, r4
 800cf6c:	1854      	adds	r4, r2, r1
 800cf6e:	42a3      	cmp	r3, r4
 800cf70:	6011      	str	r1, [r2, #0]
 800cf72:	d1e0      	bne.n	800cf36 <_free_r+0x26>
 800cf74:	681c      	ldr	r4, [r3, #0]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	6053      	str	r3, [r2, #4]
 800cf7a:	4421      	add	r1, r4
 800cf7c:	6011      	str	r1, [r2, #0]
 800cf7e:	e7da      	b.n	800cf36 <_free_r+0x26>
 800cf80:	d902      	bls.n	800cf88 <_free_r+0x78>
 800cf82:	230c      	movs	r3, #12
 800cf84:	6003      	str	r3, [r0, #0]
 800cf86:	e7d6      	b.n	800cf36 <_free_r+0x26>
 800cf88:	6825      	ldr	r5, [r4, #0]
 800cf8a:	1961      	adds	r1, r4, r5
 800cf8c:	428b      	cmp	r3, r1
 800cf8e:	bf04      	itt	eq
 800cf90:	6819      	ldreq	r1, [r3, #0]
 800cf92:	685b      	ldreq	r3, [r3, #4]
 800cf94:	6063      	str	r3, [r4, #4]
 800cf96:	bf04      	itt	eq
 800cf98:	1949      	addeq	r1, r1, r5
 800cf9a:	6021      	streq	r1, [r4, #0]
 800cf9c:	6054      	str	r4, [r2, #4]
 800cf9e:	e7ca      	b.n	800cf36 <_free_r+0x26>
 800cfa0:	b003      	add	sp, #12
 800cfa2:	bd30      	pop	{r4, r5, pc}
 800cfa4:	20001fd4 	.word	0x20001fd4

0800cfa8 <_malloc_usable_size_r>:
 800cfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfac:	1f18      	subs	r0, r3, #4
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfbc      	itt	lt
 800cfb2:	580b      	ldrlt	r3, [r1, r0]
 800cfb4:	18c0      	addlt	r0, r0, r3
 800cfb6:	4770      	bx	lr

0800cfb8 <__retarget_lock_acquire_recursive>:
 800cfb8:	4770      	bx	lr

0800cfba <__retarget_lock_release_recursive>:
 800cfba:	4770      	bx	lr

0800cfbc <_init>:
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	bf00      	nop
 800cfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfc2:	bc08      	pop	{r3}
 800cfc4:	469e      	mov	lr, r3
 800cfc6:	4770      	bx	lr

0800cfc8 <_fini>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	bf00      	nop
 800cfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfce:	bc08      	pop	{r3}
 800cfd0:	469e      	mov	lr, r3
 800cfd2:	4770      	bx	lr

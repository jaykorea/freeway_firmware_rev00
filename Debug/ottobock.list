
ottobock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca94  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800cc48  0800cc48  0001cc48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d100  0800d100  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d100  0800d100  0001d100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d108  0800d108  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800d108  0800d108  0001d108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d114  0800d114  0001d114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00001f74  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001ff4  20001ff4  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024e27  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f03  00000000  00000000  00044ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a90  00000000  00000000  00048dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001968  00000000  00000000  0004a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b463  00000000  00000000  0004c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eeaa  00000000  00000000  00077633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fae7c  00000000  00000000  000964dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00191359  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ab4  00000000  00000000  001913ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cc2c 	.word	0x0800cc2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800cc2c 	.word	0x0800cc2c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b974 	b.w	8000e78 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	468e      	mov	lr, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14d      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4694      	mov	ip, r2
 8000bba:	d969      	bls.n	8000c90 <__udivmoddi4+0xe8>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b152      	cbz	r2, 8000bd8 <__udivmoddi4+0x30>
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	f1c2 0120 	rsb	r1, r2, #32
 8000bca:	fa20 f101 	lsr.w	r1, r0, r1
 8000bce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bdc:	0c21      	lsrs	r1, r4, #16
 8000bde:	fbbe f6f8 	udiv	r6, lr, r8
 8000be2:	fa1f f78c 	uxth.w	r7, ip
 8000be6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bee:	fb06 f107 	mul.w	r1, r6, r7
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 811f 	bcs.w	8000e40 <__udivmoddi4+0x298>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 811c 	bls.w	8000e40 <__udivmoddi4+0x298>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 f707 	mul.w	r7, r0, r7
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	f080 810a 	bcs.w	8000e44 <__udivmoddi4+0x29c>
 8000c30:	42a7      	cmp	r7, r4
 8000c32:	f240 8107 	bls.w	8000e44 <__udivmoddi4+0x29c>
 8000c36:	4464      	add	r4, ip
 8000c38:	3802      	subs	r0, #2
 8000c3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3e:	1be4      	subs	r4, r4, r7
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xc2>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80ef 	beq.w	8000e3a <__udivmoddi4+0x292>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x160>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd4>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80f9 	bhi.w	8000e6e <__udivmoddi4+0x2c6>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	469e      	mov	lr, r3
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000c8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xec>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 8092 	bne.w	8000dc2 <__udivmoddi4+0x21a>
 8000c9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	2601      	movs	r6, #1
 8000cac:	0c20      	lsrs	r0, r4, #16
 8000cae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cba:	fb0e f003 	mul.w	r0, lr, r3
 8000cbe:	4288      	cmp	r0, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x12c>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x12a>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f200 80cb 	bhi.w	8000e68 <__udivmoddi4+0x2c0>
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce8:	45a6      	cmp	lr, r4
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x156>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x154>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f200 80bb 	bhi.w	8000e72 <__udivmoddi4+0x2ca>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000d08:	f1c6 0720 	rsb	r7, r6, #32
 8000d0c:	40b3      	lsls	r3, r6
 8000d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d16:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	431c      	orrs	r4, r3
 8000d20:	40f9      	lsrs	r1, r7
 8000d22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d26:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2e:	0c20      	lsrs	r0, r4, #16
 8000d30:	fa1f fe8c 	uxth.w	lr, ip
 8000d34:	fb09 1118 	mls	r1, r9, r8, r1
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d40:	4288      	cmp	r0, r1
 8000d42:	fa02 f206 	lsl.w	r2, r2, r6
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b8>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d50:	f080 8088 	bcs.w	8000e64 <__udivmoddi4+0x2bc>
 8000d54:	4288      	cmp	r0, r1
 8000d56:	f240 8085 	bls.w	8000e64 <__udivmoddi4+0x2bc>
 8000d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d68:	fb09 1110 	mls	r1, r9, r0, r1
 8000d6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d74:	458e      	cmp	lr, r1
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1e2>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d80:	d26c      	bcs.n	8000e5c <__udivmoddi4+0x2b4>
 8000d82:	458e      	cmp	lr, r1
 8000d84:	d96a      	bls.n	8000e5c <__udivmoddi4+0x2b4>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4461      	add	r1, ip
 8000d8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d92:	eba1 010e 	sub.w	r1, r1, lr
 8000d96:	42a1      	cmp	r1, r4
 8000d98:	46c8      	mov	r8, r9
 8000d9a:	46a6      	mov	lr, r4
 8000d9c:	d356      	bcc.n	8000e4c <__udivmoddi4+0x2a4>
 8000d9e:	d053      	beq.n	8000e48 <__udivmoddi4+0x2a0>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x212>
 8000da2:	ebb3 0208 	subs.w	r2, r3, r8
 8000da6:	eb61 010e 	sbc.w	r1, r1, lr
 8000daa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dae:	fa22 f306 	lsr.w	r3, r2, r6
 8000db2:	40f1      	lsrs	r1, r6
 8000db4:	431f      	orrs	r7, r3
 8000db6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dba:	2600      	movs	r6, #0
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	f1c2 0320 	rsb	r3, r2, #32
 8000dc6:	40d8      	lsrs	r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	4301      	orrs	r1, r0
 8000dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de0:	fb07 3610 	mls	r6, r7, r0, r3
 8000de4:	0c0b      	lsrs	r3, r1, #16
 8000de6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dea:	fb00 f60e 	mul.w	r6, r0, lr
 8000dee:	429e      	cmp	r6, r3
 8000df0:	fa04 f402 	lsl.w	r4, r4, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x260>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfe:	d22f      	bcs.n	8000e60 <__udivmoddi4+0x2b8>
 8000e00:	429e      	cmp	r6, r3
 8000e02:	d92d      	bls.n	8000e60 <__udivmoddi4+0x2b8>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	b289      	uxth	r1, r1
 8000e0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e10:	fb07 3316 	mls	r3, r7, r6, r3
 8000e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e18:	fb06 f30e 	mul.w	r3, r6, lr
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x28a>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e28:	d216      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d914      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2e:	3e02      	subs	r6, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e38:	e738      	b.n	8000cac <__udivmoddi4+0x104>
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e705      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e3      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6f8      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e48:	454b      	cmp	r3, r9
 8000e4a:	d2a9      	bcs.n	8000da0 <__udivmoddi4+0x1f8>
 8000e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7a3      	b.n	8000da0 <__udivmoddi4+0x1f8>
 8000e58:	4646      	mov	r6, r8
 8000e5a:	e7ea      	b.n	8000e32 <__udivmoddi4+0x28a>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	e794      	b.n	8000d8a <__udivmoddi4+0x1e2>
 8000e60:	4640      	mov	r0, r8
 8000e62:	e7d1      	b.n	8000e08 <__udivmoddi4+0x260>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e77b      	b.n	8000d60 <__udivmoddi4+0x1b8>
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	e732      	b.n	8000cd4 <__udivmoddi4+0x12c>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e709      	b.n	8000c86 <__udivmoddi4+0xde>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	e742      	b.n	8000cfe <__udivmoddi4+0x156>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart6);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eaa:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f91f 	bl	8001108 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ef0:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000ef8:	89fa      	ldrh	r2, [r7, #14]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d102      	bne.n	8000f04 <_ZN14BufferedSerial4readEv+0x32>
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e016      	b.n	8000f32 <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	b291      	uxth	r1, r2
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	f8a2 1804 	strh.w	r1, [r2, #2052]	; 0x804
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	791b      	ldrb	r3, [r3, #4]
 8000f1c:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804

  return c;
 8000f30:	68bb      	ldr	r3, [r7, #8]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000f50:	461a      	mov	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f5a:	da25      	bge.n	8000fa8 <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4413      	add	r3, r2
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00b fcc3 	bl	800c8fc <memcpy>
    tx_head += length; // ) & tx_buf_mask
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d921      	bls.n	8000fde <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
 8000fa6:	e01a      	b.n	8000fde <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00b fca2 	bl	800c8fc <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d905      	bls.n	8000fd4 <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
    tx_head = length;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
  }

  // Send data:
  flush_tx_buffer();
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f804 	bl	8000fec <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00f      	beq.n	800101e <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 800100a:	429a      	cmp	r2, r3
 800100c:	d107      	bne.n	800101e <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
     tx_tail = 0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b20      	cmp	r3, #32
 800102a:	d10b      	bne.n	8001044 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8001038:	429a      	cmp	r2, r3
 800103a:	d003      	beq.n	8001044 <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 800103c:	4b31      	ldr	r3, [pc, #196]	; (8001104 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 8001048:	2300      	movs	r3, #0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d156      	bne.n	80010fc <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 800104e:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
 8001060:	429a      	cmp	r2, r3
 8001062:	d103      	bne.n	800106c <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808

  // Send data behind head:
  if (tx_tail < tx_head) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8001078:	429a      	cmp	r2, r3
 800107a:	d21c      	bcs.n	80010b6 <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8001096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	3304      	adds	r3, #4
 80010a0:	89ba      	ldrh	r2, [r7, #12]
 80010a2:	4619      	mov	r1, r3
 80010a4:	f009 fe12 	bl	800accc <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 80010b4:	e01e      	b.n	80010f4 <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 80010d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	3304      	adds	r3, #4
 80010da:	89fa      	ldrh	r2, [r7, #14]
 80010dc:	4619      	mov	r1, r3
 80010de:	f009 fdf5 	bl	800accc <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e8:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
    tx_tail = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
  }

  mutex = false;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e000      	b.n	80010fe <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 80010fc:	bf00      	nop
}
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200008a8 	.word	0x200008a8

08001108 <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3304      	adds	r3, #4
 8001118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111c:	4619      	mov	r1, r3
 800111e:	f009 fe53 	bl	800adc8 <HAL_UART_Receive_DMA>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681c      	ldr	r4, [r3, #0]
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <HAL_UART_TxCpltCallback+0x34>)
 8001152:	f7ff ffea 	bl	800112a <_ZN14BufferedSerial10get_handleEv>
 8001156:	4603      	mov	r3, r0
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	429c      	cmp	r4, r3
 800115c:	bf0c      	ite	eq
 800115e:	2301      	moveq	r3, #1
 8001160:	2300      	movne	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <HAL_UART_TxCpltCallback+0x34>)
 800116a:	f7ff ff3f 	bl	8000fec <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	bf00      	nop
 8001178:	2000009c 	.word	0x2000009c

0800117c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <HAL_UART_RxCpltCallback+0x18>)
 8001186:	f7ff ffbf 	bl	8001108 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000009c 	.word	0x2000009c

08001198 <_Z41__static_initialization_and_destruction_0ii>:
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d108      	bne.n	80011ba <_Z41__static_initialization_and_destruction_0ii+0x22>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d103      	bne.n	80011ba <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart6);
 80011b2:	4904      	ldr	r1, [pc, #16]	; (80011c4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80011b6:	f7ff fe61 	bl	8000e7c <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000d4c 	.word	0x20000d4c
 80011c8:	2000009c 	.word	0x2000009c

080011cc <_GLOBAL__sub_I_buff_serial>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff ffdf 	bl	8001198 <_Z41__static_initialization_and_destruction_0ii>
 80011da:	bd80      	pop	{r7, pc}

080011dc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	0a5a      	lsrs	r2, r3, #9
 80011ec:	490f      	ldr	r1, [pc, #60]	; (800122c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80011ee:	fba1 1202 	umull	r1, r2, r1, r2
 80011f2:	09d2      	lsrs	r2, r2, #7
 80011f4:	490e      	ldr	r1, [pc, #56]	; (8001230 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80011f6:	fb01 f202 	mul.w	r2, r1, r2
 80011fa:	1a9b      	subs	r3, r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	0a5b      	lsrs	r3, r3, #9
 8001204:	4a09      	ldr	r2, [pc, #36]	; (800122c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	09db      	lsrs	r3, r3, #7
 800120c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	441a      	add	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	00044b83 	.word	0x00044b83
 8001230:	3b9aca00 	.word	0x3b9aca00
 8001234:	00000000 	.word	0x00000000

08001238 <HAL_TIM_IC_CaptureCallback>:
static void MX_TIM4_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM3)  // if the interrupt source is channel1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a8e      	ldr	r2, [pc, #568]	; (8001480 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001246:	4293      	cmp	r3, r2
 8001248:	f040 80b7 	bne.w	80013ba <HAL_TIM_IC_CaptureCallback+0x182>
	{
		if (Is_First_Captured_c1==0) // if the first value is not captured
 800124c:	4b8d      	ldr	r3, [pc, #564]	; (8001484 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d120      	bne.n	8001296 <HAL_TIM_IC_CaptureCallback+0x5e>
		{
			IC_Val1_c1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001254:	2100      	movs	r1, #0
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f008 fe90 	bl	8009f7c <HAL_TIM_ReadCapturedValue>
 800125c:	4603      	mov	r3, r0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f910 	bl	8000484 <__aeabi_ui2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4987      	ldr	r1, [pc, #540]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x250>)
 800126a:	e9c1 2300 	strd	r2, r3, [r1]
			Is_First_Captured_c1 = 1;  // set the first captured as true
 800126e:	4b85      	ldr	r3, [pc, #532]	; (8001484 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a1a      	ldr	r2, [r3, #32]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 020a 	bic.w	r2, r2, #10
 8001282:	621a      	str	r2, [r3, #32]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6a1a      	ldr	r2, [r3, #32]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0202 	orr.w	r2, r2, #2
 8001292:	621a      	str	r2, [r3, #32]
 8001294:	e091      	b.n	80013ba <HAL_TIM_IC_CaptureCallback+0x182>
		}

		else if (Is_First_Captured_c1==1)   // if the first is already captured
 8001296:	4b7b      	ldr	r3, [pc, #492]	; (8001484 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	f040 808d 	bne.w	80013ba <HAL_TIM_IC_CaptureCallback+0x182>
		{
			IC_Val2_c1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80012a0:	2100      	movs	r1, #0
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f008 fe6a 	bl	8009f7c <HAL_TIM_ReadCapturedValue>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8ea 	bl	8000484 <__aeabi_ui2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4975      	ldr	r1, [pc, #468]	; (800148c <HAL_TIM_IC_CaptureCallback+0x254>)
 80012b6:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2_c1 > IC_Val1_c1)
 80012c2:	4b72      	ldr	r3, [pc, #456]	; (800148c <HAL_TIM_IC_CaptureCallback+0x254>)
 80012c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c8:	4b6f      	ldr	r3, [pc, #444]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff fbe3 	bl	8000a98 <__aeabi_dcmpgt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00d      	beq.n	80012f4 <HAL_TIM_IC_CaptureCallback+0xbc>
			{
				Difference_c1 = IC_Val2_c1-IC_Val1_c1;
 80012d8:	4b6c      	ldr	r3, [pc, #432]	; (800148c <HAL_TIM_IC_CaptureCallback+0x254>)
 80012da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012de:	4b6a      	ldr	r3, [pc, #424]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7fe ff90 	bl	8000208 <__aeabi_dsub>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4968      	ldr	r1, [pc, #416]	; (8001490 <HAL_TIM_IC_CaptureCallback+0x258>)
 80012ee:	e9c1 2300 	strd	r2, r3, [r1]
 80012f2:	e020      	b.n	8001336 <HAL_TIM_IC_CaptureCallback+0xfe>
			}

			else if (IC_Val1_c1 > IC_Val2_c1)
 80012f4:	4b64      	ldr	r3, [pc, #400]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fa:	4b64      	ldr	r3, [pc, #400]	; (800148c <HAL_TIM_IC_CaptureCallback+0x254>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff fbca 	bl	8000a98 <__aeabi_dcmpgt>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d015      	beq.n	8001336 <HAL_TIM_IC_CaptureCallback+0xfe>
			{
				Difference_c1 = (0xffff - IC_Val1_c1) + IC_Val2_c1;
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x250>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	a157      	add	r1, pc, #348	; (adr r1, 8001470 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001316:	f7fe ff77 	bl	8000208 <__aeabi_dsub>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	4b5a      	ldr	r3, [pc, #360]	; (800148c <HAL_TIM_IC_CaptureCallback+0x254>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7fe ff70 	bl	800020c <__adddf3>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4957      	ldr	r1, [pc, #348]	; (8001490 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001332:	e9c1 2300 	strd	r2, r3, [r1]
			}

			Distance_c1 = Difference_c1 * .034/2;
 8001336:	4b56      	ldr	r3, [pc, #344]	; (8001490 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001338:	e9d3 0100 	ldrd	r0, r1, [r3]
 800133c:	a34e      	add	r3, pc, #312	; (adr r3, 8001478 <HAL_TIM_IC_CaptureCallback+0x240>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f919 	bl	8000578 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001356:	f7ff fa39 	bl	80007cc <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	494d      	ldr	r1, [pc, #308]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001360:	e9c1 2300 	strd	r2, r3, [r1]
			if (Distance_c1 <= 3.0) Distance_c1 = 0.0;
 8001364:	4b4b      	ldr	r3, [pc, #300]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001370:	f7ff fb7e 	bl	8000a70 <__aeabi_dcmple>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <HAL_TIM_IC_CaptureCallback+0x150>
 800137a:	4946      	ldr	r1, [pc, #280]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9c1 2300 	strd	r2, r3, [r1]
			Is_First_Captured_c1 = 0; // set it back to false
 8001388:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6a1a      	ldr	r2, [r3, #32]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 020a 	bic.w	r2, r2, #10
 800139c:	621a      	str	r2, [r3, #32]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6a12      	ldr	r2, [r2, #32]
 80013a8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 80013aa:	4b3c      	ldr	r3, [pc, #240]	; (800149c <HAL_TIM_IC_CaptureCallback+0x264>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	4b3a      	ldr	r3, [pc, #232]	; (800149c <HAL_TIM_IC_CaptureCallback+0x264>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0202 	bic.w	r2, r2, #2
 80013b8:	60da      	str	r2, [r3, #12]
		}
	}

	if (htim->Instance == TIM4)  // if the interrupt source is channel1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a38      	ldr	r2, [pc, #224]	; (80014a0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	f040 80da 	bne.w	800157a <HAL_TIM_IC_CaptureCallback+0x342>
	{
		if (Is_First_Captured_c3==0) // if the first value is not captured
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d120      	bne.n	8001410 <HAL_TIM_IC_CaptureCallback+0x1d8>
		{
			IC_Val1_c3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80013ce:	2100      	movs	r1, #0
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f008 fdd3 	bl	8009f7c <HAL_TIM_ReadCapturedValue>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f853 	bl	8000484 <__aeabi_ui2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4931      	ldr	r1, [pc, #196]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80013e4:	e9c1 2300 	strd	r2, r3, [r1]
			Is_First_Captured_c3 = 1;  // set the first captured as true
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a1a      	ldr	r2, [r3, #32]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 020a 	bic.w	r2, r2, #10
 80013fc:	621a      	str	r2, [r3, #32]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a1a      	ldr	r2, [r3, #32]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0202 	orr.w	r2, r2, #2
 800140c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 800140e:	e0b4      	b.n	800157a <HAL_TIM_IC_CaptureCallback+0x342>
		else if (Is_First_Captured_c3==1)   // if the first is already captured
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	f040 80b0 	bne.w	800157a <HAL_TIM_IC_CaptureCallback+0x342>
			IC_Val2_c3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800141a:	2100      	movs	r1, #0
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f008 fdad 	bl	8009f7c <HAL_TIM_ReadCapturedValue>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f82d 	bl	8000484 <__aeabi_ui2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	491f      	ldr	r1, [pc, #124]	; (80014ac <HAL_TIM_IC_CaptureCallback+0x274>)
 8001430:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_c3 > IC_Val1_c3)
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_TIM_IC_CaptureCallback+0x274>)
 800143e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff fb26 	bl	8000a98 <__aeabi_dcmpgt>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d030      	beq.n	80014b4 <HAL_TIM_IC_CaptureCallback+0x27c>
				Difference_c3 = IC_Val2_c3-IC_Val1_c3;
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_TIM_IC_CaptureCallback+0x274>)
 8001454:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7fe fed3 	bl	8000208 <__aeabi_dsub>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4912      	ldr	r1, [pc, #72]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001468:	e9c1 2300 	strd	r2, r3, [r1]
 800146c:	e043      	b.n	80014f6 <HAL_TIM_IC_CaptureCallback+0x2be>
 800146e:	bf00      	nop
 8001470:	00000000 	.word	0x00000000
 8001474:	40efffe0 	.word	0x40efffe0
 8001478:	b020c49c 	.word	0xb020c49c
 800147c:	3fa16872 	.word	0x3fa16872
 8001480:	40000400 	.word	0x40000400
 8001484:	20001380 	.word	0x20001380
 8001488:	20001368 	.word	0x20001368
 800148c:	20001370 	.word	0x20001370
 8001490:	20001378 	.word	0x20001378
 8001494:	20001388 	.word	0x20001388
 8001498:	40080000 	.word	0x40080000
 800149c:	20000c18 	.word	0x20000c18
 80014a0:	40000800 	.word	0x40000800
 80014a4:	200013a8 	.word	0x200013a8
 80014a8:	20001390 	.word	0x20001390
 80014ac:	20001398 	.word	0x20001398
 80014b0:	200013a0 	.word	0x200013a0
			else if (IC_Val1_c3 > IC_Val2_c3)
 80014b4:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x360>)
 80014b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ba:	4b38      	ldr	r3, [pc, #224]	; (800159c <HAL_TIM_IC_CaptureCallback+0x364>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff faea 	bl	8000a98 <__aeabi_dcmpgt>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d015      	beq.n	80014f6 <HAL_TIM_IC_CaptureCallback+0x2be>
				Difference_c3 = (0xffff - IC_Val1_c3) + IC_Val2_c3;
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <HAL_TIM_IC_CaptureCallback+0x360>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	a12d      	add	r1, pc, #180	; (adr r1, 8001588 <HAL_TIM_IC_CaptureCallback+0x350>)
 80014d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014d6:	f7fe fe97 	bl	8000208 <__aeabi_dsub>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <HAL_TIM_IC_CaptureCallback+0x364>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7fe fe90 	bl	800020c <__adddf3>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	492b      	ldr	r1, [pc, #172]	; (80015a0 <HAL_TIM_IC_CaptureCallback+0x368>)
 80014f2:	e9c1 2300 	strd	r2, r3, [r1]
			Distance_c3 = Difference_c3 * .034/2;
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_TIM_IC_CaptureCallback+0x368>)
 80014f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fc:	a324      	add	r3, pc, #144	; (adr r3, 8001590 <HAL_TIM_IC_CaptureCallback+0x358>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f839 	bl	8000578 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001516:	f7ff f959 	bl	80007cc <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4921      	ldr	r1, [pc, #132]	; (80015a4 <HAL_TIM_IC_CaptureCallback+0x36c>)
 8001520:	e9c1 2300 	strd	r2, r3, [r1]
			if (Distance_c3 <= 3.0) Distance_c3 = 0.0;
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_TIM_IC_CaptureCallback+0x36c>)
 8001526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001530:	f7ff fa9e 	bl	8000a70 <__aeabi_dcmple>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <HAL_TIM_IC_CaptureCallback+0x310>
 800153a:	491a      	ldr	r1, [pc, #104]	; (80015a4 <HAL_TIM_IC_CaptureCallback+0x36c>)
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	e9c1 2300 	strd	r2, r3, [r1]
			Is_First_Captured_c3 = 0; // set it back to false
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_TIM_IC_CaptureCallback+0x374>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a1a      	ldr	r2, [r3, #32]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 020a 	bic.w	r2, r2, #10
 800155c:	621a      	str	r2, [r3, #32]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6a12      	ldr	r2, [r2, #32]
 8001568:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0x378>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0202 	bic.w	r2, r2, #2
 8001578:	60da      	str	r2, [r3, #12]
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	00000000 	.word	0x00000000
 800158c:	40efffe0 	.word	0x40efffe0
 8001590:	b020c49c 	.word	0xb020c49c
 8001594:	3fa16872 	.word	0x3fa16872
 8001598:	20001390 	.word	0x20001390
 800159c:	20001398 	.word	0x20001398
 80015a0:	200013a0 	.word	0x200013a0
 80015a4:	200013b0 	.word	0x200013b0
 80015a8:	40080000 	.word	0x40080000
 80015ac:	200013a8 	.word	0x200013a8
 80015b0:	20000c60 	.word	0x20000c60

080015b4 <delay_r>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_r (uint16_t time)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <delay_r+0x30>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 80015c6:	bf00      	nop
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <delay_r+0x30>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3f9      	bcc.n	80015c8 <delay_r+0x14>
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000c18 	.word	0x20000c18

080015e8 <delay_l>:

void delay_l (uint16_t time)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <delay_l+0x30>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 80015fa:	bf00      	nop
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <delay_l+0x30>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3f9      	bcc.n	80015fc <delay_l+0x14>
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000c60 	.word	0x20000c60

0800161c <HCSR04_Read_r>:

void HCSR04_Read_r (void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001626:	480b      	ldr	r0, [pc, #44]	; (8001654 <HCSR04_Read_r+0x38>)
 8001628:	f006 fd1a 	bl	8008060 <HAL_GPIO_WritePin>
	delay_r(10);  // wait for 10 us
 800162c:	200a      	movs	r0, #10
 800162e:	f7ff ffc1 	bl	80015b4 <delay_r>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <HCSR04_Read_r+0x38>)
 800163a:	f006 fd11 	bl	8008060 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HCSR04_Read_r+0x3c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HCSR04_Read_r+0x3c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0202 	orr.w	r2, r2, #2
 800164c:	60da      	str	r2, [r3, #12]
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40020800 	.word	0x40020800
 8001658:	20000c18 	.word	0x20000c18

0800165c <HCSR04_Read_l>:

void HCSR04_Read_l (void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001660:	2201      	movs	r2, #1
 8001662:	2120      	movs	r1, #32
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <HCSR04_Read_l+0x34>)
 8001666:	f006 fcfb 	bl	8008060 <HAL_GPIO_WritePin>
	delay_l(10);
 800166a:	200a      	movs	r0, #10
 800166c:	f7ff ffbc 	bl	80015e8 <delay_l>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001670:	2200      	movs	r2, #0
 8001672:	2120      	movs	r1, #32
 8001674:	4806      	ldr	r0, [pc, #24]	; (8001690 <HCSR04_Read_l+0x34>)
 8001676:	f006 fcf3 	bl	8008060 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HCSR04_Read_l+0x38>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HCSR04_Read_l+0x38>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0202 	orr.w	r2, r2, #2
 8001688:	60da      	str	r2, [r3, #12]
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020400 	.word	0x40020400
 8001694:	20000c60 	.word	0x20000c60

08001698 <complementary_r>:
  U_hat += + K*(U-H*U_hat);
  P = (1-K*H)*P+Q;
  return U_hat;
}

double complementary_r(double input_dist) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	ed87 0b00 	vstr	d0, [r7]
	static double readings_c[ARRAYNUM];      // the readings from the analog input
	static int idx = 0;              // the index of the current reading
	static double total_c = 0.0;                  // the running total

	// subtract the last reading:
	total_c = total_c - readings_c[idx];
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <complementary_r+0xa0>)
 80016a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <complementary_r+0xa4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a24      	ldr	r2, [pc, #144]	; (8001740 <complementary_r+0xa8>)
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe fda7 	bl	8000208 <__aeabi_dsub>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	491e      	ldr	r1, [pc, #120]	; (8001738 <complementary_r+0xa0>)
 80016c0:	e9c1 2300 	strd	r2, r3, [r1]
	// read from the sensor:
	readings_c[idx] = input_dist;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <complementary_r+0xa4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <complementary_r+0xa8>)
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	18d1      	adds	r1, r2, r3
 80016ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016d2:	e9c1 2300 	strd	r2, r3, [r1]
	// add the reading to the total:
	total_c = total_c + readings_c[idx];
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <complementary_r+0xa4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a19      	ldr	r2, [pc, #100]	; (8001740 <complementary_r+0xa8>)
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <complementary_r+0xa0>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fd8f 	bl	800020c <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4911      	ldr	r1, [pc, #68]	; (8001738 <complementary_r+0xa0>)
 80016f4:	e9c1 2300 	strd	r2, r3, [r1]
	// advance to the next position in the array:
	idx = idx + 1;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <complementary_r+0xa4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a0f      	ldr	r2, [pc, #60]	; (800173c <complementary_r+0xa4>)
 8001700:	6013      	str	r3, [r2, #0]

	// if we're at the end of the array...
	if (idx >= ARRAYNUM) {
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <complementary_r+0xa4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	dd02      	ble.n	8001710 <complementary_r+0x78>
	 // ...wrap around to the beginning:
	 idx = 0;
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <complementary_r+0xa4>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
	}
	// calculate the average:
	return total_c / ARRAYNUM;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <complementary_r+0xa0>)
 8001712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <complementary_r+0xac>)
 800171c:	f7ff f856 	bl	80007cc <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	ec43 2b17 	vmov	d7, r2, r3
}
 8001728:	eeb0 0a47 	vmov.f32	s0, s14
 800172c:	eef0 0a67 	vmov.f32	s1, s15
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200013b8 	.word	0x200013b8
 800173c:	200013c0 	.word	0x200013c0
 8001740:	200013c8 	.word	0x200013c8
 8001744:	40080000 	.word	0x40080000

08001748 <complementary_l>:

double complementary_l(double input_dist) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	ed87 0b00 	vstr	d0, [r7]
	static double readings_c[ARRAYNUM];      // the readings from the analog input
	static int idx = 0;              // the index of the current reading
	static double total_c = 0.0;                  // the running total

	// subtract the last reading:
	total_c = total_c - readings_c[idx];
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <complementary_l+0xa0>)
 8001754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <complementary_l+0xa4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <complementary_l+0xa8>)
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe fd4f 	bl	8000208 <__aeabi_dsub>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	491e      	ldr	r1, [pc, #120]	; (80017e8 <complementary_l+0xa0>)
 8001770:	e9c1 2300 	strd	r2, r3, [r1]
	// read from the sensor:
	readings_c[idx] = input_dist;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <complementary_l+0xa4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <complementary_l+0xa8>)
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	18d1      	adds	r1, r2, r3
 800177e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001782:	e9c1 2300 	strd	r2, r3, [r1]
	// add the reading to the total:
	total_c = total_c + readings_c[idx];
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <complementary_l+0xa4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <complementary_l+0xa8>)
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <complementary_l+0xa0>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe fd37 	bl	800020c <__adddf3>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4911      	ldr	r1, [pc, #68]	; (80017e8 <complementary_l+0xa0>)
 80017a4:	e9c1 2300 	strd	r2, r3, [r1]
	// advance to the next position in the array:
	idx = idx + 1;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <complementary_l+0xa4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <complementary_l+0xa4>)
 80017b0:	6013      	str	r3, [r2, #0]

	// if we're at the end of the array...
	if (idx >= ARRAYNUM) {
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <complementary_l+0xa4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	dd02      	ble.n	80017c0 <complementary_l+0x78>
	 // ...wrap around to the beginning:
	 idx = 0;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <complementary_l+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
	}
	// calculate the average:
	return total_c / ARRAYNUM;
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <complementary_l+0xa0>)
 80017c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <complementary_l+0xac>)
 80017cc:	f7fe fffe 	bl	80007cc <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80017d8:	eeb0 0a47 	vmov.f32	s0, s14
 80017dc:	eef0 0a67 	vmov.f32	s1, s15
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200013e0 	.word	0x200013e0
 80017ec:	200013e8 	.word	0x200013e8
 80017f0:	200013f0 	.word	0x200013f0
 80017f4:	40080000 	.word	0x40080000

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fe:	f004 fd77 	bl	80062f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001802:	f000 f89b 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001806:	f000 fc0d 	bl	8002024 <MX_GPIO_Init>
  MX_DMA_Init();
 800180a:	f000 fbd3 	bl	8001fb4 <MX_DMA_Init>
  MX_ETH_Init();
 800180e:	f000 f95f 	bl	8001ad0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001812:	f000 fb4d 	bl	8001eb0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001816:	f000 fb9f 	bl	8001f58 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 800181a:	f000 fb73 	bl	8001f04 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800181e:	f000 f8f7 	bl	8001a10 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001822:	f000 f9a3 	bl	8001b6c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001826:	f000 fa63 	bl	8001cf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800182a:	f000 fad1 	bl	8001dd0 <MX_TIM4_Init>
  MX_TIM1_Init();
 800182e:	f000 f9dd 	bl	8001bec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001832:	2100      	movs	r1, #0
 8001834:	483a      	ldr	r0, [pc, #232]	; (8001920 <main+0x128>)
 8001836:	f007 ff4b 	bl	80096d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800183a:	2100      	movs	r1, #0
 800183c:	4839      	ldr	r0, [pc, #228]	; (8001924 <main+0x12c>)
 800183e:	f007 ff47 	bl	80096d0 <HAL_TIM_IC_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8001842:	2202      	movs	r2, #2
 8001844:	4938      	ldr	r1, [pc, #224]	; (8001928 <main+0x130>)
 8001846:	4839      	ldr	r0, [pc, #228]	; (800192c <main+0x134>)
 8001848:	f004 fe2c 	bl	80064a4 <HAL_ADC_Start_DMA>
  uint32_t start_tick = HAL_GetTick();
 800184c:	f004 fdb6 	bl	80063bc <HAL_GetTick>
 8001850:	61f8      	str	r0, [r7, #28]
  init_neopixel(WS2812);
 8001852:	2001      	movs	r0, #1
 8001854:	f004 fa5a 	bl	8005d0c <init_neopixel>
  all_black_render();
 8001858:	f004 fa7a 	bl	8005d50 <all_black_render>
  setup();
 800185c:	f002 fab6 	bl	8003dcc <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  double r_sonar = 0.0;
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  double l_sonar = 0.0;
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  if(HAL_GetTick() - start_tick >= 100) {
 8001878:	f004 fda0 	bl	80063bc <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b63      	cmp	r3, #99	; 0x63
 8001884:	d91c      	bls.n	80018c0 <main+0xc8>
		  HCSR04_Read_r();
 8001886:	f7ff fec9 	bl	800161c <HCSR04_Read_r>
		  HCSR04_Read_l();
 800188a:	f7ff fee7 	bl	800165c <HCSR04_Read_l>

		  // for Kalmanfilter
//		  kaldist_c1 = kalman(Distance_c1);
//		  kaldist_c3 = kalman(Distance_c3);

		  r_sonar = complementary_r(Distance_c1);
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <main+0x138>)
 8001890:	ed93 7b00 	vldr	d7, [r3]
 8001894:	eeb0 0a47 	vmov.f32	s0, s14
 8001898:	eef0 0a67 	vmov.f32	s1, s15
 800189c:	f7ff fefc 	bl	8001698 <complementary_r>
 80018a0:	ed87 0b04 	vstr	d0, [r7, #16]
		  l_sonar = complementary_l(Distance_c3);
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <main+0x13c>)
 80018a6:	ed93 7b00 	vldr	d7, [r3]
 80018aa:	eeb0 0a47 	vmov.f32	s0, s14
 80018ae:	eef0 0a67 	vmov.f32	s1, s15
 80018b2:	f7ff ff49 	bl	8001748 <complementary_l>
 80018b6:	ed87 0b02 	vstr	d0, [r7, #8]

		  start_tick = HAL_GetTick();
 80018ba:	f004 fd7f 	bl	80063bc <HAL_GetTick>
 80018be:	61f8      	str	r0, [r7, #28]
	  }


	  // send it to the computer as ASCII digits
	  //render_raising_mode(215,125,123,5);
	  uint8_t led_mode = loop(XY[0], XY[1], r_sonar, l_sonar);
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <main+0x130>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a18      	ldr	r2, [pc, #96]	; (8001928 <main+0x130>)
 80018c6:	6852      	ldr	r2, [r2, #4]
 80018c8:	ed97 1b02 	vldr	d1, [r7, #8]
 80018cc:	ed97 0b04 	vldr	d0, [r7, #16]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fb04 	bl	8003ee0 <loop>
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]


	  if(mode==HALT)
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <main+0x140>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1bd      	bne.n	8001860 <main+0x68>
	  {
		  if (led_mode == 0) render_breath_mode(0,255,0,1); //B G R MAYBE RGB: (0,188,227)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <main+0x100>
 80018ea:	2301      	movs	r3, #1
 80018ec:	2200      	movs	r2, #0
 80018ee:	21ff      	movs	r1, #255	; 0xff
 80018f0:	2000      	movs	r0, #0
 80018f2:	f004 fa5b 	bl	8005dac <render_breath_mode>
 80018f6:	e7b3      	b.n	8001860 <main+0x68>
		  else if (led_mode == 1) render_breath_mode(0,0,255,1);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d106      	bne.n	800190c <main+0x114>
 80018fe:	2301      	movs	r3, #1
 8001900:	22ff      	movs	r2, #255	; 0xff
 8001902:	2100      	movs	r1, #0
 8001904:	2000      	movs	r0, #0
 8001906:	f004 fa51 	bl	8005dac <render_breath_mode>
 800190a:	e7a9      	b.n	8001860 <main+0x68>
		  else if (led_mode == 2) render_breath_mode(255,0,0,1);
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d1a6      	bne.n	8001860 <main+0x68>
 8001912:	2301      	movs	r3, #1
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	20ff      	movs	r0, #255	; 0xff
 800191a:	f004 fa47 	bl	8005dac <render_breath_mode>
  {
 800191e:	e79f      	b.n	8001860 <main+0x68>
 8001920:	20000c18 	.word	0x20000c18
 8001924:	20000c60 	.word	0x20000c60
 8001928:	2000135c 	.word	0x2000135c
 800192c:	20000a24 	.word	0x20000a24
 8001930:	20001388 	.word	0x20001388
 8001934:	200013b0 	.word	0x200013b0
 8001938:	20001ea5 	.word	0x20001ea5

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	; 0x50
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	2230      	movs	r2, #48	; 0x30
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f00a ffe4 	bl	800c918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <SystemClock_Config+0xcc>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <SystemClock_Config+0xcc>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <SystemClock_Config+0xcc>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800197c:	2300      	movs	r3, #0
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <SystemClock_Config+0xd0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <SystemClock_Config+0xd0>)
 8001986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <SystemClock_Config+0xd0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001998:	2301      	movs	r3, #1
 800199a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800199c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a2:	2302      	movs	r3, #2
 80019a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019ac:	2304      	movs	r3, #4
 80019ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019b0:	23a8      	movs	r3, #168	; 0xa8
 80019b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019b8:	2307      	movs	r3, #7
 80019ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f006 fe5b 	bl	800867c <HAL_RCC_OscConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019cc:	f000 fc28 	bl	8002220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d0:	230f      	movs	r3, #15
 80019d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d4:	2302      	movs	r3, #2
 80019d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80019e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	2105      	movs	r1, #5
 80019ee:	4618      	mov	r0, r3
 80019f0:	f007 f8bc 	bl	8008b6c <HAL_RCC_ClockConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019fa:	f000 fc11 	bl	8002220 <Error_Handler>
  }
}
 80019fe:	bf00      	nop
 8001a00:	3750      	adds	r7, #80	; 0x50
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40007000 	.word	0x40007000

08001a10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a16:	463b      	mov	r3, r7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a24:	4a28      	ldr	r2, [pc, #160]	; (8001ac8 <MX_ADC1_Init+0xb8>)
 8001a26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a50:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <MX_ADC1_Init+0xbc>)
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a6e:	4815      	ldr	r0, [pc, #84]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a70:	f004 fcd4 	bl	800641c <HAL_ADC_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a7a:	f000 fbd1 	bl	8002220 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001a86:	2304      	movs	r3, #4
 8001a88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001a90:	f004 fe36 	bl	8006700 <HAL_ADC_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a9a:	f000 fbc1 	bl	8002220 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <MX_ADC1_Init+0xb4>)
 8001aac:	f004 fe28 	bl	8006700 <HAL_ADC_ConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001ab6:	f000 fbb3 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000a24 	.word	0x20000a24
 8001ac8:	40012000 	.word	0x40012000
 8001acc:	0f000001 	.word	0x0f000001

08001ad0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <MX_ETH_Init+0x84>)
 8001ad6:	4a20      	ldr	r2, [pc, #128]	; (8001b58 <MX_ETH_Init+0x88>)
 8001ad8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001ae8:	22e1      	movs	r2, #225	; 0xe1
 8001aea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b00:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <MX_ETH_Init+0x8c>)
 8001b02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b0a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <MX_ETH_Init+0x90>)
 8001b10:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b14:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <MX_ETH_Init+0x94>)
 8001b16:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b1a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b1e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_ETH_Init+0x84>)
 8001b22:	f005 fdb1 	bl	8007688 <HAL_ETH_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001b2c:	f000 fb78 	bl	8002220 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b30:	2238      	movs	r2, #56	; 0x38
 8001b32:	2100      	movs	r1, #0
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <MX_ETH_Init+0x98>)
 8001b36:	f00a feef 	bl	800c918 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_ETH_Init+0x98>)
 8001b3c:	2221      	movs	r2, #33	; 0x21
 8001b3e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_ETH_Init+0x98>)
 8001b42:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001b46:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <MX_ETH_Init+0x98>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000acc 	.word	0x20000acc
 8001b58:	40028000 	.word	0x40028000
 8001b5c:	20001408 	.word	0x20001408
 8001b60:	20000984 	.word	0x20000984
 8001b64:	200008e4 	.word	0x200008e4
 8001b68:	200008ac 	.word	0x200008ac

08001b6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <MX_I2C1_Init+0x78>)
 8001b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <MX_I2C1_Init+0x7c>)
 8001b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001baa:	f006 fa8b 	bl	80080c4 <HAL_I2C_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bb4:	f000 fb34 	bl	8002220 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001bbc:	f006 fbc6 	bl	800834c <HAL_I2CEx_ConfigAnalogFilter>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001bc6:	f000 fb2b 	bl	8002220 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001bce:	f006 fbf9 	bl	80083c4 <HAL_I2CEx_ConfigDigitalFilter>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001bd8:	f000 fb22 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000b7c 	.word	0x20000b7c
 8001be4:	40005400 	.word	0x40005400
 8001be8:	00061a80 	.word	0x00061a80

08001bec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b092      	sub	sp, #72	; 0x48
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	615a      	str	r2, [r3, #20]
 8001c0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2220      	movs	r2, #32
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f00a fe7e 	bl	800c918 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001c1e:	4a33      	ldr	r2, [pc, #204]	; (8001cec <MX_TIM1_Init+0x100>)
 8001c20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 106-1;
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001c30:	2269      	movs	r2, #105	; 0x69
 8001c32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c34:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c46:	4828      	ldr	r0, [pc, #160]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001c48:	f007 f9ff 	bl	800904a <HAL_TIM_PWM_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001c52:	f000 fae5 	bl	8002220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c62:	4619      	mov	r1, r3
 8001c64:	4820      	ldr	r0, [pc, #128]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001c66:	f008 ff01 	bl	800aa6c <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001c70:	f000 fad6 	bl	8002220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c74:	2360      	movs	r3, #96	; 0x60
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	2200      	movs	r2, #0
 8001c96:	4619      	mov	r1, r3
 8001c98:	4813      	ldr	r0, [pc, #76]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001c9a:	f007 ffe5 	bl	8009c68 <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001ca4:	f000 fabc 	bl	8002220 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001ccc:	f008 ff4a 	bl	800ab64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001cd6:	f000 faa3 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cda:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <MX_TIM1_Init+0xfc>)
 8001cdc:	f003 faf4 	bl	80052c8 <HAL_TIM_MspPostInit>

}
 8001ce0:	bf00      	nop
 8001ce2:	3748      	adds	r7, #72	; 0x48
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000bd0 	.word	0x20000bd0
 8001cec:	40010000 	.word	0x40010000

08001cf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0318 	add.w	r3, r7, #24
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001d1c:	4a2b      	ldr	r2, [pc, #172]	; (8001dcc <MX_TIM3_Init+0xdc>)
 8001d1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001d22:	2253      	movs	r2, #83	; 0x53
 8001d24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d40:	4821      	ldr	r0, [pc, #132]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001d42:	f007 f933 	bl	8008fac <HAL_TIM_Base_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001d4c:	f000 fa68 	bl	8002220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d54:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d56:	f107 0318 	add.w	r3, r7, #24
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001d5e:	f008 f845 	bl	8009dec <HAL_TIM_ConfigClockSource>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d68:	f000 fa5a 	bl	8002220 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001d6c:	4816      	ldr	r0, [pc, #88]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001d6e:	f007 fc55 	bl	800961c <HAL_TIM_IC_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d78:	f000 fa52 	bl	8002220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480f      	ldr	r0, [pc, #60]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001d8c:	f008 fe6e 	bl	800aa6c <HAL_TIMEx_MasterConfigSynchronization>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001d96:	f000 fa43 	bl	8002220 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001daa:	463b      	mov	r3, r7
 8001dac:	2200      	movs	r2, #0
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_TIM3_Init+0xd8>)
 8001db2:	f007 febd 	bl	8009b30 <HAL_TIM_IC_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001dbc:	f000 fa30 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	; 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000c18 	.word	0x20000c18
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0318 	add.w	r3, r7, #24
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dee:	463b      	mov	r3, r7
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001dfc:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <MX_TIM4_Init+0xdc>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001e02:	2253      	movs	r2, #83	; 0x53
 8001e04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e0c:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e20:	4821      	ldr	r0, [pc, #132]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001e22:	f007 f8c3 	bl	8008fac <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001e2c:	f000 f9f8 	bl	8002220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e34:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	481a      	ldr	r0, [pc, #104]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001e3e:	f007 ffd5 	bl	8009dec <HAL_TIM_ConfigClockSource>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001e48:	f000 f9ea 	bl	8002220 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001e4c:	4816      	ldr	r0, [pc, #88]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001e4e:	f007 fbe5 	bl	800961c <HAL_TIM_IC_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e58:	f000 f9e2 	bl	8002220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001e6c:	f008 fdfe 	bl	800aa6c <HAL_TIMEx_MasterConfigSynchronization>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001e76:	f000 f9d3 	bl	8002220 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_TIM4_Init+0xd8>)
 8001e92:	f007 fe4d 	bl	8009b30 <HAL_TIM_IC_ConfigChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001e9c:	f000 f9c0 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000c60 	.word	0x20000c60
 8001eac:	40000800 	.word	0x40000800

08001eb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <MX_USART3_UART_Init+0x50>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ebc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ec0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ee8:	f008 fea2 	bl	800ac30 <HAL_UART_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ef2:	f000 f995 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000d08 	.word	0x20000d08
 8001f00:	40004800 	.word	0x40004800

08001f04 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_USART6_UART_Init+0x4c>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <MX_USART6_UART_Init+0x50>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_USART6_UART_Init+0x4c>)
 8001f10:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001f14:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_USART6_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_USART6_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_USART6_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_USART6_UART_Init+0x4c>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_USART6_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_USART6_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_USART6_UART_Init+0x4c>)
 8001f3c:	f008 fe78 	bl	800ac30 <HAL_UART_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f46:	f000 f96b 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000d4c 	.word	0x20000d4c
 8001f54:	40011400 	.word	0x40011400

08001f58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f66:	2204      	movs	r2, #4
 8001f68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f9c:	f006 fa51 	bl	8008442 <HAL_PCD_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001fa6:	f000 f93b 	bl	8002220 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000e50 	.word	0x20000e50

08001fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <MX_DMA_Init+0x6c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <MX_DMA_Init+0x6c>)
 8001fc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <MX_DMA_Init+0x6c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2039      	movs	r0, #57	; 0x39
 8001fdc:	f004 ff1b 	bl	8006e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001fe0:	2039      	movs	r0, #57	; 0x39
 8001fe2:	f004 ff34 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	203b      	movs	r0, #59	; 0x3b
 8001fec:	f004 ff13 	bl	8006e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001ff0:	203b      	movs	r0, #59	; 0x3b
 8001ff2:	f004 ff2c 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	203c      	movs	r0, #60	; 0x3c
 8001ffc:	f004 ff0b 	bl	8006e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002000:	203c      	movs	r0, #60	; 0x3c
 8002002:	f004 ff24 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	2045      	movs	r0, #69	; 0x45
 800200c:	f004 ff03 	bl	8006e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002010:	2045      	movs	r0, #69	; 0x45
 8002012:	f004 ff1c 	bl	8006e4e <HAL_NVIC_EnableIRQ>

}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	; 0x30
 8002028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	4b72      	ldr	r3, [pc, #456]	; (8002208 <MX_GPIO_Init+0x1e4>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a71      	ldr	r2, [pc, #452]	; (8002208 <MX_GPIO_Init+0x1e4>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b6f      	ldr	r3, [pc, #444]	; (8002208 <MX_GPIO_Init+0x1e4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	4b6b      	ldr	r3, [pc, #428]	; (8002208 <MX_GPIO_Init+0x1e4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a6a      	ldr	r2, [pc, #424]	; (8002208 <MX_GPIO_Init+0x1e4>)
 8002060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b68      	ldr	r3, [pc, #416]	; (8002208 <MX_GPIO_Init+0x1e4>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b64      	ldr	r3, [pc, #400]	; (8002208 <MX_GPIO_Init+0x1e4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a63      	ldr	r2, [pc, #396]	; (8002208 <MX_GPIO_Init+0x1e4>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b61      	ldr	r3, [pc, #388]	; (8002208 <MX_GPIO_Init+0x1e4>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <MX_GPIO_Init+0x1e4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a5c      	ldr	r2, [pc, #368]	; (8002208 <MX_GPIO_Init+0x1e4>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b5a      	ldr	r3, [pc, #360]	; (8002208 <MX_GPIO_Init+0x1e4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b56      	ldr	r3, [pc, #344]	; (8002208 <MX_GPIO_Init+0x1e4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a55      	ldr	r2, [pc, #340]	; (8002208 <MX_GPIO_Init+0x1e4>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b53      	ldr	r3, [pc, #332]	; (8002208 <MX_GPIO_Init+0x1e4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4b4f      	ldr	r3, [pc, #316]	; (8002208 <MX_GPIO_Init+0x1e4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a4e      	ldr	r2, [pc, #312]	; (8002208 <MX_GPIO_Init+0x1e4>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <MX_GPIO_Init+0x1e4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4b48      	ldr	r3, [pc, #288]	; (8002208 <MX_GPIO_Init+0x1e4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a47      	ldr	r2, [pc, #284]	; (8002208 <MX_GPIO_Init+0x1e4>)
 80020ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b45      	ldr	r3, [pc, #276]	; (8002208 <MX_GPIO_Init+0x1e4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_5|LD2_Pin, GPIO_PIN_RESET);
 80020fe:	2200      	movs	r2, #0
 8002100:	f244 01a1 	movw	r1, #16545	; 0x40a1
 8002104:	4841      	ldr	r0, [pc, #260]	; (800220c <MX_GPIO_Init+0x1e8>)
 8002106:	f005 ffab 	bl	8008060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8002110:	483f      	ldr	r0, [pc, #252]	; (8002210 <MX_GPIO_Init+0x1ec>)
 8002112:	f005 ffa5 	bl	8008060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	2140      	movs	r1, #64	; 0x40
 800211a:	483e      	ldr	r0, [pc, #248]	; (8002214 <MX_GPIO_Init+0x1f0>)
 800211c:	f005 ffa0 	bl	8008060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002120:	2200      	movs	r2, #0
 8002122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002126:	483c      	ldr	r0, [pc, #240]	; (8002218 <MX_GPIO_Init+0x1f4>)
 8002128:	f005 ff9a 	bl	8008060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800212c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002132:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	4619      	mov	r1, r3
 8002142:	4835      	ldr	r0, [pc, #212]	; (8002218 <MX_GPIO_Init+0x1f4>)
 8002144:	f005 fdc8 	bl	8007cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : e_stop_Pin */
  GPIO_InitStruct.Pin = e_stop_Pin;
 8002148:	2340      	movs	r3, #64	; 0x40
 800214a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800214c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002152:	2302      	movs	r3, #2
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(e_stop_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	4619      	mov	r1, r3
 800215c:	482f      	ldr	r0, [pc, #188]	; (800221c <MX_GPIO_Init+0x1f8>)
 800215e:	f005 fdbb 	bl	8007cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB5 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_5|LD2_Pin;
 8002162:	f244 03a1 	movw	r3, #16545	; 0x40a1
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002168:	2301      	movs	r3, #1
 800216a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4619      	mov	r1, r3
 800217a:	4824      	ldr	r0, [pc, #144]	; (800220c <MX_GPIO_Init+0x1e8>)
 800217c:	f005 fdac 	bl	8007cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002180:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002186:	2301      	movs	r3, #1
 8002188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4619      	mov	r1, r3
 8002198:	481d      	ldr	r0, [pc, #116]	; (8002210 <MX_GPIO_Init+0x1ec>)
 800219a:	f005 fd9d 	bl	8007cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800219e:	2340      	movs	r3, #64	; 0x40
 80021a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4817      	ldr	r0, [pc, #92]	; (8002214 <MX_GPIO_Init+0x1f0>)
 80021b6:	f005 fd8f 	bl	8007cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	4811      	ldr	r0, [pc, #68]	; (8002214 <MX_GPIO_Init+0x1f0>)
 80021ce:	f005 fd83 	bl	8007cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	2301      	movs	r3, #1
 80021da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	480b      	ldr	r0, [pc, #44]	; (8002218 <MX_GPIO_Init+0x1f4>)
 80021ec:	f005 fd74 	bl	8007cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2017      	movs	r0, #23
 80021f6:	f004 fe0e 	bl	8006e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021fa:	2017      	movs	r0, #23
 80021fc:	f004 fe27 	bl	8006e4e <HAL_NVIC_EnableIRQ>

}
 8002200:	bf00      	nop
 8002202:	3730      	adds	r7, #48	; 0x30
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	40020400 	.word	0x40020400
 8002210:	40021000 	.word	0x40021000
 8002214:	40021800 	.word	0x40021800
 8002218:	40020800 	.word	0x40020800
 800221c:	40020000 	.word	0x40020000

08002220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002224:	b672      	cpsid	i
}
 8002226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002228:	e7fe      	b.n	8002228 <Error_Handler+0x8>
	...

0800222c <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <_ZN13STM32HardwareC1Ev+0x1c>)
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	2000009c 	.word	0x2000009c

0800224c <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fe2f 	bl	8000ebc <_ZN14BufferedSerial4initEv>
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fe2d 	bl	8000ed2 <_ZN14BufferedSerial4readEv>
 8002278:	4603      	mov	r3, r0
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fe51 	bl	8000f3e <_ZN14BufferedSerial5writeEPKhi>
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	f004 f886 	bl	80063bc <HAL_GetTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80022ba:	b480      	push	{r7}
 80022bc:	b087      	sub	sp, #28
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 80022c6:	463b      	mov	r3, r7
 80022c8:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	15db      	asrs	r3, r3, #23
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80022e0:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0159      	lsls	r1, r3, #5
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	b2ca      	uxtb	r2, r1
 8002312:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	10d9      	asrs	r1, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	b2ca      	uxtb	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	12d9      	asrs	r1, r3, #11
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	b2ca      	uxtb	r2, r1
 800232e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	b25a      	sxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	14db      	asrs	r3, r3, #19
 800233a:	b25b      	sxtb	r3, r3
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	b25b      	sxtb	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b259      	sxtb	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	b2ca      	uxtb	r2, r1
 800234e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	111b      	asrs	r3, r3, #4
 8002354:	b2da      	uxtb	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	1c59      	adds	r1, r3, #1
 800235a:	6079      	str	r1, [r7, #4]
 800235c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8002364:	edd7 7a00 	vldr	s15, [r7]
 8002368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d508      	bpl.n	8002384 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3b01      	subs	r3, #1
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8002384:	2308      	movs	r3, #8
  }
 8002386:	4618      	mov	r0, r3
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3303      	adds	r3, #3
 80023a4:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0207 	and.w	r2, r3, #7
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	00da      	lsls	r2, r3, #3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	02da      	lsls	r2, r3, #11
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	04db      	lsls	r3, r3, #19
 80023ec:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 80023f0:	431a      	orrs	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4313      	orrs	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9e>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8002428:	05db      	lsls	r3, r3, #23
 800242a:	431a      	orrs	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	431a      	orrs	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	601a      	str	r2, [r3, #0]

    return 8;
 8002448:	2308      	movs	r3, #8
  }
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_ZN3ros3MsgC1Ev>:
class Msg
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <_ZN3ros3MsgC1Ev+0x1c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	0800d0bc 	.word	0x0800d0bc

08002498 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
      data()
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ffe8 	bl	8002478 <_ZN3ros3MsgC1Ev>
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ffcf 	bl	8002456 <_ZN3ros4TimeC1Ev>
    {
    }
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	0800d0a4 	.word	0x0800d0a4

080024c8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	b2ca      	uxtb	r2, r1
 80024e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	0a19      	lsrs	r1, r3, #8
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3301      	adds	r3, #1
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	4413      	add	r3, r2
 80024f2:	b2ca      	uxtb	r2, r1
 80024f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	0c19      	lsrs	r1, r3, #16
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3302      	adds	r3, #2
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	4413      	add	r3, r2
 8002504:	b2ca      	uxtb	r2, r1
 8002506:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	0e19      	lsrs	r1, r3, #24
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3303      	adds	r3, #3
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	b2ca      	uxtb	r2, r1
 8002518:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3304      	adds	r3, #4
 800251e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	4413      	add	r3, r2
 800252a:	b2ca      	uxtb	r2, r1
 800252c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0a19      	lsrs	r1, r3, #8
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3301      	adds	r3, #1
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	4413      	add	r3, r2
 800253c:	b2ca      	uxtb	r2, r1
 800253e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	0c19      	lsrs	r1, r3, #16
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3302      	adds	r3, #2
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	4413      	add	r3, r2
 800254e:	b2ca      	uxtb	r2, r1
 8002550:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	0e19      	lsrs	r1, r3, #24
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3303      	adds	r3, #3
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	4413      	add	r3, r2
 8002560:	b2ca      	uxtb	r2, r1
 8002562:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3304      	adds	r3, #4
 8002568:	60fb      	str	r3, [r7, #12]
      return offset;
 800256a:	68fb      	ldr	r3, [r7, #12]
    }
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	4413      	add	r3, r2
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3301      	adds	r3, #1
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	440b      	add	r3, r1
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3302      	adds	r3, #2
 80025b2:	6839      	ldr	r1, [r7, #0]
 80025b4:	440b      	add	r3, r1
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3303      	adds	r3, #3
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	440b      	add	r3, r1
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3304      	adds	r3, #4
 80025da:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3301      	adds	r3, #1
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	440b      	add	r3, r1
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3302      	adds	r3, #2
 8002608:	6839      	ldr	r1, [r7, #0]
 800260a:	440b      	add	r3, r1
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3303      	adds	r3, #3
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	440b      	add	r3, r1
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	061b      	lsls	r3, r3, #24
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3304      	adds	r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
     return offset;
 8002632:	68fb      	ldr	r3, [r7, #12]
    }
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	0800cc48 	.word	0x0800cc48

0800265c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	0800cc58 	.word	0x0800cc58

08002678 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fef8 	bl	8002478 <_ZN3ros3MsgC1Ev>
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	809a      	strh	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a07      	ldr	r2, [pc, #28]	; (80026bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a06      	ldr	r2, [pc, #24]	; (80026bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80026a4:	611a      	str	r2, [r3, #16]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	615a      	str	r2, [r3, #20]
    {
    }
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	0800d08c 	.word	0x0800d08c
 80026bc:	0800cc7c 	.word	0x0800cc7c

080026c0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8899      	ldrh	r1, [r3, #4]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	b2ca      	uxtb	r2, r1
 80026da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	889b      	ldrh	r3, [r3, #4]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	b299      	uxth	r1, r3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3301      	adds	r3, #1
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	b2ca      	uxtb	r2, r1
 80026ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	3302      	adds	r3, #2
 80026f4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd fd78 	bl	80001f0 <strlen>
 8002700:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4413      	add	r3, r2
 8002708:	69b9      	ldr	r1, [r7, #24]
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fd14 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	3304      	adds	r3, #4
 8002714:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	18d0      	adds	r0, r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4619      	mov	r1, r3
 8002724:	f00a f8ea 	bl	800c8fc <memcpy>
      offset += length_topic_name;
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4413      	add	r3, r2
 800272e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fd5b 	bl	80001f0 <strlen>
 800273a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	6979      	ldr	r1, [r7, #20]
 8002744:	4618      	mov	r0, r3
 8002746:	f001 fcf7 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3304      	adds	r3, #4
 800274e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	18d0      	adds	r0, r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4619      	mov	r1, r3
 800275e:	f00a f8cd 	bl	800c8fc <memcpy>
      offset += length_message_type;
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	4413      	add	r3, r2
 8002768:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fd3e 	bl	80001f0 <strlen>
 8002774:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	4413      	add	r3, r2
 800277c:	6939      	ldr	r1, [r7, #16]
 800277e:	4618      	mov	r0, r3
 8002780:	f001 fcda 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	3304      	adds	r3, #4
 8002788:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	18d0      	adds	r0, r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4619      	mov	r1, r3
 8002798:	f00a f8b0 	bl	800c8fc <memcpy>
      offset += length_md5sum;
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80027aa:	68f9      	ldr	r1, [r7, #12]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	4413      	add	r3, r2
 80027b2:	b2ca      	uxtb	r2, r1
 80027b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0a19      	lsrs	r1, r3, #8
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	b2ca      	uxtb	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	0c19      	lsrs	r1, r3, #16
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3302      	adds	r3, #2
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	b2ca      	uxtb	r2, r1
 80027d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	0e19      	lsrs	r1, r3, #24
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3303      	adds	r3, #3
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	b2ca      	uxtb	r2, r1
 80027e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	61fb      	str	r3, [r7, #28]
      return offset;
 80027ec:	69fb      	ldr	r3, [r7, #28]
    }
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b08a      	sub	sp, #40	; 0x28
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	b29a      	uxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	889b      	ldrh	r3, [r3, #4]
 8002816:	b21a      	sxth	r2, r3
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	3301      	adds	r3, #1
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	440b      	add	r3, r1
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	b21b      	sxth	r3, r3
 8002826:	4313      	orrs	r3, r2
 8002828:	b21b      	sxth	r3, r3
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	3302      	adds	r3, #2
 8002834:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	441a      	add	r2, r3
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f001 fc96 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3304      	adds	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	4413      	add	r3, r2
 8002858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285a:	429a      	cmp	r2, r3
 800285c:	d20c      	bcs.n	8002878 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	441a      	add	r2, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	3b01      	subs	r3, #1
 8002868:	6839      	ldr	r1, [r7, #0]
 800286a:	440b      	add	r3, r1
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	3301      	adds	r3, #1
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
 8002876:	e7ec      	b.n	8002852 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4413      	add	r3, r2
 800287e:	3b01      	subs	r3, #1
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	4413      	add	r3, r2
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	3b01      	subs	r3, #1
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	441a      	add	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	4413      	add	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	441a      	add	r2, r3
 80028a2:	f107 0310 	add.w	r3, r7, #16
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 fc63 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	3304      	adds	r3, #4
 80028b2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	623b      	str	r3, [r7, #32]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	6a3a      	ldr	r2, [r7, #32]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d20c      	bcs.n	80028de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	441a      	add	r2, r3
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	440b      	add	r3, r1
 80028d2:	7812      	ldrb	r2, [r2, #0]
 80028d4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	3301      	adds	r3, #1
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	e7ec      	b.n	80028b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	3b01      	subs	r3, #1
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	441a      	add	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	441a      	add	r2, r3
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fc30 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	3304      	adds	r3, #4
 8002918:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	429a      	cmp	r2, r3
 8002928:	d20c      	bcs.n	8002944 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	441a      	add	r2, r3
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	3b01      	subs	r3, #1
 8002934:	6839      	ldr	r1, [r7, #0]
 8002936:	440b      	add	r3, r1
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	3301      	adds	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	e7ec      	b.n	800291e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	3b01      	subs	r3, #1
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	4413      	add	r3, r2
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	3b01      	subs	r3, #1
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	441a      	add	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	440a      	add	r2, r1
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	4313      	orrs	r3, r2
 8002978:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	3301      	adds	r3, #1
 8002980:	6839      	ldr	r1, [r7, #0]
 8002982:	440b      	add	r3, r1
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	4313      	orrs	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	3302      	adds	r3, #2
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	440b      	add	r3, r1
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	4313      	orrs	r3, r2
 800299c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	3303      	adds	r3, #3
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	440b      	add	r3, r1
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	061b      	lsls	r3, r3, #24
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	3304      	adds	r3, #4
 80029ba:	61bb      	str	r3, [r7, #24]
     return offset;
 80029bc:	69bb      	ldr	r3, [r7, #24]
    }
 80029be:	4618      	mov	r0, r3
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	0800cc80 	.word	0x0800cc80

080029e4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	0800cc9c 	.word	0x0800cc9c

08002a00 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fd34 	bl	8002478 <_ZN3ros3MsgC1Ev>
 8002a10:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	711a      	strb	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002a20:	609a      	str	r2, [r3, #8]
    {
    }
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	0800d074 	.word	0x0800d074
 8002a30:	0800cc7c 	.word	0x0800cc7c

08002a34 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	7912      	ldrb	r2, [r2, #4]
 8002a4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3301      	adds	r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fbc9 	bl	80001f0 <strlen>
 8002a5e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	4413      	add	r3, r2
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 fb65 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3304      	adds	r3, #4
 8002a72:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	18d0      	adds	r0, r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	4619      	mov	r1, r3
 8002a82:	f009 ff3b 	bl	800c8fc <memcpy>
      offset += length_msg;
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
    }
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	441a      	add	r2, r3
 8002abe:	f107 030c 	add.w	r3, r7, #12
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f001 fb55 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	3304      	adds	r3, #4
 8002ace:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4413      	add	r3, r2
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d20c      	bcs.n	8002afa <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	441a      	add	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	6839      	ldr	r1, [r7, #0]
 8002aec:	440b      	add	r3, r1
 8002aee:	7812      	ldrb	r2, [r2, #0]
 8002af0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	e7ec      	b.n	8002ad4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	3b01      	subs	r3, #1
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4413      	add	r3, r2
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	441a      	add	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
     return offset;
 8002b1e:	693b      	ldr	r3, [r7, #16]
    }
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	0800ccc0 	.word	0x0800ccc0

08002b44 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	0800ccd4 	.word	0x0800ccd4

08002b60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fc84 	bl	8002478 <_ZN3ros3MsgC1Ev>
 8002b70:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	61da      	str	r2, [r3, #28]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	0800d05c 	.word	0x0800d05c

08002ba8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b2ca      	uxtb	r2, r1
 8002bc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	0a19      	lsrs	r1, r3, #8
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	3301      	adds	r3, #1
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b2ca      	uxtb	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	3302      	adds	r3, #2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	b2ca      	uxtb	r2, r1
 8002be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	0e19      	lsrs	r1, r3, #24
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	3303      	adds	r3, #3
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b2ca      	uxtb	r2, r1
 8002bf8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d22b      	bcs.n	8002c66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002c1c:	6939      	ldr	r1, [r7, #16]
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	b2ca      	uxtb	r2, r1
 8002c26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	0a19      	lsrs	r1, r3, #8
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	3301      	adds	r3, #1
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	b2ca      	uxtb	r2, r1
 8002c36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	0c19      	lsrs	r1, r3, #16
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	3302      	adds	r3, #2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	b2ca      	uxtb	r2, r1
 8002c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	0e19      	lsrs	r1, r3, #24
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	3303      	adds	r3, #3
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	b2ca      	uxtb	r2, r1
 8002c56:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	3301      	adds	r3, #1
 8002c62:	623b      	str	r3, [r7, #32]
 8002c64:	e7ce      	b.n	8002c04 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	b2ca      	uxtb	r2, r1
 8002c72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	0a19      	lsrs	r1, r3, #8
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	b2ca      	uxtb	r2, r1
 8002c84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	0c19      	lsrs	r1, r3, #16
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	3302      	adds	r3, #2
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	b2ca      	uxtb	r2, r1
 8002c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	0e19      	lsrs	r1, r3, #24
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	3303      	adds	r3, #3
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b2ca      	uxtb	r2, r1
 8002ca8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	3304      	adds	r3, #4
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d22b      	bcs.n	8002d16 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002ccc:	68f9      	ldr	r1, [r7, #12]
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b2ca      	uxtb	r2, r1
 8002cd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	0a19      	lsrs	r1, r3, #8
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	3301      	adds	r3, #1
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	b2ca      	uxtb	r2, r1
 8002ce6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	0c19      	lsrs	r1, r3, #16
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	3302      	adds	r3, #2
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	b2ca      	uxtb	r2, r1
 8002cf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	0e19      	lsrs	r1, r3, #24
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	3303      	adds	r3, #3
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	4413      	add	r3, r2
 8002d04:	b2ca      	uxtb	r2, r1
 8002d06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	e7ce      	b.n	8002cb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69d9      	ldr	r1, [r3, #28]
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	b2ca      	uxtb	r2, r1
 8002d22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	0a19      	lsrs	r1, r3, #8
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	4413      	add	r3, r2
 8002d32:	b2ca      	uxtb	r2, r1
 8002d34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	0c19      	lsrs	r1, r3, #16
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	3302      	adds	r3, #2
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	b2ca      	uxtb	r2, r1
 8002d46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	0e19      	lsrs	r1, r3, #24
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	3303      	adds	r3, #3
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	b2ca      	uxtb	r2, r1
 8002d58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d228      	bcs.n	8002dc0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fa38 	bl	80001f0 <strlen>
 8002d80:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	6979      	ldr	r1, [r7, #20]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 f9d4 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	3304      	adds	r3, #4
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	18d0      	adds	r0, r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4619      	mov	r1, r3
 8002dac:	f009 fda6 	bl	800c8fc <memcpy>
      offset += length_stringsi;
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4413      	add	r3, r2
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	e7d1      	b.n	8002d64 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3728      	adds	r7, #40	; 0x28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b08e      	sub	sp, #56	; 0x38
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	4413      	add	r3, r2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de4:	3301      	adds	r3, #1
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	3302      	adds	r3, #2
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	041b      	lsls	r3, r3, #16
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	3303      	adds	r3, #3
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	6a3a      	ldr	r2, [r7, #32]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	6a3a      	ldr	r2, [r7, #32]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d90a      	bls.n	8002e3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f009 fd78 	bl	800c928 <realloc>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a3a      	ldr	r2, [r7, #32]
 8002e42:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002e44:	2300      	movs	r3, #0
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d236      	bcs.n	8002ec0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e5a:	6839      	ldr	r1, [r7, #0]
 8002e5c:	440a      	add	r2, r1
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e68:	3301      	adds	r3, #1
 8002e6a:	6839      	ldr	r1, [r7, #0]
 8002e6c:	440b      	add	r3, r1
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	440b      	add	r3, r1
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	041b      	lsls	r3, r3, #16
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8c:	3303      	adds	r3, #3
 8002e8e:	6839      	ldr	r1, [r7, #0]
 8002e90:	440b      	add	r3, r1
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	3208      	adds	r2, #8
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	3301      	adds	r3, #1
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ebe:	e7c3      	b.n	8002e48 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	3301      	adds	r3, #1
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	021b      	lsls	r3, r3, #8
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ede:	3302      	adds	r3, #2
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	041b      	lsls	r3, r3, #16
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	3303      	adds	r3, #3
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f02:	3304      	adds	r3, #4
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d90a      	bls.n	8002f26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f009 fd04 	bl	800c928 <realloc>
 8002f20:	4602      	mov	r2, r0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d236      	bcs.n	8002fa8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f42:	6839      	ldr	r1, [r7, #0]
 8002f44:	440a      	add	r2, r1
 8002f46:	7812      	ldrb	r2, [r2, #0]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	3301      	adds	r3, #1
 8002f52:	6839      	ldr	r1, [r7, #0]
 8002f54:	440b      	add	r3, r1
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f62:	3302      	adds	r3, #2
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	440b      	add	r3, r1
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	3303      	adds	r3, #3
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	440b      	add	r3, r1
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	3214      	adds	r2, #20
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa6:	e7c3      	b.n	8002f30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	4413      	add	r3, r2
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd8:	3303      	adds	r3, #3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4413      	add	r3, r2
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fea:	3304      	adds	r3, #4
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d90a      	bls.n	800300e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f009 fc90 	bl	800c928 <realloc>
 8003008:	4602      	mov	r2, r0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003014:	2300      	movs	r3, #0
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800301e:	429a      	cmp	r2, r3
 8003020:	d23f      	bcs.n	80030a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	441a      	add	r2, r3
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f001 f8a0 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	3304      	adds	r3, #4
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003046:	429a      	cmp	r2, r3
 8003048:	d20c      	bcs.n	8003064 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	441a      	add	r2, r3
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	3b01      	subs	r3, #1
 8003054:	6839      	ldr	r1, [r7, #0]
 8003056:	440b      	add	r3, r1
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	3301      	adds	r3, #1
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	e7ec      	b.n	800303e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	3b01      	subs	r3, #1
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	4413      	add	r3, r2
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003076:	3b01      	subs	r3, #1
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	441a      	add	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	3220      	adds	r2, #32
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	3301      	adds	r3, #1
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a0:	e7ba      	b.n	8003018 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80030a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80030a4:	4618      	mov	r0, r3
 80030a6:	3738      	adds	r7, #56	; 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	0800cf38 	.word	0x0800cf38

080030c8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	0800ccf8 	.word	0x0800ccf8

080030e4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	611a      	str	r2, [r3, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68d8      	ldr	r0, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6891      	ldr	r1, [r2, #8]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	4798      	blx	r3
 8003130:	4603      	mov	r3, r0
  };
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
  }
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f98a 	bl	8002478 <_ZN3ros3MsgC1Ev>
 8003164:	4a09      	ldr	r2, [pc, #36]	; (800318c <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	60da      	str	r2, [r3, #12]
    {
    }
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	0800d018 	.word	0x0800d018

08003190 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	441a      	add	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80031aa:	eeb0 0a67 	vmov.f32	s0, s15
 80031ae:	4610      	mov	r0, r2
 80031b0:	f7ff f883 	bl	80022ba <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80031c8:	eeb0 0a67 	vmov.f32	s0, s15
 80031cc:	4610      	mov	r0, r2
 80031ce:	f7ff f874 	bl	80022ba <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	441a      	add	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80031e6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ea:	4610      	mov	r0, r2
 80031ec:	f7ff f865 	bl	80022ba <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4413      	add	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
      return offset;
 80031f8:	68fb      	ldr	r3, [r7, #12]
    }
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f7ff f8b8 	bl	8002392 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003222:	4602      	mov	r2, r0
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	441a      	add	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3308      	adds	r3, #8
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f7ff f8ab 	bl	8002392 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	441a      	add	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	330c      	adds	r3, #12
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7ff f89e 	bl	8002392 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003256:	4602      	mov	r2, r0
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
     return offset;
 800325e:	68fb      	ldr	r3, [r7, #12]
    }
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	0800cd1c 	.word	0x0800cd1c

08003284 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	0800cd34 	.word	0x0800cd34

080032a0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f8e4 	bl	8002478 <_ZN3ros3MsgC1Ev>
 80032b0:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3304      	adds	r3, #4
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff4a 	bl	8003154 <_ZN13geometry_msgs7Vector3C1Ev>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3314      	adds	r3, #20
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff45 	bl	8003154 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	0800d000 	.word	0x0800d000

080032d8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1d18      	adds	r0, r3, #4
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	4413      	add	r3, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	f7ff ff4d 	bl	8003190 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80032f6:	4602      	mov	r2, r0
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f103 0014 	add.w	r0, r3, #20
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	4413      	add	r3, r2
 800330a:	4619      	mov	r1, r3
 800330c:	f7ff ff40 	bl	8003190 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
      return offset;
 8003318:	68fb      	ldr	r3, [r7, #12]
    }
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	1d18      	adds	r0, r3, #4
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	4413      	add	r3, r2
 800333a:	4619      	mov	r1, r3
 800333c:	f7ff ff61 	bl	8003202 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4413      	add	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f103 0014 	add.w	r0, r3, #20
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4413      	add	r3, r2
 8003354:	4619      	mov	r1, r3
 8003356:	f7ff ff54 	bl	8003202 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
     return offset;
 8003362:	68fb      	ldr	r3, [r7, #12]
    }
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	0800cd58 	.word	0x0800cd58

08003388 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	0800cd6c 	.word	0x0800cd6c

080033a4 <_ZN13freeway_joyfw10stm_fw_msgC1Ev>:
      typedef bool _e_stop_status_type;
      _e_stop_status_type e_stop_status;
      typedef geometry_msgs::Twist _cmd_vel_mcu_type;
      _cmd_vel_mcu_type cmd_vel_mcu;

    stm_fw_msg():
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
      am_status(0),
      e_stop_status(0),
      cmd_vel_mcu()
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f862 	bl	8002478 <_ZN3ros3MsgC1Ev>
 80033b4:	4a09      	ldr	r2, [pc, #36]	; (80033dc <_ZN13freeway_joyfw10stm_fw_msgC1Ev+0x38>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	711a      	strb	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	715a      	strb	r2, [r3, #5]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3308      	adds	r3, #8
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ff68 	bl	80032a0 <_ZN13geometry_msgs5TwistC1Ev>
    {
    }
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	0800cfe8 	.word	0x0800cfe8

080033e0 <_ZNK13freeway_joyfw10stm_fw_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_am_status;
      u_am_status.real = this->am_status;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	791b      	ldrb	r3, [r3, #4]
 80033f2:	743b      	strb	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_am_status.base >> (8 * 0)) & 0xFF;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	7c3a      	ldrb	r2, [r7, #16]
 80033fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->am_status);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3301      	adds	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_e_stop_status;
      u_e_stop_status.real = this->e_stop_status;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	795b      	ldrb	r3, [r3, #5]
 8003408:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_e_stop_status.base >> (8 * 0)) & 0xFF;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	4413      	add	r3, r2
 8003410:	7b3a      	ldrb	r2, [r7, #12]
 8003412:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->e_stop_status);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3301      	adds	r3, #1
 8003418:	617b      	str	r3, [r7, #20]
      offset += this->cmd_vel_mcu.serialize(outbuffer + offset);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f103 0008 	add.w	r0, r3, #8
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	4413      	add	r3, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f7ff ff56 	bl	80032d8 <_ZNK13geometry_msgs5Twist9serializeEPh>
 800342c:	4602      	mov	r2, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	4413      	add	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
      return offset;
 8003434:	697b      	ldr	r3, [r7, #20]
    }
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZN13freeway_joyfw10stm_fw_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_am_status;
      u_am_status.base = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	743b      	strb	r3, [r7, #16]
      u_am_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003450:	7c3a      	ldrb	r2, [r7, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	440b      	add	r3, r1
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	b2db      	uxtb	r3, r3
 800345e:	743b      	strb	r3, [r7, #16]
      this->am_status = u_am_status.real;
 8003460:	7c3a      	ldrb	r2, [r7, #16]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->am_status);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	3301      	adds	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_e_stop_status;
      u_e_stop_status.base = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	733b      	strb	r3, [r7, #12]
      u_e_stop_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003470:	7b3a      	ldrb	r2, [r7, #12]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	440b      	add	r3, r1
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	b2db      	uxtb	r3, r3
 800347e:	733b      	strb	r3, [r7, #12]
      this->e_stop_status = u_e_stop_status.real;
 8003480:	7b3a      	ldrb	r2, [r7, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	715a      	strb	r2, [r3, #5]
      offset += sizeof(this->e_stop_status);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
      offset += this->cmd_vel_mcu.deserialize(inbuffer + offset);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f103 0008 	add.w	r0, r3, #8
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	4413      	add	r3, r2
 8003498:	4619      	mov	r1, r3
 800349a:	f7ff ff42 	bl	8003322 <_ZN13geometry_msgs5Twist11deserializeEPh>
 800349e:	4602      	mov	r2, r0
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	4413      	add	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
     return offset;
 80034a6:	697b      	ldr	r3, [r7, #20]
    }
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <_ZN13freeway_joyfw10stm_fw_msg7getTypeEv>:

    const char * getType(){ return "freeway_joyfw/stm_fw_msg"; };
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <_ZN13freeway_joyfw10stm_fw_msg7getTypeEv+0x18>)
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	0800cd90 	.word	0x0800cd90

080034cc <_ZN13freeway_joyfw10stm_fw_msg6getMD5Ev>:
    const char * getMD5(){ return "fa2d9ef9f2382f4119166968f815e551"; };
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <_ZN13freeway_joyfw10stm_fw_msg6getMD5Ev+0x18>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	0800cdac 	.word	0x0800cdac

080034e8 <_ZN13freeway_joyfw10stm_am_msgC1Ev>:
  {
    public:
      typedef bool _am_status2_type;
      _am_status2_type am_status2;

    stm_am_msg():
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
      am_status2(0)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe ffc0 	bl	8002478 <_ZN3ros3MsgC1Ev>
 80034f8:	4a05      	ldr	r2, [pc, #20]	; (8003510 <_ZN13freeway_joyfw10stm_am_msgC1Ev+0x28>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	711a      	strb	r2, [r3, #4]
    {
    }
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	0800cfd0 	.word	0x0800cfd0

08003514 <_ZNK13freeway_joyfw10stm_am_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_am_status2;
      u_am_status2.real = this->am_status2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	791b      	ldrb	r3, [r3, #4]
 8003526:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_am_status2.base >> (8 * 0)) & 0xFF;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4413      	add	r3, r2
 800352e:	7a3a      	ldrb	r2, [r7, #8]
 8003530:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->am_status2);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3301      	adds	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
      return offset;
 8003538:	68fb      	ldr	r3, [r7, #12]
    }
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <_ZN13freeway_joyfw10stm_am_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_am_status2;
      u_am_status2.base = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	723b      	strb	r3, [r7, #8]
      u_am_status2.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003558:	7a3a      	ldrb	r2, [r7, #8]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6839      	ldr	r1, [r7, #0]
 800355e:	440b      	add	r3, r1
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	4313      	orrs	r3, r2
 8003564:	b2db      	uxtb	r3, r3
 8003566:	723b      	strb	r3, [r7, #8]
      this->am_status2 = u_am_status2.real;
 8003568:	7a3a      	ldrb	r2, [r7, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->am_status2);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3301      	adds	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
     return offset;
 8003574:	68fb      	ldr	r3, [r7, #12]
    }
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv>:

    const char * getType(){ return "freeway_joyfw/stm_am_msg"; };
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <_ZN13freeway_joyfw10stm_am_msg7getTypeEv+0x18>)
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	0800cdd0 	.word	0x0800cdd0

080035a0 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev>:
    const char * getMD5(){ return "7d69f08cbd0079f4e385def6382afcb2"; };
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev+0x18>)
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	0800cdec 	.word	0x0800cdec

080035bc <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe ff56 	bl	8002478 <_ZN3ros3MsgC1Ev>
 80035cc:	4a09      	ldr	r2, [pc, #36]	; (80035f4 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3308      	adds	r3, #8
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe ff3a 	bl	8002456 <_ZN3ros4TimeC1Ev>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80035e6:	611a      	str	r2, [r3, #16]
    {
    }
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	0800cfb8 	.word	0x0800cfb8
 80035f8:	0800cc7c 	.word	0x0800cc7c

080035fc <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	4413      	add	r3, r2
 8003614:	b2ca      	uxtb	r2, r1
 8003616:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	0a19      	lsrs	r1, r3, #8
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3301      	adds	r3, #1
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	4413      	add	r3, r2
 8003626:	b2ca      	uxtb	r2, r1
 8003628:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	0c19      	lsrs	r1, r3, #16
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3302      	adds	r3, #2
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	4413      	add	r3, r2
 8003638:	b2ca      	uxtb	r2, r1
 800363a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0e19      	lsrs	r1, r3, #24
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3303      	adds	r3, #3
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	4413      	add	r3, r2
 800364a:	b2ca      	uxtb	r2, r1
 800364c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3304      	adds	r3, #4
 8003652:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6899      	ldr	r1, [r3, #8]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	4413      	add	r3, r2
 800365e:	b2ca      	uxtb	r2, r1
 8003660:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0a19      	lsrs	r1, r3, #8
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3301      	adds	r3, #1
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	4413      	add	r3, r2
 8003670:	b2ca      	uxtb	r2, r1
 8003672:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	0c19      	lsrs	r1, r3, #16
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3302      	adds	r3, #2
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	4413      	add	r3, r2
 8003682:	b2ca      	uxtb	r2, r1
 8003684:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0e19      	lsrs	r1, r3, #24
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3303      	adds	r3, #3
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	4413      	add	r3, r2
 8003694:	b2ca      	uxtb	r2, r1
 8003696:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3304      	adds	r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	b2ca      	uxtb	r2, r1
 80036aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	0a19      	lsrs	r1, r3, #8
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3301      	adds	r3, #1
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	4413      	add	r3, r2
 80036ba:	b2ca      	uxtb	r2, r1
 80036bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	0c19      	lsrs	r1, r3, #16
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3302      	adds	r3, #2
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	b2ca      	uxtb	r2, r1
 80036ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	0e19      	lsrs	r1, r3, #24
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3303      	adds	r3, #3
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	b2ca      	uxtb	r2, r1
 80036e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3304      	adds	r3, #4
 80036e6:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fc fd7f 	bl	80001f0 <strlen>
 80036f2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4413      	add	r3, r2
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fd1b 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3304      	adds	r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	18d0      	adds	r0, r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	4619      	mov	r1, r3
 8003716:	f009 f8f1 	bl	800c8fc <memcpy>
      offset += length_frame_id;
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4413      	add	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
      return offset;
 8003722:	68fb      	ldr	r3, [r7, #12]
    }
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	4413      	add	r3, r2
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	3301      	adds	r3, #1
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	440b      	add	r3, r1
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3302      	adds	r3, #2
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	440b      	add	r3, r1
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	3303      	adds	r3, #3
 800377c:	6839      	ldr	r1, [r7, #0]
 800377e:	440b      	add	r3, r1
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	061b      	lsls	r3, r3, #24
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	3304      	adds	r3, #4
 800378e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	4413      	add	r3, r2
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	3301      	adds	r3, #1
 80037a6:	6839      	ldr	r1, [r7, #0]
 80037a8:	440b      	add	r3, r1
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	3302      	adds	r3, #2
 80037bc:	6839      	ldr	r1, [r7, #0]
 80037be:	440b      	add	r3, r1
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	041b      	lsls	r3, r3, #16
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	3303      	adds	r3, #3
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	440b      	add	r3, r1
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3304      	adds	r3, #4
 80037e4:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	3301      	adds	r3, #1
 80037fc:	6839      	ldr	r1, [r7, #0]
 80037fe:	440b      	add	r3, r1
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	3302      	adds	r3, #2
 8003812:	6839      	ldr	r1, [r7, #0]
 8003814:	440b      	add	r3, r1
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	041b      	lsls	r3, r3, #16
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	3303      	adds	r3, #3
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	440b      	add	r3, r1
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	3304      	adds	r3, #4
 800383a:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	441a      	add	r2, r3
 8003842:	f107 030c 	add.w	r3, r7, #12
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fc93 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	3304      	adds	r3, #4
 8003852:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4413      	add	r3, r2
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	d20c      	bcs.n	800387e <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	441a      	add	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3b01      	subs	r3, #1
 800386e:	6839      	ldr	r1, [r7, #0]
 8003870:	440b      	add	r3, r1
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	3301      	adds	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e7ec      	b.n	8003858 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	3b01      	subs	r3, #1
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	4413      	add	r3, r2
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	3b01      	subs	r3, #1
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4413      	add	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
     return offset;
 80038a2:	693b      	ldr	r3, [r7, #16]
    }
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	0800ce10 	.word	0x0800ce10

080038c8 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	0800ce20 	.word	0x0800ce20

080038e4 <_ZN11sensor_msgs5RangeC1Ev>:
      typedef float _range_type;
      _range_type range;
      enum { ULTRASOUND = 0 };
      enum { INFRARED = 1 };

    Range():
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
      header(),
      radiation_type(0),
      field_of_view(0),
      min_range(0),
      max_range(0),
      range(0)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fdc2 	bl	8002478 <_ZN3ros3MsgC1Ev>
 80038f4:	4a0f      	ldr	r2, [pc, #60]	; (8003934 <_ZN11sensor_msgs5RangeC1Ev+0x50>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fe5c 	bl	80035bc <_ZN8std_msgs6HeaderC1Ev>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	761a      	strb	r2, [r3, #24]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	61da      	str	r2, [r3, #28]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	621a      	str	r2, [r3, #32]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	625a      	str	r2, [r3, #36]	; 0x24
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	0800cfa0 	.word	0x0800cfa0

08003938 <_ZNK11sensor_msgs5Range9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	1d18      	adds	r0, r3, #4
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	4413      	add	r3, r2
 8003950:	4619      	mov	r1, r3
 8003952:	f7ff fe53 	bl	80035fc <_ZNK8std_msgs6Header9serializeEPh>
 8003956:	4602      	mov	r2, r0
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->radiation_type >> (8 * 0)) & 0xFF;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	4413      	add	r3, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	7e12      	ldrb	r2, [r2, #24]
 8003968:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->radiation_type);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3301      	adds	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_field_of_view;
      u_field_of_view.real = this->field_of_view;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_field_of_view.base >> (8 * 0)) & 0xFF;
 8003976:	69b9      	ldr	r1, [r7, #24]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	4413      	add	r3, r2
 800397e:	b2ca      	uxtb	r2, r1
 8003980:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_field_of_view.base >> (8 * 1)) & 0xFF;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	0a19      	lsrs	r1, r3, #8
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3301      	adds	r3, #1
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	4413      	add	r3, r2
 800398e:	b2ca      	uxtb	r2, r1
 8003990:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_field_of_view.base >> (8 * 2)) & 0xFF;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	0c19      	lsrs	r1, r3, #16
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3302      	adds	r3, #2
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	4413      	add	r3, r2
 800399e:	b2ca      	uxtb	r2, r1
 80039a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_field_of_view.base >> (8 * 3)) & 0xFF;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	0e19      	lsrs	r1, r3, #24
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3303      	adds	r3, #3
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	b2ca      	uxtb	r2, r1
 80039b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->field_of_view);
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3304      	adds	r3, #4
 80039b6:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_min_range;
      u_min_range.real = this->min_range;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_min_range.base >> (8 * 0)) & 0xFF;
 80039be:	6979      	ldr	r1, [r7, #20]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	4413      	add	r3, r2
 80039c6:	b2ca      	uxtb	r2, r1
 80039c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_min_range.base >> (8 * 1)) & 0xFF;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	0a19      	lsrs	r1, r3, #8
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3301      	adds	r3, #1
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	b2ca      	uxtb	r2, r1
 80039d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_min_range.base >> (8 * 2)) & 0xFF;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	0c19      	lsrs	r1, r3, #16
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3302      	adds	r3, #2
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	b2ca      	uxtb	r2, r1
 80039e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_min_range.base >> (8 * 3)) & 0xFF;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	0e19      	lsrs	r1, r3, #24
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3303      	adds	r3, #3
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	4413      	add	r3, r2
 80039f6:	b2ca      	uxtb	r2, r1
 80039f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->min_range);
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3304      	adds	r3, #4
 80039fe:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_max_range;
      u_max_range.real = this->max_range;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_max_range.base >> (8 * 0)) & 0xFF;
 8003a06:	6939      	ldr	r1, [r7, #16]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	b2ca      	uxtb	r2, r1
 8003a10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_max_range.base >> (8 * 1)) & 0xFF;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	0a19      	lsrs	r1, r3, #8
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	b2ca      	uxtb	r2, r1
 8003a20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_max_range.base >> (8 * 2)) & 0xFF;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	0c19      	lsrs	r1, r3, #16
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3302      	adds	r3, #2
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	b2ca      	uxtb	r2, r1
 8003a30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_max_range.base >> (8 * 3)) & 0xFF;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	0e19      	lsrs	r1, r3, #24
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3303      	adds	r3, #3
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	b2ca      	uxtb	r2, r1
 8003a40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->max_range);
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3304      	adds	r3, #4
 8003a46:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_range;
      u_range.real = this->range;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_range.base >> (8 * 0)) & 0xFF;
 8003a4e:	68f9      	ldr	r1, [r7, #12]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	4413      	add	r3, r2
 8003a56:	b2ca      	uxtb	r2, r1
 8003a58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_range.base >> (8 * 1)) & 0xFF;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	0a19      	lsrs	r1, r3, #8
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3301      	adds	r3, #1
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	4413      	add	r3, r2
 8003a66:	b2ca      	uxtb	r2, r1
 8003a68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_range.base >> (8 * 2)) & 0xFF;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	0c19      	lsrs	r1, r3, #16
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3302      	adds	r3, #2
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	4413      	add	r3, r2
 8003a76:	b2ca      	uxtb	r2, r1
 8003a78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_range.base >> (8 * 3)) & 0xFF;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	0e19      	lsrs	r1, r3, #24
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3303      	adds	r3, #3
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	4413      	add	r3, r2
 8003a86:	b2ca      	uxtb	r2, r1
 8003a88:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->range);
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	61fb      	str	r3, [r7, #28]
      return offset;
 8003a90:	69fb      	ldr	r3, [r7, #28]
    }
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <_ZN11sensor_msgs5Range11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b088      	sub	sp, #32
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
      offset += this->header.deserialize(inbuffer + offset);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	1d18      	adds	r0, r3, #4
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f7ff fe3a 	bl	800372c <_ZN8std_msgs6Header11deserializeEPh>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	61fb      	str	r3, [r7, #28]
      this->radiation_type =  ((uint8_t) (*(inbuffer + offset)));
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->radiation_type);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_field_of_view;
      u_field_of_view.base = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	6839      	ldr	r1, [r7, #0]
 8003adc:	440a      	add	r2, r1
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	6839      	ldr	r1, [r7, #0]
 8003aec:	440b      	add	r3, r1
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	3302      	adds	r3, #2
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	440b      	add	r3, r1
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3303      	adds	r3, #3
 8003b0e:	6839      	ldr	r1, [r7, #0]
 8003b10:	440b      	add	r3, r1
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	061b      	lsls	r3, r3, #24
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
      this->field_of_view = u_field_of_view.real;
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->field_of_view);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	3304      	adds	r3, #4
 8003b24:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_min_range;
      u_min_range.base = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	6839      	ldr	r1, [r7, #0]
 8003b30:	440a      	add	r2, r1
 8003b32:	7812      	ldrb	r2, [r2, #0]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	6839      	ldr	r1, [r7, #0]
 8003b40:	440b      	add	r3, r1
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3302      	adds	r3, #2
 8003b50:	6839      	ldr	r1, [r7, #0]
 8003b52:	440b      	add	r3, r1
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3303      	adds	r3, #3
 8003b62:	6839      	ldr	r1, [r7, #0]
 8003b64:	440b      	add	r3, r1
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
      this->min_range = u_min_range.real;
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	621a      	str	r2, [r3, #32]
      offset += sizeof(this->min_range);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3304      	adds	r3, #4
 8003b78:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_max_range;
      u_max_range.base = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	6839      	ldr	r1, [r7, #0]
 8003b84:	440a      	add	r2, r1
 8003b86:	7812      	ldrb	r2, [r2, #0]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3301      	adds	r3, #1
 8003b92:	6839      	ldr	r1, [r7, #0]
 8003b94:	440b      	add	r3, r1
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	440b      	add	r3, r1
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3303      	adds	r3, #3
 8003bb6:	6839      	ldr	r1, [r7, #0]
 8003bb8:	440b      	add	r3, r1
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	061b      	lsls	r3, r3, #24
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
      this->max_range = u_max_range.real;
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24
      offset += sizeof(this->max_range);
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_range;
      u_range.base = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	440a      	add	r2, r1
 8003bda:	7812      	ldrb	r2, [r2, #0]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3301      	adds	r3, #1
 8003be6:	6839      	ldr	r1, [r7, #0]
 8003be8:	440b      	add	r3, r1
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	6839      	ldr	r1, [r7, #0]
 8003bfa:	440b      	add	r3, r1
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3303      	adds	r3, #3
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	440b      	add	r3, r1
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	061b      	lsls	r3, r3, #24
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
      this->range = u_range.real;
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->range);
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	61fb      	str	r3, [r7, #28]
     return offset;
 8003c22:	69fb      	ldr	r3, [r7, #28]
    }
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_ZN11sensor_msgs5Range7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Range"; };
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <_ZN11sensor_msgs5Range7getTypeEv+0x18>)
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	0800ce44 	.word	0x0800ce44

08003c48 <_ZN11sensor_msgs5Range6getMD5Ev>:
    const char * getMD5(){ return "c005c34273dc426c67a020a87bc24148"; };
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <_ZN11sensor_msgs5Range6getMD5Ev+0x18>)
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	0800ce58 	.word	0x0800ce58

08003c64 <_ZN13freeway_joyfw16stm_fw_sonar_msgC1Ev>:
      typedef sensor_msgs::Range _range_right_type;
      _range_right_type range_right;
      typedef sensor_msgs::Range _range_left_type;
      _range_left_type range_left;

    stm_fw_sonar_msg():
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
      range_right(),
      range_left()
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fc02 	bl	8002478 <_ZN3ros3MsgC1Ev>
 8003c74:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <_ZN13freeway_joyfw16stm_fw_sonar_msgC1Ev+0x34>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fe30 	bl	80038e4 <_ZN11sensor_msgs5RangeC1Ev>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3330      	adds	r3, #48	; 0x30
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fe2b 	bl	80038e4 <_ZN11sensor_msgs5RangeC1Ev>
    {
    }
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	0800cf88 	.word	0x0800cf88

08003c9c <_ZNK13freeway_joyfw16stm_fw_sonar_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
      offset += this->range_right.serialize(outbuffer + offset);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	1d18      	adds	r0, r3, #4
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f7ff fe3f 	bl	8003938 <_ZNK11sensor_msgs5Range9serializeEPh>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
      offset += this->range_left.serialize(outbuffer + offset);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	4413      	add	r3, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f7ff fe32 	bl	8003938 <_ZNK11sensor_msgs5Range9serializeEPh>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
      return offset;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
    }
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <_ZN13freeway_joyfw16stm_fw_sonar_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
      offset += this->range_right.deserialize(inbuffer + offset);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	1d18      	adds	r0, r3, #4
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f7ff fecb 	bl	8003a9a <_ZN11sensor_msgs5Range11deserializeEPh>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
      offset += this->range_left.deserialize(inbuffer + offset);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	4413      	add	r3, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7ff febe 	bl	8003a9a <_ZN11sensor_msgs5Range11deserializeEPh>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
     return offset;
 8003d26:	68fb      	ldr	r3, [r7, #12]
    }
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <_ZN13freeway_joyfw16stm_fw_sonar_msg7getTypeEv>:

    virtual const char * getType() override { return "freeway_joyfw/stm_fw_sonar_msg"; };
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <_ZN13freeway_joyfw16stm_fw_sonar_msg7getTypeEv+0x18>)
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	0800ce7c 	.word	0x0800ce7c

08003d4c <_ZN13freeway_joyfw16stm_fw_sonar_msg6getMD5Ev>:
    virtual const char * getMD5() override { return "91d798d2bd3e20280e142f349dff90b6"; };
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <_ZN13freeway_joyfw16stm_fw_sonar_msg6getMD5Ev+0x18>)
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	0800ce9c 	.word	0x0800ce9c

08003d68 <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE>:
bool g_am_status = false;
bool *e_stop_status, *am_status;
bool pin_stat = false;

// Subscriber:
void am_status_cb(const freeway_joyfw::stm_am_msg &msg) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	g_am_status = msg.am_status2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	791a      	ldrb	r2, [r3, #4]
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE+0x24>)
 8003d76:	701a      	strb	r2, [r3, #0]
	am_status = &g_am_status;
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE+0x28>)
 8003d7a:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE+0x24>)
 8003d7c:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f002 fb28 	bl	80063d4 <HAL_Delay>
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20001e6c 	.word	0x20001e6c
 8003d90:	20001e74 	.word	0x20001e74

08003d94 <map>:
ros::Subscriber<freeway_joyfw::stm_am_msg> am_status_sub("freeway/am_status", &am_status_cb);

long map(uint32_t a, long b, long c, long d, long e) {
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
	return (a - b)*(e - d)/(c - b) + d;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	1a8a      	subs	r2, r1, r2
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	1a8a      	subs	r2, r1, r2
 8003db8:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4413      	add	r3, r2
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <setup>:

uint32_t previous_time;
uint32_t pub_period_time = 100;

// Setup node:
void setup(void) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
  bool init_pin_stat = false;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	71fb      	strb	r3, [r7, #7]
  nh.initNode();
 8003dd6:	4837      	ldr	r0, [pc, #220]	; (8003eb4 <setup+0xe8>)
 8003dd8:	f000 fab4 	bl	8004344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
//  nh.advertiseService(server);
//  nh.advertiseService(server2);
  nh.subscribe(am_status_sub);
 8003ddc:	4936      	ldr	r1, [pc, #216]	; (8003eb8 <setup+0xec>)
 8003dde:	4835      	ldr	r0, [pc, #212]	; (8003eb4 <setup+0xe8>)
 8003de0:	f000 facd 	bl	800437e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_>
  nh.advertise(freeway_diagnostics);
 8003de4:	4935      	ldr	r1, [pc, #212]	; (8003ebc <setup+0xf0>)
 8003de6:	4833      	ldr	r0, [pc, #204]	; (8003eb4 <setup+0xe8>)
 8003de8:	f000 faf6 	bl	80043d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  nh.advertise(pub_range);
 8003dec:	4934      	ldr	r1, [pc, #208]	; (8003ec0 <setup+0xf4>)
 8003dee:	4831      	ldr	r0, [pc, #196]	; (8003eb4 <setup+0xe8>)
 8003df0:	f000 faf2 	bl	80043d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  range_msg.range_left.radiation_type = sensor_msgs::Range::ULTRASOUND;
 8003df4:	4b33      	ldr	r3, [pc, #204]	; (8003ec4 <setup+0xf8>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  range_msg.range_right.radiation_type = sensor_msgs::Range::ULTRASOUND;
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <setup+0xf8>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	771a      	strb	r2, [r3, #28]
  range_msg.range_left.field_of_view = 0.26;
 8003e02:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <setup+0xf8>)
 8003e04:	4a30      	ldr	r2, [pc, #192]	; (8003ec8 <setup+0xfc>)
 8003e06:	64da      	str	r2, [r3, #76]	; 0x4c
  range_msg.range_right.field_of_view = 0.26;
 8003e08:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <setup+0xf8>)
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <setup+0xfc>)
 8003e0c:	621a      	str	r2, [r3, #32]
  range_msg.range_left.min_range = 0.03;
 8003e0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <setup+0xf8>)
 8003e10:	4a2e      	ldr	r2, [pc, #184]	; (8003ecc <setup+0x100>)
 8003e12:	651a      	str	r2, [r3, #80]	; 0x50
  range_msg.range_right.min_range = 0.03;
 8003e14:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <setup+0xf8>)
 8003e16:	4a2d      	ldr	r2, [pc, #180]	; (8003ecc <setup+0x100>)
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24
  range_msg.range_left.max_range = 4.0;
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <setup+0xf8>)
 8003e1c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54
  range_msg.range_right.max_range = 4.0;
 8003e22:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <setup+0xf8>)
 8003e24:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003e28:	629a      	str	r2, [r3, #40]	; 0x28

  //nh.advertiseService(server2);
  //*e_stop_status = true;
  am_status = &g_am_status;
 8003e2a:	4b29      	ldr	r3, [pc, #164]	; (8003ed0 <setup+0x104>)
 8003e2c:	4a29      	ldr	r2, [pc, #164]	; (8003ed4 <setup+0x108>)
 8003e2e:	601a      	str	r2, [r3, #0]

  init_pin_stat = HAL_GPIO_ReadPin(e_stop_GPIO_Port, e_stop_Pin);
 8003e30:	2140      	movs	r1, #64	; 0x40
 8003e32:	4829      	ldr	r0, [pc, #164]	; (8003ed8 <setup+0x10c>)
 8003e34:	f004 f8fc 	bl	8008030 <HAL_GPIO_ReadPin>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf14      	ite	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	2300      	moveq	r3, #0
 8003e42:	71fb      	strb	r3, [r7, #7]
  if(init_pin_stat == false){ //estop on
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d118      	bne.n	8003e7c <setup+0xb0>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e50:	4822      	ldr	r0, [pc, #136]	; (8003edc <setup+0x110>)
 8003e52:	f004 f905 	bl	8008060 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8003e56:	2200      	movs	r2, #0
 8003e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e5c:	481f      	ldr	r0, [pc, #124]	; (8003edc <setup+0x110>)
 8003e5e:	f004 f8ff 	bl	8008060 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8003e62:	2200      	movs	r2, #0
 8003e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e68:	481c      	ldr	r0, [pc, #112]	; (8003edc <setup+0x110>)
 8003e6a:	f004 f8f9 	bl	8008060 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e74:	4819      	ldr	r0, [pc, #100]	; (8003edc <setup+0x110>)
 8003e76:	f004 f8f3 	bl	8008060 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
  }
}
 8003e7a:	e017      	b.n	8003eac <setup+0xe0>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e82:	4816      	ldr	r0, [pc, #88]	; (8003edc <setup+0x110>)
 8003e84:	f004 f8ec 	bl	8008060 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e8e:	4813      	ldr	r0, [pc, #76]	; (8003edc <setup+0x110>)
 8003e90:	f004 f8e6 	bl	8008060 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8003e94:	2201      	movs	r2, #1
 8003e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e9a:	4810      	ldr	r0, [pc, #64]	; (8003edc <setup+0x110>)
 8003e9c:	f004 f8e0 	bl	8008060 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ea6:	480d      	ldr	r0, [pc, #52]	; (8003edc <setup+0x110>)
 8003ea8:	f004 f8da 	bl	8008060 <HAL_GPIO_WritePin>
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20001410 	.word	0x20001410
 8003eb8:	20001e7c 	.word	0x20001e7c
 8003ebc:	20001d90 	.word	0x20001d90
 8003ec0:	20001e58 	.word	0x20001e58
 8003ec4:	20001da4 	.word	0x20001da4
 8003ec8:	3e851eb8 	.word	0x3e851eb8
 8003ecc:	3cf5c28f 	.word	0x3cf5c28f
 8003ed0:	20001e74 	.word	0x20001e74
 8003ed4:	20001e6c 	.word	0x20001e6c
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	40021000 	.word	0x40021000

08003ee0 <loop>:

// Loop:
uint8_t loop(uint32_t x_val, uint32_t y_val, double r_val, double l_val) {
 8003ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee2:	b091      	sub	sp, #68	; 0x44
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	6178      	str	r0, [r7, #20]
 8003ee8:	6139      	str	r1, [r7, #16]
 8003eea:	ed87 0b02 	vstr	d0, [r7, #8]
 8003eee:	ed87 1b00 	vstr	d1, [r7]
	static uint8_t r_led_mode = 0;
	double axis_X, axis_Y;
	//bool axis_B = true;
	double l_scale_ = 0.3;
 8003ef2:	a379      	add	r3, pc, #484	; (adr r3, 80040d8 <loop+0x1f8>)
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double a_scale_ = 0.4;
 8003efc:	a378      	add	r3, pc, #480	; (adr r3, 80040e0 <loop+0x200>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28


	range_msg.range_left.range   = l_val;
 8003f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f0a:	f7fc fde5 	bl	8000ad8 <__aeabi_d2f>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a63      	ldr	r2, [pc, #396]	; (80040a0 <loop+0x1c0>)
 8003f12:	6593      	str	r3, [r2, #88]	; 0x58
	range_msg.range_right.range  = r_val;
 8003f14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f18:	f7fc fdde 	bl	8000ad8 <__aeabi_d2f>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4a60      	ldr	r2, [pc, #384]	; (80040a0 <loop+0x1c0>)
 8003f20:	62d3      	str	r3, [r2, #44]	; 0x2c

	pin_stat = HAL_GPIO_ReadPin(e_stop_GPIO_Port, e_stop_Pin);
 8003f22:	2140      	movs	r1, #64	; 0x40
 8003f24:	485f      	ldr	r0, [pc, #380]	; (80040a4 <loop+0x1c4>)
 8003f26:	f004 f883 	bl	8008030 <HAL_GPIO_ReadPin>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4b5c      	ldr	r3, [pc, #368]	; (80040a8 <loop+0x1c8>)
 8003f38:	701a      	strb	r2, [r3, #0]
	e_stop_status = &pin_stat;
 8003f3a:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <loop+0x1cc>)
 8003f3c:	4a5a      	ldr	r2, [pc, #360]	; (80040a8 <loop+0x1c8>)
 8003f3e:	601a      	str	r2, [r3, #0]

	if(previous_time + pub_period_time <= HAL_GetTick()) {
 8003f40:	4b5b      	ldr	r3, [pc, #364]	; (80040b0 <loop+0x1d0>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b5b      	ldr	r3, [pc, #364]	; (80040b4 <loop+0x1d4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	18d6      	adds	r6, r2, r3
 8003f4a:	f002 fa37 	bl	80063bc <HAL_GetTick>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	429e      	cmp	r6, r3
 8003f52:	bf94      	ite	ls
 8003f54:	2301      	movls	r3, #1
 8003f56:	2300      	movhi	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8097 	beq.w	800408e <loop+0x1ae>
	  if (*e_stop_status==true && *am_status==true) { //if var 'am_status == true' , it defines manual mode
 8003f60:	4b52      	ldr	r3, [pc, #328]	; (80040ac <loop+0x1cc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d168      	bne.n	800403c <loop+0x15c>
 8003f6a:	4b53      	ldr	r3, [pc, #332]	; (80040b8 <loop+0x1d8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d163      	bne.n	800403c <loop+0x15c>
		  axis_X = map(x_val,0,4095,-10000,10000) / (float)10000.0;
 8003f74:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	4b50      	ldr	r3, [pc, #320]	; (80040bc <loop+0x1dc>)
 8003f7c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003f80:	2100      	movs	r1, #0
 8003f82:	6978      	ldr	r0, [r7, #20]
 8003f84:	f7ff ff06 	bl	8003d94 <map>
 8003f88:	ee07 0a90 	vmov	s15, r0
 8003f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f90:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80040c0 <loop+0x1e0>
 8003f94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f98:	ee16 0a90 	vmov	r0, s13
 8003f9c:	f7fc fa94 	bl	80004c8 <__aeabi_f2d>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  axis_Y = map(y_val,0,4095,-10000,10000) / (float)10000.0;
 8003fa8:	f242 7310 	movw	r3, #10000	; 0x2710
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	4b43      	ldr	r3, [pc, #268]	; (80040bc <loop+0x1dc>)
 8003fb0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	6938      	ldr	r0, [r7, #16]
 8003fb8:	f7ff feec 	bl	8003d94 <map>
 8003fbc:	ee07 0a90 	vmov	s15, r0
 8003fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fc4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80040c0 <loop+0x1e0>
 8003fc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003fcc:	ee16 0a90 	vmov	r0, s13
 8003fd0:	f7fc fa7a 	bl	80004c8 <__aeabi_f2d>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	e9c7 2306 	strd	r2, r3, [r7, #24]

		  //cmd_vel_msg.linear.x = l_scale_ * axis_X;
		  //cmd_vel_msg.angular.z = a_scale_ * axis_Y;
		  stm_pub_msg.am_status = true;
 8003fdc:	4b39      	ldr	r3, [pc, #228]	; (80040c4 <loop+0x1e4>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	711a      	strb	r2, [r3, #4]
		  stm_pub_msg.e_stop_status = true;
 8003fe2:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <loop+0x1e4>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	715a      	strb	r2, [r3, #5]
		  stm_pub_msg.cmd_vel_mcu.linear.x = l_scale_ * axis_X;
 8003fe8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003ff0:	f7fc fac2 	bl	8000578 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7fc fd6c 	bl	8000ad8 <__aeabi_d2f>
 8004000:	4603      	mov	r3, r0
 8004002:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <loop+0x1e4>)
 8004004:	6113      	str	r3, [r2, #16]
		  stm_pub_msg.cmd_vel_mcu.angular.z = -a_scale_ * axis_Y;
 8004006:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800400e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004012:	4620      	mov	r0, r4
 8004014:	4629      	mov	r1, r5
 8004016:	f7fc faaf 	bl	8000578 <__aeabi_dmul>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	f7fc fd59 	bl	8000ad8 <__aeabi_d2f>
 8004026:	4603      	mov	r3, r0
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <loop+0x1e4>)
 800402a:	6293      	str	r3, [r2, #40]	; 0x28

		  freeway_diagnostics.publish(&stm_pub_msg);
 800402c:	4925      	ldr	r1, [pc, #148]	; (80040c4 <loop+0x1e4>)
 800402e:	4826      	ldr	r0, [pc, #152]	; (80040c8 <loop+0x1e8>)
 8004030:	f7ff f86f 	bl	8003112 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		  r_led_mode = 2;
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <loop+0x1ec>)
 8004036:	2202      	movs	r2, #2
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	e01f      	b.n	800407c <loop+0x19c>

		  //HAL_UART_Transmit_IT(&huart3, stm_pub_msg, sizeof(stm_pub_msg));
	  }
	  else if (*e_stop_status==false) // e_stop is on & *am_status is on/off
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <loop+0x1cc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d117      	bne.n	8004076 <loop+0x196>
	  {
		  stm_pub_msg.am_status = *am_status;
 8004046:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <loop+0x1d8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <loop+0x1e4>)
 800404e:	711a      	strb	r2, [r3, #4]
		  stm_pub_msg.e_stop_status = false;
 8004050:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <loop+0x1e4>)
 8004052:	2200      	movs	r2, #0
 8004054:	715a      	strb	r2, [r3, #5]
		  stm_pub_msg.cmd_vel_mcu.linear.x = 0;
 8004056:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <loop+0x1e4>)
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	611a      	str	r2, [r3, #16]
		  stm_pub_msg.cmd_vel_mcu.angular.z = 0;
 800405e:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <loop+0x1e4>)
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	629a      	str	r2, [r3, #40]	; 0x28

		  freeway_diagnostics.publish(&stm_pub_msg);
 8004066:	4917      	ldr	r1, [pc, #92]	; (80040c4 <loop+0x1e4>)
 8004068:	4817      	ldr	r0, [pc, #92]	; (80040c8 <loop+0x1e8>)
 800406a:	f7ff f852 	bl	8003112 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

		  r_led_mode = 1;
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <loop+0x1ec>)
 8004070:	2201      	movs	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	e002      	b.n	800407c <loop+0x19c>

		  //HAL_UART_Transmit_IT(&huart3, stm_pub_msg, sizeof(stm_pub_msg));
	  }
	  else r_led_mode = 0;
 8004076:	4b15      	ldr	r3, [pc, #84]	; (80040cc <loop+0x1ec>)
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]

	  pub_range.publish(&range_msg);
 800407c:	4908      	ldr	r1, [pc, #32]	; (80040a0 <loop+0x1c0>)
 800407e:	4814      	ldr	r0, [pc, #80]	; (80040d0 <loop+0x1f0>)
 8004080:	f7ff f847 	bl	8003112 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  previous_time = HAL_GetTick();
 8004084:	f002 f99a 	bl	80063bc <HAL_GetTick>
 8004088:	4603      	mov	r3, r0
 800408a:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <loop+0x1d0>)
 800408c:	6013      	str	r3, [r2, #0]
	}

	  nh.spinOnce();
 800408e:	4811      	ldr	r0, [pc, #68]	; (80040d4 <loop+0x1f4>)
 8004090:	f000 f9d0 	bl	8004434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

	  return r_led_mode;
 8004094:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <loop+0x1ec>)
 8004096:	781b      	ldrb	r3, [r3, #0]
	}
 8004098:	4618      	mov	r0, r3
 800409a:	373c      	adds	r7, #60	; 0x3c
 800409c:	46bd      	mov	sp, r7
 800409e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a0:	20001da4 	.word	0x20001da4
 80040a4:	40020000 	.word	0x40020000
 80040a8:	20001e78 	.word	0x20001e78
 80040ac:	20001e70 	.word	0x20001e70
 80040b0:	20001e98 	.word	0x20001e98
 80040b4:	20000000 	.word	0x20000000
 80040b8:	20001e74 	.word	0x20001e74
 80040bc:	ffffd8f0 	.word	0xffffd8f0
 80040c0:	461c4000 	.word	0x461c4000
 80040c4:	20001d64 	.word	0x20001d64
 80040c8:	20001d90 	.word	0x20001d90
 80040cc:	20001e9c 	.word	0x20001e9c
 80040d0:	20001e58 	.word	0x20001e58
 80040d4:	20001410 	.word	0x20001410
 80040d8:	33333333 	.word	0x33333333
 80040dc:	3fd33333 	.word	0x3fd33333
 80040e0:	9999999a 	.word	0x9999999a
 80040e4:	3fd99999 	.word	0x3fd99999

080040e8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  for (int i=0; i<1; i++){
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dc0f      	bgt.n	800411c <HAL_GPIO_EXTI_Callback+0x34>
	pin_stat = HAL_GPIO_ReadPin(e_stop_GPIO_Port, e_stop_Pin);
 80040fc:	2140      	movs	r1, #64	; 0x40
 80040fe:	480b      	ldr	r0, [pc, #44]	; (800412c <HAL_GPIO_EXTI_Callback+0x44>)
 8004100:	f003 ff96 	bl	8008030 <HAL_GPIO_ReadPin>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	b2da      	uxtb	r2, r3
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_GPIO_EXTI_Callback+0x48>)
 8004112:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<1; i++){
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3301      	adds	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e7ec      	b.n	80040f6 <HAL_GPIO_EXTI_Callback+0xe>
  }
  e_stop_status = &pin_stat;
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_GPIO_EXTI_Callback+0x4c>)
 800411e:	4a04      	ldr	r2, [pc, #16]	; (8004130 <HAL_GPIO_EXTI_Callback+0x48>)
 8004120:	601a      	str	r2, [r3, #0]
//  RESULT.result = 1;
//
//  clt.call(ESTOP_STATUS, RESULT);
  //HAL_Delay(1);

}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40020000 	.word	0x40020000
 8004130:	20001e78 	.word	0x20001e78
 8004134:	20001e70 	.word	0x20001e70

08004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d80d      	bhi.n	8004168 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	fa22 f103 	lsr.w	r1, r2, r3
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	b2ca      	uxtb	r2, r1
 800415e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3301      	adds	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e7ee      	b.n	8004146 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d811      	bhi.n	80041b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	440a      	add	r2, r1
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	4611      	mov	r1, r2
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	00d2      	lsls	r2, r2, #3
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3301      	adds	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e7ea      	b.n	8004188 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	4a04      	ldr	r2, [pc, #16]	; (80041dc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	0800d048 	.word	0x0800d048

080041e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ffe8 	bl	80041c0 <_ZN3ros15NodeHandleBase_C1Ev>
 80041f0:	4a39      	ldr	r2, [pc, #228]	; (80042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xf8>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe f816 	bl	800222c <_ZN13STM32HardwareC1Ev>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fca6 	bl	8002b60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b18      	cmp	r3, #24
 800421c:	d80a      	bhi.n	8004234 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x54>
      publishers[i] = 0;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004226:	2100      	movs	r1, #0
 8004228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3301      	adds	r3, #1
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e7f1      	b.n	8004218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b18      	cmp	r3, #24
 800423c:	d80b      	bhi.n	8004256 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x76>
      subscribers[i] = 0;
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	2200      	movs	r2, #0
 800424c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3301      	adds	r3, #1
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	e7f0      	b.n	8004238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004260:	d209      	bcs.n	8004276 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x96>
      message_in[i] = 0;
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	3318      	adds	r3, #24
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3301      	adds	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e7f1      	b.n	800425a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004280:	d20a      	bcs.n	8004298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xb8>
      message_out[i] = 0;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3301      	adds	r3, #1
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	e7f0      	b.n	800427a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
    req_param_resp.ints = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
    req_param_resp.floats_length = 0;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.floats = NULL;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.ints_length = 0;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
    req_param_resp.ints = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914

    spin_timeout_ = 0;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	615a      	str	r2, [r3, #20]
  }
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	0800cf74 	.word	0x0800cf74

080042dc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	4a04      	ldr	r2, [pc, #16]	; (80042f8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	0800d030 	.word	0x0800d030

080042fc <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ffe5 	bl	80042dc <_ZN3ros11Subscriber_C1Ev>
 8004312:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	330c      	adds	r3, #12
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff f8e3 	bl	80034e8 <_ZN13freeway_joyfw10stm_am_msgC1Ev>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	615a      	str	r2, [r3, #20]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]
  };
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	0800cf5c 	.word	0x0800cf5c

08004344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3304      	adds	r3, #4
 8004350:	4618      	mov	r0, r3
 8004352:	f7fd ff7b 	bl	800224c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
    bytes_ = 0;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
    index_ = 0;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    topic_ = 0;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
  };
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b18      	cmp	r3, #24
 8004390:	dc1b      	bgt.n	80043ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10e      	bne.n	80043c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	605a      	str	r2, [r3, #4]
        return true;
 80043be:	2301      	movs	r3, #1
 80043c0:	e004      	b.n	80043cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e7e0      	b.n	800438c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0xe>
      }
    }
    return false;
 80043ca:	2300      	movs	r3, #0
  }
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b18      	cmp	r3, #24
 80043ea:	dc1c      	bgt.n	8004426 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	f202 2206 	addw	r2, r2, #518	; 0x206
 80043f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d110      	bne.n	800441e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	60da      	str	r2, [r3, #12]
        return true;
 800441a:	2301      	movs	r3, #1
 800441c:	e004      	b.n	8004428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3301      	adds	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e7df      	b.n	80043e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8004426:	2300      	movs	r3, #0
  }
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	4618      	mov	r0, r3
 8004442:	f7fd ff2f 	bl	80022a4 <_ZN13STM32Hardware4timeEv>
 8004446:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004456:	4293      	cmp	r3, r2
 8004458:	d903      	bls.n	8004462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
    if (mode_ != MODE_FIRST_FF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	429a      	cmp	r2, r3
 8004476:	d903      	bls.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
      if (spin_timeout_ > 0)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	4618      	mov	r0, r3
 800448e:	f7fd ff09 	bl	80022a4 <_ZN13STM32Hardware4timeEv>
 8004492:	4602      	mov	r2, r0
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1ad2      	subs	r2, r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	429a      	cmp	r2, r3
 800449e:	bf8c      	ite	hi
 80044a0:	2301      	movhi	r3, #1
 80044a2:	2300      	movls	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 80044aa:	f06f 0301 	mvn.w	r3, #1
 80044ae:	e190      	b.n	80047d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fd fed6 	bl	8002266 <_ZN13STM32Hardware4readEv>
 80044ba:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f2c0 8170 	blt.w	80047a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x370>
      checksum_ += data;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	441a      	add	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80044da:	2b07      	cmp	r3, #7
 80044dc:	d11d      	bne.n	800451a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044e4:	1c59      	adds	r1, r3, #1
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	f8c2 18ec 	str.w	r1, [r2, #2284]	; 0x8ec
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	b2d1      	uxtb	r1, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	4413      	add	r3, r2
 80044f4:	460a      	mov	r2, r1
 80044f6:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 80044fe:	1e5a      	subs	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1b7      	bne.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2208      	movs	r2, #8
 8004514:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8004518:	e7b2      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d128      	bne.n	8004576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x142>
        if (data == 0xff)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2bff      	cmp	r3, #255	; 0xff
 8004528:	d10d      	bne.n	8004546 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x112>
          mode_++;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f103 0214 	add.w	r2, r3, #20
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8004544:	e79c      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	4618      	mov	r0, r3
 800454c:	f7fd feaa 	bl	80022a4 <_ZN13STM32Hardware4timeEv>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	bf8c      	ite	hi
 800455e:	2301      	movhi	r3, #1
 8004560:	2300      	movls	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d08b      	beq.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
          return SPIN_TIMEOUT;
 8004570:	f06f 0301 	mvn.w	r3, #1
 8004574:	e12d      	b.n	80047d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 800457c:	2b01      	cmp	r3, #1
 800457e:	d118      	bne.n	80045b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2bfe      	cmp	r3, #254	; 0xfe
 8004584:	d107      	bne.n	8004596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8004594:	e774      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
          if (configured_ == false)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f47f af6b 	bne.w	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f915 	bl	80047da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80045b0:	e766      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d113      	bne.n	80045e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1b0>
        bytes_ = data;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        index_ = 0;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        mode_++;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        checksum_ = data;               /* first byte for calculating size checksum */
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80045e2:	e74d      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d110      	bne.n	8004610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 28e4 	ldr.w	r2, [r3, #2276]	; 0x8e4
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	441a      	add	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        mode_++;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 800460e:	e737      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004616:	2b04      	cmp	r3, #4
 8004618:	d116      	bne.n	8004648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004620:	425a      	negs	r2, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	bf58      	it	pl
 8004628:	4253      	negpl	r3, r2
 800462a:	2bff      	cmp	r3, #255	; 0xff
 800462c:	d107      	bne.n	800463e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x20a>
          mode_++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 800463c:	e720      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8004646:	e71b      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 800464e:	2b05      	cmp	r3, #5
 8004650:	d10f      	bne.n	8004672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23e>
        topic_ = data;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        checksum_ = data;               /* first byte included in checksum */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8004670:	e706      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8004678:	2b06      	cmp	r3, #6
 800467a:	d117      	bne.n	80046ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x278>
        topic_ += data << 8;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 28e8 	ldr.w	r2, [r3, #2280]	; 0x8e8
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	441a      	add	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_ = MODE_MESSAGE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2207      	movs	r2, #7
 8004692:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        if (bytes_ == 0)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f47f aeef 	bne.w	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2208      	movs	r2, #8
 80046a6:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 80046aa:	e6e9      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	f47f aee4 	bne.w	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        if ((checksum_ % 256) == 255)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80046c6:	425a      	negs	r2, r3
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	bf58      	it	pl
 80046ce:	4253      	negpl	r3, r2
 80046d0:	2bff      	cmp	r3, #255	; 0xff
 80046d2:	f47f aed5 	bne.w	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d110      	bne.n	8004702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2ce>
            requestSyncTime();
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f87a 	bl	80047da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f894 	bl	8004814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
            last_sync_receive_time = c_time;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
            return SPIN_ERR;
 80046fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004700:	e067      	b.n	80047d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8004708:	2b0a      	cmp	r3, #10
 800470a:	d106      	bne.n	800471a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3318      	adds	r3, #24
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f95e 	bl	80049d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8004718:	e6b2      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8004720:	2b06      	cmp	r3, #6
 8004722:	d10d      	bne.n	8004740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f603 1208 	addw	r2, r3, #2312	; 0x908
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3318      	adds	r3, #24
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7fe fb4a 	bl	8002dca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 800473e:	e69f      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8004746:	2b0b      	cmp	r3, #11
 8004748:	d104      	bne.n	8004754 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x320>
            configured_ = false;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8004752:	e695      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 800475a:	3b64      	subs	r3, #100	; 0x64
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f43f ae89 	beq.w	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8004774:	3b64      	subs	r3, #100	; 0x64
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	6858      	ldr	r0, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8004788:	3b64      	subs	r3, #100	; 0x64
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	3218      	adds	r2, #24
 800479e:	4611      	mov	r1, r2
 80047a0:	4798      	blx	r3
    while (true)
 80047a2:	e66d      	b.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 80047a4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00f      	beq.n	80047d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80047be:	4293      	cmp	r3, r2
 80047c0:	d906      	bls.n	80047d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39c>
      requestSyncTime();
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f809 	bl	80047da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    return SPIN_OK;
 80047d0:	2300      	movs	r3, #0
  }
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80047da:	b580      	push	{r7, lr}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80047e2:	f107 030c 	add.w	r3, r7, #12
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd fe56 	bl	8002498 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f107 020c 	add.w	r2, r7, #12
 80047f6:	210a      	movs	r1, #10
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
    rt_time = hardware_.time();
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	4618      	mov	r0, r3
 8004802:	f7fd fd4f 	bl	80022a4 <_ZN13STM32Hardware4timeEv>
 8004806:	4602      	mov	r2, r0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	609a      	str	r2, [r3, #8]
  }
 800480c:	bf00      	nop
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004814:	b590      	push	{r4, r7, lr}
 8004816:	b08b      	sub	sp, #44	; 0x2c
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800481c:	f107 030c 	add.w	r3, r7, #12
 8004820:	4618      	mov	r0, r3
 8004822:	f7fd ff29 	bl	8002678 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004826:	2300      	movs	r3, #0
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	2b18      	cmp	r3, #24
 800482e:	dc5b      	bgt.n	80048e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d04f      	beq.n	80048e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004844:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	b29b      	uxth	r3, r3
 8004850:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	f202 2206 	addw	r2, r2, #518	; 0x206
 800485a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004866:	f202 2206 	addw	r2, r2, #518	; 0x206
 800486a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004874:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3308      	adds	r3, #8
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4608      	mov	r0, r1
 8004886:	4798      	blx	r3
 8004888:	4603      	mov	r3, r0
 800488a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	f202 2206 	addw	r2, r2, #518	; 0x206
 8004894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004898:	6859      	ldr	r1, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489e:	f202 2206 	addw	r2, r2, #518	; 0x206
 80048a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4608      	mov	r0, r1
 80048b0:	4798      	blx	r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80048b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ba:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681c      	ldr	r4, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	f202 2206 	addw	r2, r2, #518	; 0x206
 80048ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fc33 	bl	800313a <_ZN3ros9Publisher15getEndpointTypeEv>
 80048d4:	4601      	mov	r1, r0
 80048d6:	f107 030c 	add.w	r3, r7, #12
 80048da:	461a      	mov	r2, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	3301      	adds	r3, #1
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
 80048e6:	e7a0      	b.n	800482a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	2b18      	cmp	r3, #24
 80048f0:	dc68      	bgt.n	80049c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05b      	beq.n	80049bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	b29b      	uxth	r3, r3
 8004916:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4608      	mov	r0, r1
 800494e:	4798      	blx	r3
 8004950:	4603      	mov	r3, r0
 8004952:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4608      	mov	r0, r1
 8004978:	4798      	blx	r3
 800497a:	4603      	mov	r3, r0
 800497c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800497e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004982:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681c      	ldr	r4, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3304      	adds	r3, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4608      	mov	r0, r1
 80049ae:	4798      	blx	r3
 80049b0:	4601      	mov	r1, r0
 80049b2:	f107 030c 	add.w	r3, r7, #12
 80049b6:	461a      	mov	r2, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	3301      	adds	r3, #1
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	e793      	b.n	80048ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
  }
 80049cc:	bf00      	nop
 80049ce:	372c      	adds	r7, #44	; 0x2c
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd90      	pop	{r4, r7, pc}

080049d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80049de:	f107 0308 	add.w	r3, r7, #8
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fd fd58 	bl	8002498 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fd fc59 	bl	80022a4 <_ZN13STM32Hardware4timeEv>
 80049f2:	4602      	mov	r2, r0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fd fdb8 	bl	8002578 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4914      	ldr	r1, [pc, #80]	; (8004a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 8004a0e:	fba1 1303 	umull	r1, r3, r1, r3
 8004a12:	099b      	lsrs	r3, r3, #6
 8004a14:	4413      	add	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004a18:	6939      	ldr	r1, [r7, #16]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 8004a1e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a22:	099b      	lsrs	r3, r3, #6
 8004a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a28:	fb00 f303 	mul.w	r3, r0, r3
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x90>)
 8004a30:	fb02 f303 	mul.w	r3, r2, r3
 8004a34:	440b      	add	r3, r1
 8004a36:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004a38:	f107 0308 	add.w	r3, r7, #8
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f8a5 	bl	8004b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fd fc2a 	bl	80022a4 <_ZN13STM32Hardware4timeEv>
 8004a50:	4602      	mov	r2, r0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
  }
 8004a58:	bf00      	nop
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	10624dd3 	.word	0x10624dd3
 8004a64:	000f4240 	.word	0x000f4240

08004a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b63      	cmp	r3, #99	; 0x63
 8004a78:	dd09      	ble.n	8004a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 8004a80:	f083 0301 	eor.w	r3, r3, #1
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e079      	b.n	8004b82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	f502 6283 	add.w	r2, r2, #1048	; 0x418
 8004a9a:	3207      	adds	r2, #7
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
 8004aa2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	22ff      	movs	r2, #255	; 0xff
 8004aa8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    message_out[1] = PROTOCOL_VER;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	22fe      	movs	r2, #254	; 0xfe
 8004ab0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 241a 	ldrb.w	r2, [r3, #1050]	; 0x41a
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8004ada:	4413      	add	r3, r2
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	121b      	asrs	r3, r3, #8
 8004af8:	b21b      	sxth	r3, r3
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e

    /* calculate checksum */
    int chk = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b06:	2305      	movs	r3, #5
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	3306      	adds	r3, #6
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	dc0d      	bgt.n	8004b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	e7ec      	b.n	8004b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	3307      	adds	r3, #7
 8004b34:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	425a      	negs	r2, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	bf58      	it	pl
 8004b40:	4253      	negpl	r3, r2
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	1c59      	adds	r1, r3, #1
 8004b48:	6179      	str	r1, [r7, #20]
 8004b4a:	43d2      	mvns	r2, r2
 8004b4c:	b2d1      	uxtb	r1, r2
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	460a      	mov	r2, r1
 8004b54:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    if (l <= OUTPUT_SIZE)
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5e:	dc0a      	bgt.n	8004b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1d18      	adds	r0, r3, #4
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f7fd fb88 	bl	8002282 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	e005      	b.n	8004b82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004b76:	4905      	ldr	r1, [pc, #20]	; (8004b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f847 	bl	8004c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004b7e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	0800cec0 	.word	0x0800cec0

08004b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fd fb80 	bl	80022a4 <_ZN13STM32Hardware4timeEv>
 8004ba4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4914      	ldr	r1, [pc, #80]	; (8004c00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 8004bae:	fba1 1303 	umull	r1, r3, r1, r3
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	1e5a      	subs	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6859      	ldr	r1, [r3, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4b0f      	ldr	r3, [pc, #60]	; (8004c00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 8004bc4:	fba3 0302 	umull	r0, r3, r3, r2
 8004bc8:	099b      	lsrs	r3, r3, #6
 8004bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bce:	fb00 f303 	mul.w	r3, r0, r3
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	4a0b      	ldr	r2, [pc, #44]	; (8004c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	1aca      	subs	r2, r1, r3
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8004bde:	4413      	add	r3, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f103 020c 	add.w	r2, r3, #12
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3310      	adds	r3, #16
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f7fc faf3 	bl	80011dc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	10624dd3 	.word	0x10624dd3
 8004c04:	000f4240 	.word	0x000f4240
 8004c08:	3b9aca00 	.word	0x3b9aca00

08004c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	2103      	movs	r1, #3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f804 	bl	8004c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	460b      	mov	r3, r1
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004c36:	f107 0314 	add.w	r3, r7, #20
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd fee0 	bl	8002a00 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004c40:	7afb      	ldrb	r3, [r7, #11]
 8004c42:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f107 0214 	add.w	r2, r7, #20
 8004c52:	2107      	movs	r1, #7
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	4798      	blx	r3
  }
 8004c58:	bf00      	nop
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <_Z41__static_initialization_and_destruction_0ii>:
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d128      	bne.n	8004cc2 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d123      	bne.n	8004cc2 <_Z41__static_initialization_and_destruction_0ii+0x62>
ros::NodeHandle nh;
 8004c7a:	4814      	ldr	r0, [pc, #80]	; (8004ccc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004c7c:	f7ff fab0 	bl	80041e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Twist cmd_vel_msg;
 8004c80:	4813      	ldr	r0, [pc, #76]	; (8004cd0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004c82:	f7fe fb0d 	bl	80032a0 <_ZN13geometry_msgs5TwistC1Ev>
freeway_joyfw::stm_fw_msg stm_pub_msg;
 8004c86:	4813      	ldr	r0, [pc, #76]	; (8004cd4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004c88:	f7fe fb8c 	bl	80033a4 <_ZN13freeway_joyfw10stm_fw_msgC1Ev>
ros::Publisher freeway_diagnostics("freeway/diagnostics", &stm_pub_msg);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4a11      	ldr	r2, [pc, #68]	; (8004cd4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004c90:	4911      	ldr	r1, [pc, #68]	; (8004cd8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004c92:	4812      	ldr	r0, [pc, #72]	; (8004cdc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004c94:	f7fe fa26 	bl	80030e4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
freeway_joyfw::stm_fw_sonar_msg range_msg;
 8004c98:	4811      	ldr	r0, [pc, #68]	; (8004ce0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004c9a:	f7fe ffe3 	bl	8003c64 <_ZN13freeway_joyfw16stm_fw_sonar_msgC1Ev>
sensor_msgs::Range range_left;
 8004c9e:	4811      	ldr	r0, [pc, #68]	; (8004ce4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004ca0:	f7fe fe20 	bl	80038e4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range range_right;
 8004ca4:	4810      	ldr	r0, [pc, #64]	; (8004ce8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004ca6:	f7fe fe1d 	bl	80038e4 <_ZN11sensor_msgs5RangeC1Ev>
ros::Publisher pub_range("freeway/ultrasound", &range_msg);
 8004caa:	2300      	movs	r3, #0
 8004cac:	4a0c      	ldr	r2, [pc, #48]	; (8004ce0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004cae:	490f      	ldr	r1, [pc, #60]	; (8004cec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004cb0:	480f      	ldr	r0, [pc, #60]	; (8004cf0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004cb2:	f7fe fa17 	bl	80030e4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<freeway_joyfw::stm_am_msg> am_status_sub("freeway/am_status", &am_status_cb);
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4a0e      	ldr	r2, [pc, #56]	; (8004cf4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004cba:	490f      	ldr	r1, [pc, #60]	; (8004cf8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004cbc:	480f      	ldr	r0, [pc, #60]	; (8004cfc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004cbe:	f7ff fb1d 	bl	80042fc <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei>
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20001410 	.word	0x20001410
 8004cd0:	20001d40 	.word	0x20001d40
 8004cd4:	20001d64 	.word	0x20001d64
 8004cd8:	0800cefc 	.word	0x0800cefc
 8004cdc:	20001d90 	.word	0x20001d90
 8004ce0:	20001da4 	.word	0x20001da4
 8004ce4:	20001e00 	.word	0x20001e00
 8004ce8:	20001e2c 	.word	0x20001e2c
 8004cec:	0800cf10 	.word	0x0800cf10
 8004cf0:	20001e58 	.word	0x20001e58
 8004cf4:	08003d69 	.word	0x08003d69
 8004cf8:	0800cf24 	.word	0x0800cf24
 8004cfc:	20001e7c 	.word	0x20001e7c

08004d00 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe fc18 	bl	8003546 <_ZN13freeway_joyfw10stm_am_msg11deserializeEPh>
    this->cb_(msg);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	320c      	adds	r2, #12
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4798      	blx	r3
  }
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
  }
 8004d36:	4618      	mov	r0, r3
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fc18 	bl	8003584 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv>
 8004d54:	4603      	mov	r3, r0
  }
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fc18 	bl	80035a0 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev>
 8004d70:	4603      	mov	r3, r0
  }
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
    return configured_;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
  };
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <_GLOBAL__sub_I_nh>:
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f7ff ff5f 	bl	8004c60 <_Z41__static_initialization_and_destruction_0ii>
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <HAL_MspInit+0x4c>)
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <HAL_MspInit+0x4c>)
 8004db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004db8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <HAL_MspInit+0x4c>)
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc2:	607b      	str	r3, [r7, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <HAL_MspInit+0x4c>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	4a08      	ldr	r2, [pc, #32]	; (8004df0 <HAL_MspInit+0x4c>)
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_MspInit+0x4c>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40023800 	.word	0x40023800

08004df4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	605a      	str	r2, [r3, #4]
 8004e06:	609a      	str	r2, [r3, #8]
 8004e08:	60da      	str	r2, [r3, #12]
 8004e0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a2f      	ldr	r2, [pc, #188]	; (8004ed0 <HAL_ADC_MspInit+0xdc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d157      	bne.n	8004ec6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	4b2e      	ldr	r3, [pc, #184]	; (8004ed4 <HAL_ADC_MspInit+0xe0>)
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	4a2d      	ldr	r2, [pc, #180]	; (8004ed4 <HAL_ADC_MspInit+0xe0>)
 8004e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e24:	6453      	str	r3, [r2, #68]	; 0x44
 8004e26:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <HAL_ADC_MspInit+0xe0>)
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <HAL_ADC_MspInit+0xe0>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	4a26      	ldr	r2, [pc, #152]	; (8004ed4 <HAL_ADC_MspInit+0xe0>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6313      	str	r3, [r2, #48]	; 0x30
 8004e42:	4b24      	ldr	r3, [pc, #144]	; (8004ed4 <HAL_ADC_MspInit+0xe0>)
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004e4e:	2330      	movs	r3, #48	; 0x30
 8004e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e52:	2303      	movs	r3, #3
 8004e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e5a:	f107 0314 	add.w	r3, r7, #20
 8004e5e:	4619      	mov	r1, r3
 8004e60:	481d      	ldr	r0, [pc, #116]	; (8004ed8 <HAL_ADC_MspInit+0xe4>)
 8004e62:	f002 ff39 	bl	8007cd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8004e66:	4b1d      	ldr	r3, [pc, #116]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004e68:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <HAL_ADC_MspInit+0xec>)
 8004e6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e72:	4b1a      	ldr	r3, [pc, #104]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e78:	4b18      	ldr	r3, [pc, #96]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e7e:	4b17      	ldr	r3, [pc, #92]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004e8e:	4b13      	ldr	r3, [pc, #76]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004e90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e96:	4b11      	ldr	r3, [pc, #68]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004e98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ea4:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004eaa:	480c      	ldr	r0, [pc, #48]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004eac:	f001 ffea 	bl	8006e84 <HAL_DMA_Init>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004eb6:	f7fd f9b3 	bl	8002220 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a07      	ldr	r2, [pc, #28]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8004ec0:	4a06      	ldr	r2, [pc, #24]	; (8004edc <HAL_ADC_MspInit+0xe8>)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40012000 	.word	0x40012000
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40020000 	.word	0x40020000
 8004edc:	20000a6c 	.word	0x20000a6c
 8004ee0:	40026470 	.word	0x40026470

08004ee4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	; 0x38
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	609a      	str	r2, [r3, #8]
 8004ef8:	60da      	str	r2, [r3, #12]
 8004efa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a55      	ldr	r2, [pc, #340]	; (8005058 <HAL_ETH_MspInit+0x174>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	f040 80a4 	bne.w	8005050 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004f08:	2300      	movs	r3, #0
 8004f0a:	623b      	str	r3, [r7, #32]
 8004f0c:	4b53      	ldr	r3, [pc, #332]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	4a52      	ldr	r2, [pc, #328]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f16:	6313      	str	r3, [r2, #48]	; 0x30
 8004f18:	4b50      	ldr	r3, [pc, #320]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f20:	623b      	str	r3, [r7, #32]
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	2300      	movs	r3, #0
 8004f26:	61fb      	str	r3, [r7, #28]
 8004f28:	4b4c      	ldr	r3, [pc, #304]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	4a4b      	ldr	r2, [pc, #300]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f32:	6313      	str	r3, [r2, #48]	; 0x30
 8004f34:	4b49      	ldr	r3, [pc, #292]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2300      	movs	r3, #0
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	4b45      	ldr	r3, [pc, #276]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	4a44      	ldr	r2, [pc, #272]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f50:	4b42      	ldr	r3, [pc, #264]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	4b3e      	ldr	r3, [pc, #248]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	4a3d      	ldr	r2, [pc, #244]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f6c:	4b3b      	ldr	r3, [pc, #236]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	4b37      	ldr	r3, [pc, #220]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	4a36      	ldr	r2, [pc, #216]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6313      	str	r3, [r2, #48]	; 0x30
 8004f88:	4b34      	ldr	r3, [pc, #208]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	4b30      	ldr	r3, [pc, #192]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	4a2f      	ldr	r2, [pc, #188]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004f9e:	f043 0302 	orr.w	r3, r3, #2
 8004fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa4:	4b2d      	ldr	r3, [pc, #180]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	4b29      	ldr	r3, [pc, #164]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	4a28      	ldr	r2, [pc, #160]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc0:	4b26      	ldr	r3, [pc, #152]	; (800505c <HAL_ETH_MspInit+0x178>)
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004fcc:	2332      	movs	r3, #50	; 0x32
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fdc:	230b      	movs	r3, #11
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	481e      	ldr	r0, [pc, #120]	; (8005060 <HAL_ETH_MspInit+0x17c>)
 8004fe8:	f002 fe76 	bl	8007cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004fec:	2386      	movs	r3, #134	; 0x86
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ffc:	230b      	movs	r3, #11
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005004:	4619      	mov	r1, r3
 8005006:	4817      	ldr	r0, [pc, #92]	; (8005064 <HAL_ETH_MspInit+0x180>)
 8005008:	f002 fe66 	bl	8007cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800500c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005012:	2302      	movs	r3, #2
 8005014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005016:	2300      	movs	r3, #0
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800501a:	2303      	movs	r3, #3
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800501e:	230b      	movs	r3, #11
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005026:	4619      	mov	r1, r3
 8005028:	480f      	ldr	r0, [pc, #60]	; (8005068 <HAL_ETH_MspInit+0x184>)
 800502a:	f002 fe55 	bl	8007cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800502e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005034:	2302      	movs	r3, #2
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005038:	2300      	movs	r3, #0
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800503c:	2303      	movs	r3, #3
 800503e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005040:	230b      	movs	r3, #11
 8005042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005048:	4619      	mov	r1, r3
 800504a:	4808      	ldr	r0, [pc, #32]	; (800506c <HAL_ETH_MspInit+0x188>)
 800504c:	f002 fe44 	bl	8007cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8005050:	bf00      	nop
 8005052:	3738      	adds	r7, #56	; 0x38
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40028000 	.word	0x40028000
 800505c:	40023800 	.word	0x40023800
 8005060:	40020800 	.word	0x40020800
 8005064:	40020000 	.word	0x40020000
 8005068:	40020400 	.word	0x40020400
 800506c:	40021800 	.word	0x40021800

08005070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	; 0x28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005078:	f107 0314 	add.w	r3, r7, #20
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_I2C_MspInit+0x84>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d12c      	bne.n	80050ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <HAL_I2C_MspInit+0x88>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <HAL_I2C_MspInit+0x88>)
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	6313      	str	r3, [r2, #48]	; 0x30
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <HAL_I2C_MspInit+0x88>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80050ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050b4:	2312      	movs	r3, #18
 80050b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050bc:	2303      	movs	r3, #3
 80050be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80050c0:	2304      	movs	r3, #4
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	4619      	mov	r1, r3
 80050ca:	480c      	ldr	r0, [pc, #48]	; (80050fc <HAL_I2C_MspInit+0x8c>)
 80050cc:	f002 fe04 	bl	8007cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <HAL_I2C_MspInit+0x88>)
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	4a07      	ldr	r2, [pc, #28]	; (80050f8 <HAL_I2C_MspInit+0x88>)
 80050da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050de:	6413      	str	r3, [r2, #64]	; 0x40
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_I2C_MspInit+0x88>)
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80050ec:	bf00      	nop
 80050ee:	3728      	adds	r7, #40	; 0x28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40005400 	.word	0x40005400
 80050f8:	40023800 	.word	0x40023800
 80050fc:	40020400 	.word	0x40020400

08005100 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a23      	ldr	r2, [pc, #140]	; (800519c <HAL_TIM_PWM_MspInit+0x9c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d13f      	bne.n	8005192 <HAL_TIM_PWM_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <HAL_TIM_PWM_MspInit+0xa0>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <HAL_TIM_PWM_MspInit+0xa0>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6453      	str	r3, [r2, #68]	; 0x44
 8005122:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <HAL_TIM_PWM_MspInit+0xa0>)
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 800512e:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_TIM_PWM_MspInit+0xa8>)
 8005132:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 8005136:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800513a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800513c:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 800513e:	2240      	movs	r2, #64	; 0x40
 8005140:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 8005144:	2200      	movs	r2, #0
 8005146:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005148:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 800514a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800514e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005150:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 8005152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005156:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005158:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 800515a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800515e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8005160:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 8005162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005166:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8005168:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 800516a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800516e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 8005172:	2200      	movs	r2, #0
 8005174:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8005176:	480b      	ldr	r0, [pc, #44]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 8005178:	f001 fe84 	bl	8006e84 <HAL_DMA_Init>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8005182:	f7fd f84d 	bl	8002220 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a06      	ldr	r2, [pc, #24]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 800518a:	625a      	str	r2, [r3, #36]	; 0x24
 800518c:	4a05      	ldr	r2, [pc, #20]	; (80051a4 <HAL_TIM_PWM_MspInit+0xa4>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40010000 	.word	0x40010000
 80051a0:	40023800 	.word	0x40023800
 80051a4:	20000ca8 	.word	0x20000ca8
 80051a8:	40026458 	.word	0x40026458

080051ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08c      	sub	sp, #48	; 0x30
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b4:	f107 031c 	add.w	r3, r7, #28
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a3a      	ldr	r2, [pc, #232]	; (80052b4 <HAL_TIM_Base_MspInit+0x108>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d134      	bne.n	8005238 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	4b39      	ldr	r3, [pc, #228]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	4a38      	ldr	r2, [pc, #224]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	6413      	str	r3, [r2, #64]	; 0x40
 80051de:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	4b32      	ldr	r3, [pc, #200]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	4a31      	ldr	r2, [pc, #196]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	6313      	str	r3, [r2, #48]	; 0x30
 80051fa:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005206:	2310      	movs	r3, #16
 8005208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520a:	2302      	movs	r3, #2
 800520c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005212:	2300      	movs	r3, #0
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005216:	2302      	movs	r3, #2
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800521a:	f107 031c 	add.w	r3, r7, #28
 800521e:	4619      	mov	r1, r3
 8005220:	4826      	ldr	r0, [pc, #152]	; (80052bc <HAL_TIM_Base_MspInit+0x110>)
 8005222:	f002 fd59 	bl	8007cd8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	2100      	movs	r1, #0
 800522a:	201d      	movs	r0, #29
 800522c:	f001 fdf3 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005230:	201d      	movs	r0, #29
 8005232:	f001 fe0c 	bl	8006e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005236:	e039      	b.n	80052ac <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM4)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a20      	ldr	r2, [pc, #128]	; (80052c0 <HAL_TIM_Base_MspInit+0x114>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d134      	bne.n	80052ac <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 800524c:	f043 0304 	orr.w	r3, r3, #4
 8005250:	6413      	str	r3, [r2, #64]	; 0x40
 8005252:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 8005268:	f043 0308 	orr.w	r3, r3, #8
 800526c:	6313      	str	r3, [r2, #48]	; 0x30
 800526e:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <HAL_TIM_Base_MspInit+0x10c>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800527a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800527e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005280:	2302      	movs	r3, #2
 8005282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005284:	2300      	movs	r3, #0
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005288:	2300      	movs	r3, #0
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800528c:	2302      	movs	r3, #2
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005290:	f107 031c 	add.w	r3, r7, #28
 8005294:	4619      	mov	r1, r3
 8005296:	480b      	ldr	r0, [pc, #44]	; (80052c4 <HAL_TIM_Base_MspInit+0x118>)
 8005298:	f002 fd1e 	bl	8007cd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800529c:	2200      	movs	r2, #0
 800529e:	2100      	movs	r1, #0
 80052a0:	201e      	movs	r0, #30
 80052a2:	f001 fdb8 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80052a6:	201e      	movs	r0, #30
 80052a8:	f001 fdd1 	bl	8006e4e <HAL_NVIC_EnableIRQ>
}
 80052ac:	bf00      	nop
 80052ae:	3730      	adds	r7, #48	; 0x30
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40020400 	.word	0x40020400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40020c00 	.word	0x40020c00

080052c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d0:	f107 030c 	add.w	r3, r7, #12
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	605a      	str	r2, [r3, #4]
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	60da      	str	r2, [r3, #12]
 80052de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a12      	ldr	r2, [pc, #72]	; (8005330 <HAL_TIM_MspPostInit+0x68>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d11e      	bne.n	8005328 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	4b11      	ldr	r3, [pc, #68]	; (8005334 <HAL_TIM_MspPostInit+0x6c>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	4a10      	ldr	r2, [pc, #64]	; (8005334 <HAL_TIM_MspPostInit+0x6c>)
 80052f4:	f043 0310 	orr.w	r3, r3, #16
 80052f8:	6313      	str	r3, [r2, #48]	; 0x30
 80052fa:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <HAL_TIM_MspPostInit+0x6c>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800530a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530c:	2302      	movs	r3, #2
 800530e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005314:	2300      	movs	r3, #0
 8005316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005318:	2301      	movs	r3, #1
 800531a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800531c:	f107 030c 	add.w	r3, r7, #12
 8005320:	4619      	mov	r1, r3
 8005322:	4805      	ldr	r0, [pc, #20]	; (8005338 <HAL_TIM_MspPostInit+0x70>)
 8005324:	f002 fcd8 	bl	8007cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005328:	bf00      	nop
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40010000 	.word	0x40010000
 8005334:	40023800 	.word	0x40023800
 8005338:	40021000 	.word	0x40021000

0800533c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08c      	sub	sp, #48	; 0x30
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005344:	f107 031c 	add.w	r3, r7, #28
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	605a      	str	r2, [r3, #4]
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a65      	ldr	r2, [pc, #404]	; (80054f0 <HAL_UART_MspInit+0x1b4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d12d      	bne.n	80053ba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	4b64      	ldr	r3, [pc, #400]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	4a63      	ldr	r2, [pc, #396]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 8005368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800536c:	6413      	str	r3, [r2, #64]	; 0x40
 800536e:	4b61      	ldr	r3, [pc, #388]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	4b5d      	ldr	r3, [pc, #372]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	4a5c      	ldr	r2, [pc, #368]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 8005384:	f043 0308 	orr.w	r3, r3, #8
 8005388:	6313      	str	r3, [r2, #48]	; 0x30
 800538a:	4b5a      	ldr	r3, [pc, #360]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005396:	f44f 7340 	mov.w	r3, #768	; 0x300
 800539a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539c:	2302      	movs	r3, #2
 800539e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a4:	2303      	movs	r3, #3
 80053a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80053a8:	2307      	movs	r3, #7
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053ac:	f107 031c 	add.w	r3, r7, #28
 80053b0:	4619      	mov	r1, r3
 80053b2:	4851      	ldr	r0, [pc, #324]	; (80054f8 <HAL_UART_MspInit+0x1bc>)
 80053b4:	f002 fc90 	bl	8007cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80053b8:	e096      	b.n	80054e8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART6)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a4f      	ldr	r2, [pc, #316]	; (80054fc <HAL_UART_MspInit+0x1c0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	f040 8091 	bne.w	80054e8 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART6_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	4b4a      	ldr	r3, [pc, #296]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	4a49      	ldr	r2, [pc, #292]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 80053d0:	f043 0320 	orr.w	r3, r3, #32
 80053d4:	6453      	str	r3, [r2, #68]	; 0x44
 80053d6:	4b47      	ldr	r3, [pc, #284]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	4b43      	ldr	r3, [pc, #268]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	4a42      	ldr	r2, [pc, #264]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 80053ec:	f043 0304 	orr.w	r3, r3, #4
 80053f0:	6313      	str	r3, [r2, #48]	; 0x30
 80053f2:	4b40      	ldr	r3, [pc, #256]	; (80054f4 <HAL_UART_MspInit+0x1b8>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053fe:	23c0      	movs	r3, #192	; 0xc0
 8005400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005402:	2302      	movs	r3, #2
 8005404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005406:	2300      	movs	r3, #0
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800540a:	2303      	movs	r3, #3
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800540e:	2308      	movs	r3, #8
 8005410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005412:	f107 031c 	add.w	r3, r7, #28
 8005416:	4619      	mov	r1, r3
 8005418:	4839      	ldr	r0, [pc, #228]	; (8005500 <HAL_UART_MspInit+0x1c4>)
 800541a:	f002 fc5d 	bl	8007cd8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800541e:	4b39      	ldr	r3, [pc, #228]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 8005420:	4a39      	ldr	r2, [pc, #228]	; (8005508 <HAL_UART_MspInit+0x1cc>)
 8005422:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005424:	4b37      	ldr	r3, [pc, #220]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 8005426:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800542a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800542c:	4b35      	ldr	r3, [pc, #212]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 800542e:	2200      	movs	r2, #0
 8005430:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005432:	4b34      	ldr	r3, [pc, #208]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 8005434:	2200      	movs	r2, #0
 8005436:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005438:	4b32      	ldr	r3, [pc, #200]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 800543a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800543e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005440:	4b30      	ldr	r3, [pc, #192]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 8005442:	2200      	movs	r2, #0
 8005444:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005446:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 8005448:	2200      	movs	r2, #0
 800544a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800544c:	4b2d      	ldr	r3, [pc, #180]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 800544e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005452:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005454:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 8005456:	2200      	movs	r2, #0
 8005458:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800545a:	4b2a      	ldr	r3, [pc, #168]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 800545c:	2200      	movs	r2, #0
 800545e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005460:	4828      	ldr	r0, [pc, #160]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 8005462:	f001 fd0f 	bl	8006e84 <HAL_DMA_Init>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <HAL_UART_MspInit+0x134>
      Error_Handler();
 800546c:	f7fc fed8 	bl	8002220 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a24      	ldr	r2, [pc, #144]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 8005474:	639a      	str	r2, [r3, #56]	; 0x38
 8005476:	4a23      	ldr	r2, [pc, #140]	; (8005504 <HAL_UART_MspInit+0x1c8>)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800547c:	4b23      	ldr	r3, [pc, #140]	; (800550c <HAL_UART_MspInit+0x1d0>)
 800547e:	4a24      	ldr	r2, [pc, #144]	; (8005510 <HAL_UART_MspInit+0x1d4>)
 8005480:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8005482:	4b22      	ldr	r3, [pc, #136]	; (800550c <HAL_UART_MspInit+0x1d0>)
 8005484:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005488:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800548a:	4b20      	ldr	r3, [pc, #128]	; (800550c <HAL_UART_MspInit+0x1d0>)
 800548c:	2240      	movs	r2, #64	; 0x40
 800548e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005490:	4b1e      	ldr	r3, [pc, #120]	; (800550c <HAL_UART_MspInit+0x1d0>)
 8005492:	2200      	movs	r2, #0
 8005494:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005496:	4b1d      	ldr	r3, [pc, #116]	; (800550c <HAL_UART_MspInit+0x1d0>)
 8005498:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800549c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800549e:	4b1b      	ldr	r3, [pc, #108]	; (800550c <HAL_UART_MspInit+0x1d0>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054a4:	4b19      	ldr	r3, [pc, #100]	; (800550c <HAL_UART_MspInit+0x1d0>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80054aa:	4b18      	ldr	r3, [pc, #96]	; (800550c <HAL_UART_MspInit+0x1d0>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054b0:	4b16      	ldr	r3, [pc, #88]	; (800550c <HAL_UART_MspInit+0x1d0>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054b6:	4b15      	ldr	r3, [pc, #84]	; (800550c <HAL_UART_MspInit+0x1d0>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80054bc:	4813      	ldr	r0, [pc, #76]	; (800550c <HAL_UART_MspInit+0x1d0>)
 80054be:	f001 fce1 	bl	8006e84 <HAL_DMA_Init>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_UART_MspInit+0x190>
      Error_Handler();
 80054c8:	f7fc feaa 	bl	8002220 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a0f      	ldr	r2, [pc, #60]	; (800550c <HAL_UART_MspInit+0x1d0>)
 80054d0:	635a      	str	r2, [r3, #52]	; 0x34
 80054d2:	4a0e      	ldr	r2, [pc, #56]	; (800550c <HAL_UART_MspInit+0x1d0>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80054d8:	2200      	movs	r2, #0
 80054da:	2100      	movs	r1, #0
 80054dc:	2047      	movs	r0, #71	; 0x47
 80054de:	f001 fc9a 	bl	8006e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80054e2:	2047      	movs	r0, #71	; 0x47
 80054e4:	f001 fcb3 	bl	8006e4e <HAL_NVIC_EnableIRQ>
}
 80054e8:	bf00      	nop
 80054ea:	3730      	adds	r7, #48	; 0x30
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40004800 	.word	0x40004800
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40020c00 	.word	0x40020c00
 80054fc:	40011400 	.word	0x40011400
 8005500:	40020800 	.word	0x40020800
 8005504:	20000d90 	.word	0x20000d90
 8005508:	40026428 	.word	0x40026428
 800550c:	20000df0 	.word	0x20000df0
 8005510:	400264a0 	.word	0x400264a0

08005514 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800551c:	f107 0314 	add.w	r3, r7, #20
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	609a      	str	r2, [r3, #8]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005534:	d13f      	bne.n	80055b6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <HAL_PCD_MspInit+0xac>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	4a20      	ldr	r2, [pc, #128]	; (80055c0 <HAL_PCD_MspInit+0xac>)
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	6313      	str	r3, [r2, #48]	; 0x30
 8005546:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <HAL_PCD_MspInit+0xac>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005552:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005558:	2302      	movs	r3, #2
 800555a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555c:	2300      	movs	r3, #0
 800555e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005560:	2303      	movs	r3, #3
 8005562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005564:	230a      	movs	r3, #10
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005568:	f107 0314 	add.w	r3, r7, #20
 800556c:	4619      	mov	r1, r3
 800556e:	4815      	ldr	r0, [pc, #84]	; (80055c4 <HAL_PCD_MspInit+0xb0>)
 8005570:	f002 fbb2 	bl	8007cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005582:	f107 0314 	add.w	r3, r7, #20
 8005586:	4619      	mov	r1, r3
 8005588:	480e      	ldr	r0, [pc, #56]	; (80055c4 <HAL_PCD_MspInit+0xb0>)
 800558a:	f002 fba5 	bl	8007cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <HAL_PCD_MspInit+0xac>)
 8005590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005592:	4a0b      	ldr	r2, [pc, #44]	; (80055c0 <HAL_PCD_MspInit+0xac>)
 8005594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005598:	6353      	str	r3, [r2, #52]	; 0x34
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <HAL_PCD_MspInit+0xac>)
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	4a07      	ldr	r2, [pc, #28]	; (80055c0 <HAL_PCD_MspInit+0xac>)
 80055a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055a8:	6453      	str	r3, [r2, #68]	; 0x44
 80055aa:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <HAL_PCD_MspInit+0xac>)
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80055b6:	bf00      	nop
 80055b8:	3728      	adds	r7, #40	; 0x28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	40020000 	.word	0x40020000

080055c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80055cc:	e7fe      	b.n	80055cc <NMI_Handler+0x4>

080055ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055ce:	b480      	push	{r7}
 80055d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055d2:	e7fe      	b.n	80055d2 <HardFault_Handler+0x4>

080055d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055d8:	e7fe      	b.n	80055d8 <MemManage_Handler+0x4>

080055da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055da:	b480      	push	{r7}
 80055dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055de:	e7fe      	b.n	80055de <BusFault_Handler+0x4>

080055e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055e4:	e7fe      	b.n	80055e4 <UsageFault_Handler+0x4>

080055e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055e6:	b480      	push	{r7}
 80055e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055ea:	bf00      	nop
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055f8:	bf00      	nop
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005602:	b480      	push	{r7}
 8005604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005614:	f000 febe 	bl	8006394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005618:	bf00      	nop
 800561a:	bd80      	pop	{r7, pc}

0800561c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(e_stop_Pin);
 8005620:	2040      	movs	r0, #64	; 0x40
 8005622:	f002 fd37 	bl	8008094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005626:	bf00      	nop
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005630:	4802      	ldr	r0, [pc, #8]	; (800563c <TIM3_IRQHandler+0x10>)
 8005632:	f004 f975 	bl	8009920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005636:	bf00      	nop
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000c18 	.word	0x20000c18

08005640 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005644:	4802      	ldr	r0, [pc, #8]	; (8005650 <TIM4_IRQHandler+0x10>)
 8005646:	f004 f96b 	bl	8009920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800564a:	bf00      	nop
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000c60 	.word	0x20000c60

08005654 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005658:	4802      	ldr	r0, [pc, #8]	; (8005664 <DMA2_Stream1_IRQHandler+0x10>)
 800565a:	f001 fdab 	bl	80071b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800565e:	bf00      	nop
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000d90 	.word	0x20000d90

08005668 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800566c:	4802      	ldr	r0, [pc, #8]	; (8005678 <DMA2_Stream3_IRQHandler+0x10>)
 800566e:	f001 fda1 	bl	80071b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005672:	bf00      	nop
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000ca8 	.word	0x20000ca8

0800567c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005680:	4802      	ldr	r0, [pc, #8]	; (800568c <DMA2_Stream4_IRQHandler+0x10>)
 8005682:	f001 fd97 	bl	80071b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000a6c 	.word	0x20000a6c

08005690 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005694:	4802      	ldr	r0, [pc, #8]	; (80056a0 <DMA2_Stream6_IRQHandler+0x10>)
 8005696:	f001 fd8d 	bl	80071b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800569a:	bf00      	nop
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000df0 	.word	0x20000df0

080056a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80056a8:	4802      	ldr	r0, [pc, #8]	; (80056b4 <USART6_IRQHandler+0x10>)
 80056aa:	f005 fbbd 	bl	800ae28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80056ae:	bf00      	nop
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000d4c 	.word	0x20000d4c

080056b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
	return 1;
 80056bc:	2301      	movs	r3, #1
}
 80056be:	4618      	mov	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <_kill>:

int _kill(int pid, int sig)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80056d2:	f007 f8e9 	bl	800c8a8 <__errno>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2216      	movs	r2, #22
 80056da:	601a      	str	r2, [r3, #0]
	return -1;
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <_exit>:

void _exit (int status)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056f0:	f04f 31ff 	mov.w	r1, #4294967295
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff ffe7 	bl	80056c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80056fa:	e7fe      	b.n	80056fa <_exit+0x12>

080056fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005704:	4a14      	ldr	r2, [pc, #80]	; (8005758 <_sbrk+0x5c>)
 8005706:	4b15      	ldr	r3, [pc, #84]	; (800575c <_sbrk+0x60>)
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005710:	4b13      	ldr	r3, [pc, #76]	; (8005760 <_sbrk+0x64>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005718:	4b11      	ldr	r3, [pc, #68]	; (8005760 <_sbrk+0x64>)
 800571a:	4a12      	ldr	r2, [pc, #72]	; (8005764 <_sbrk+0x68>)
 800571c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <_sbrk+0x64>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4413      	add	r3, r2
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	429a      	cmp	r2, r3
 800572a:	d207      	bcs.n	800573c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800572c:	f007 f8bc 	bl	800c8a8 <__errno>
 8005730:	4603      	mov	r3, r0
 8005732:	220c      	movs	r2, #12
 8005734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005736:	f04f 33ff 	mov.w	r3, #4294967295
 800573a:	e009      	b.n	8005750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800573c:	4b08      	ldr	r3, [pc, #32]	; (8005760 <_sbrk+0x64>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <_sbrk+0x64>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	4a05      	ldr	r2, [pc, #20]	; (8005760 <_sbrk+0x64>)
 800574c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800574e:	68fb      	ldr	r3, [r7, #12]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20030000 	.word	0x20030000
 800575c:	00000400 	.word	0x00000400
 8005760:	20001ea0 	.word	0x20001ea0
 8005764:	20001ff8 	.word	0x20001ff8

08005768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <SystemInit+0x20>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	4a05      	ldr	r2, [pc, #20]	; (8005788 <SystemInit+0x20>)
 8005774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800577c:	bf00      	nop
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	e000ed00 	.word	0xe000ed00
 800578c:	00000000 	.word	0x00000000

08005790 <hsvtorbg>:
uint8_t enable_transmit=0;

uint8_t dutyoff=WSOFF;

static uint8_t *hsvtorbg(float H,float S,float V)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08c      	sub	sp, #48	; 0x30
 8005794:	af00      	add	r7, sp, #0
 8005796:	ed87 0a03 	vstr	s0, [r7, #12]
 800579a:	edc7 0a02 	vstr	s1, [r7, #8]
 800579e:	ed87 1a01 	vstr	s2, [r7, #4]
	static uint8_t HVS[3];
	float C=S*V;
 80057a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80057a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80057aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ae:	edc7 7a08 	vstr	s15, [r7, #32]
	float A=fmod(H/60.0, 2);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7fa fe88 	bl	80004c8 <__aeabi_f2d>
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	4b82      	ldr	r3, [pc, #520]	; (80059c8 <hsvtorbg+0x238>)
 80057be:	f7fb f805 	bl	80007cc <__aeabi_ddiv>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	ec43 2b17 	vmov	d7, r2, r3
 80057ca:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 80059c0 <hsvtorbg+0x230>
 80057ce:	eeb0 0a47 	vmov.f32	s0, s14
 80057d2:	eef0 0a67 	vmov.f32	s1, s15
 80057d6:	f006 ff1e 	bl	800c616 <fmod>
 80057da:	ec53 2b10 	vmov	r2, r3, d0
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	f7fb f979 	bl	8000ad8 <__aeabi_d2f>
 80057e6:	4603      	mov	r3, r0
 80057e8:	61fb      	str	r3, [r7, #28]
	float X1=(1.0-fabs((float)(A-1.0)));
 80057ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80057ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057f6:	eef0 7ae7 	vabs.f32	s15, s15
 80057fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005802:	edc7 7a06 	vstr	s15, [r7, #24]
	float X=C*X1;
 8005806:	ed97 7a08 	vldr	s14, [r7, #32]
 800580a:	edd7 7a06 	vldr	s15, [r7, #24]
 800580e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005812:	edc7 7a05 	vstr	s15, [r7, #20]
	float m=V-C;
 8005816:	ed97 7a01 	vldr	s14, [r7, #4]
 800581a:	edd7 7a08 	vldr	s15, [r7, #32]
 800581e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005822:	edc7 7a04 	vstr	s15, [r7, #16]
	float r=0,b=0,g=0;
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
	if(H >= 0 && H < 60){
 8005838:	edd7 7a03 	vldr	s15, [r7, #12]
 800583c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005844:	db10      	blt.n	8005868 <hsvtorbg+0xd8>
 8005846:	edd7 7a03 	vldr	s15, [r7, #12]
 800584a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80059cc <hsvtorbg+0x23c>
 800584e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005856:	d507      	bpl.n	8005868 <hsvtorbg+0xd8>
		r = C,g = X,b = 0;
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
 8005866:	e06e      	b.n	8005946 <hsvtorbg+0x1b6>
	}
	else if(H >= 60 && H < 120){
 8005868:	edd7 7a03 	vldr	s15, [r7, #12]
 800586c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80059cc <hsvtorbg+0x23c>
 8005870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005878:	db10      	blt.n	800589c <hsvtorbg+0x10c>
 800587a:	edd7 7a03 	vldr	s15, [r7, #12]
 800587e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80059d0 <hsvtorbg+0x240>
 8005882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588a:	d507      	bpl.n	800589c <hsvtorbg+0x10c>
		r = X,g = C,b = 0;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
 800589a:	e054      	b.n	8005946 <hsvtorbg+0x1b6>
	}
	else if(H >= 120 && H < 180){
 800589c:	edd7 7a03 	vldr	s15, [r7, #12]
 80058a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80059d0 <hsvtorbg+0x240>
 80058a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ac:	db10      	blt.n	80058d0 <hsvtorbg+0x140>
 80058ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80058b2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80059d4 <hsvtorbg+0x244>
 80058b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058be:	d507      	bpl.n	80058d0 <hsvtorbg+0x140>
		r = 0,g = C,b = X;
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ce:	e03a      	b.n	8005946 <hsvtorbg+0x1b6>
	}
	else if(H >= 180 && H < 240){
 80058d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80058d4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80059d4 <hsvtorbg+0x244>
 80058d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e0:	db10      	blt.n	8005904 <hsvtorbg+0x174>
 80058e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80058e6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80059d8 <hsvtorbg+0x248>
 80058ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f2:	d507      	bpl.n	8005904 <hsvtorbg+0x174>
		r = 0,g = X,b = C;
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
 8005902:	e020      	b.n	8005946 <hsvtorbg+0x1b6>
	}
	else if(H >= 240 && H < 300){
 8005904:	edd7 7a03 	vldr	s15, [r7, #12]
 8005908:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80059d8 <hsvtorbg+0x248>
 800590c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005914:	db10      	blt.n	8005938 <hsvtorbg+0x1a8>
 8005916:	edd7 7a03 	vldr	s15, [r7, #12]
 800591a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80059dc <hsvtorbg+0x24c>
 800591e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005926:	d507      	bpl.n	8005938 <hsvtorbg+0x1a8>
		r = X,g = 0,b = C;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
 8005936:	e006      	b.n	8005946 <hsvtorbg+0x1b6>
	}
	else{
		r = C,g = 0,b = X;
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	HVS[0] = (r+m)*255;
 8005946:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800594a:	edd7 7a04 	vldr	s15, [r7, #16]
 800594e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005952:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80059e0 <hsvtorbg+0x250>
 8005956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800595a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800595e:	edc7 7a00 	vstr	s15, [r7]
 8005962:	783b      	ldrb	r3, [r7, #0]
 8005964:	b2da      	uxtb	r2, r3
 8005966:	4b1f      	ldr	r3, [pc, #124]	; (80059e4 <hsvtorbg+0x254>)
 8005968:	701a      	strb	r2, [r3, #0]
	HVS[1] = (g+m)*255;
 800596a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800596e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005976:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80059e0 <hsvtorbg+0x250>
 800597a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800597e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005982:	edc7 7a00 	vstr	s15, [r7]
 8005986:	783b      	ldrb	r3, [r7, #0]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <hsvtorbg+0x254>)
 800598c:	705a      	strb	r2, [r3, #1]
	HVS[2] = (b+m)*255;
 800598e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005992:	edd7 7a04 	vldr	s15, [r7, #16]
 8005996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800599a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80059e0 <hsvtorbg+0x250>
 800599e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059a6:	edc7 7a00 	vstr	s15, [r7]
 80059aa:	783b      	ldrb	r3, [r7, #0]
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <hsvtorbg+0x254>)
 80059b0:	709a      	strb	r2, [r3, #2]
	return HVS;
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <hsvtorbg+0x254>)
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3730      	adds	r7, #48	; 0x30
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	f3af 8000 	nop.w
 80059c0:	00000000 	.word	0x00000000
 80059c4:	40000000 	.word	0x40000000
 80059c8:	404e0000 	.word	0x404e0000
 80059cc:	42700000 	.word	0x42700000
 80059d0:	42f00000 	.word	0x42f00000
 80059d4:	43340000 	.word	0x43340000
 80059d8:	43700000 	.word	0x43700000
 80059dc:	43960000 	.word	0x43960000
 80059e0:	437f0000 	.word	0x437f0000
 80059e4:	20001fcc 	.word	0x20001fcc

080059e8 <rgbtohsv>:

float *rgbtohsv(uint8_t red, uint8_t green, uint8_t blue)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b08d      	sub	sp, #52	; 0x34
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	71fb      	strb	r3, [r7, #7]
 80059f2:	460b      	mov	r3, r1
 80059f4:	71bb      	strb	r3, [r7, #6]
 80059f6:	4613      	mov	r3, r2
 80059f8:	717b      	strb	r3, [r7, #5]
	static float HSV[3];
	uint8_t r = red;
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	77fb      	strb	r3, [r7, #31]
	uint8_t g = green;
 80059fe:	79bb      	ldrb	r3, [r7, #6]
 8005a00:	77bb      	strb	r3, [r7, #30]
	uint8_t b = blue;
 8005a02:	797b      	ldrb	r3, [r7, #5]
 8005a04:	777b      	strb	r3, [r7, #29]
	float r_per = (float)r/255.0;
 8005a06:	7ffb      	ldrb	r3, [r7, #31]
 8005a08:	ee07 3a90 	vmov	s15, r3
 8005a0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a10:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8005cf8 <rgbtohsv+0x310>
 8005a14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a18:	edc7 7a06 	vstr	s15, [r7, #24]
	float g_per = (float)g/255.0;
 8005a1c:	7fbb      	ldrb	r3, [r7, #30]
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a26:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8005cf8 <rgbtohsv+0x310>
 8005a2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a2e:	edc7 7a05 	vstr	s15, [r7, #20]
	float b_per = (float)b/255.0;
 8005a32:	7f7b      	ldrb	r3, [r7, #29]
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a3c:	eddf 6aae 	vldr	s13, [pc, #696]	; 8005cf8 <rgbtohsv+0x310>
 8005a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a44:	edc7 7a04 	vstr	s15, [r7, #16]

	float max_color = 0;
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((r_per >= g_per) && (r_per >= b_per)) max_color = r_per;
 8005a4e:	ed97 7a06 	vldr	s14, [r7, #24]
 8005a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5e:	db0a      	blt.n	8005a76 <rgbtohsv+0x8e>
 8005a60:	ed97 7a06 	vldr	s14, [r7, #24]
 8005a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a70:	db01      	blt.n	8005a76 <rgbtohsv+0x8e>
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((g_per >= r_per) && (g_per >= b_per)) max_color = g_per;
 8005a76:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a86:	db0a      	blt.n	8005a9e <rgbtohsv+0xb6>
 8005a88:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a98:	db01      	blt.n	8005a9e <rgbtohsv+0xb6>
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((b_per >= r_per) && (b_per >= g_per)) max_color = b_per;
 8005a9e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005aa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005aa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aae:	db0a      	blt.n	8005ac6 <rgbtohsv+0xde>
 8005ab0:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac0:	db01      	blt.n	8005ac6 <rgbtohsv+0xde>
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c

	float min_color = 0;
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28
	if((r_per <= g_per) && (r_per <= b_per)) min_color = r_per;
 8005acc:	ed97 7a06 	vldr	s14, [r7, #24]
 8005ad0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005adc:	d80a      	bhi.n	8005af4 <rgbtohsv+0x10c>
 8005ade:	ed97 7a06 	vldr	s14, [r7, #24]
 8005ae2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aee:	d801      	bhi.n	8005af4 <rgbtohsv+0x10c>
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
	if((g_per <= r_per) && (g_per <= b_per)) min_color = g_per;
 8005af4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005af8:	edd7 7a06 	vldr	s15, [r7, #24]
 8005afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	d80a      	bhi.n	8005b1c <rgbtohsv+0x134>
 8005b06:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b16:	d801      	bhi.n	8005b1c <rgbtohsv+0x134>
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28
	if((b_per <= r_per) && (b_per <= g_per)) min_color = b_per;
 8005b1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b20:	edd7 7a06 	vldr	s15, [r7, #24]
 8005b24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2c:	d80a      	bhi.n	8005b44 <rgbtohsv+0x15c>
 8005b2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b32:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3e:	d801      	bhi.n	8005b44 <rgbtohsv+0x15c>
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28

	float V=0;
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
	float S=0;
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
	float H=0;
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	623b      	str	r3, [r7, #32]

	V=(max_color + min_color)/2;
 8005b56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005b5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b62:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b6a:	edc7 7a03 	vstr	s15, [r7, #12]

	if(max_color == min_color) {
 8005b6e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005b72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005b76:	eeb4 7a67 	vcmp.f32	s14, s15
 8005b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7e:	d106      	bne.n	8005b8e <rgbtohsv+0x1a6>
		S = 0;
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
		H = 0;
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	623b      	str	r3, [r7, #32]
 8005b8c:	e080      	b.n	8005c90 <rgbtohsv+0x2a8>
	}
	else {
		if (V < 0.5) {
 8005b8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9e:	d510      	bpl.n	8005bc2 <rgbtohsv+0x1da>
			S = (max_color - min_color)/(max_color + min_color);
 8005ba0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005ba4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005ba8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005bac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005bb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005bb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bbc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8005bc0:	e013      	b.n	8005bea <rgbtohsv+0x202>
		}
		else {
			S = (max_color - min_color)/(2-max_color - min_color);
 8005bc2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005bc6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005bca:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005bce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005bd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005bd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005bde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		}

		if (max_color == r_per) {
 8005bea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005bee:	edd7 7a06 	vldr	s15, [r7, #24]
 8005bf2:	eeb4 7a67 	vcmp.f32	s14, s15
 8005bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfa:	d10f      	bne.n	8005c1c <rgbtohsv+0x234>
			H = (g_per - b_per)/(max_color-min_color);
 8005bfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c00:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c04:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005c08:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005c0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c18:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		if (max_color == g_per) {
 8005c1c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005c20:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c24:	eeb4 7a67 	vcmp.f32	s14, s15
 8005c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2c:	d113      	bne.n	8005c56 <rgbtohsv+0x26e>
			H = 2 + (b_per - r_per)/(max_color - min_color);
 8005c2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c32:	edd7 7a06 	vldr	s15, [r7, #24]
 8005c36:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005c3a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005c3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c4a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005c4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c52:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		if (max_color == b_per) {
 8005c56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005c5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8005c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c66:	d113      	bne.n	8005c90 <rgbtohsv+0x2a8>
			H = 4 + (r_per - g_per)/(max_color - min_color);
 8005c68:	ed97 7a06 	vldr	s14, [r7, #24]
 8005c6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c70:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005c74:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005c78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c84:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005c88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c8c:	edc7 7a08 	vstr	s15, [r7, #32]
		}
	}

	H = H*60;
 8005c90:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c94:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005cfc <rgbtohsv+0x314>
 8005c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c9c:	edc7 7a08 	vstr	s15, [r7, #32]
	if (H<0) H+= 360;
 8005ca0:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ca4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cac:	d507      	bpl.n	8005cbe <rgbtohsv+0x2d6>
 8005cae:	edd7 7a08 	vldr	s15, [r7, #32]
 8005cb2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8005d00 <rgbtohsv+0x318>
 8005cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cba:	edc7 7a08 	vstr	s15, [r7, #32]

	HSV[0]=H;
 8005cbe:	4a11      	ldr	r2, [pc, #68]	; (8005d04 <rgbtohsv+0x31c>)
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	6013      	str	r3, [r2, #0]
	HSV[1]=S*100;
 8005cc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005cc8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005d08 <rgbtohsv+0x320>
 8005ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <rgbtohsv+0x31c>)
 8005cd2:	edc3 7a01 	vstr	s15, [r3, #4]
	HSV[2]=V*100;
 8005cd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cda:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005d08 <rgbtohsv+0x320>
 8005cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ce2:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <rgbtohsv+0x31c>)
 8005ce4:	edc3 7a02 	vstr	s15, [r3, #8]

	return HSV;
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <rgbtohsv+0x31c>)
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3734      	adds	r7, #52	; 0x34
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	437f0000 	.word	0x437f0000
 8005cfc:	42700000 	.word	0x42700000
 8005d00:	43b40000 	.word	0x43b40000
 8005d04:	20001fd0 	.word	0x20001fd0
 8005d08:	42c80000 	.word	0x42c80000

08005d0c <init_neopixel>:

void init_neopixel(type_led in_type_of_led)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	71fb      	strb	r3, [r7, #7]
	type_of_led=in_type_of_led;
 8005d16:	4a0c      	ldr	r2, [pc, #48]	; (8005d48 <init_neopixel+0x3c>)
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	7013      	strb	r3, [r2, #0]
	switch (type_of_led) {
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <init_neopixel+0x3c>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d002      	beq.n	8005d2a <init_neopixel+0x1e>
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d004      	beq.n	8005d32 <init_neopixel+0x26>
			break;
		case WS2812B:
			dutyoff=WSBOFF;
			break;
		default:
			break;
 8005d28:	e007      	b.n	8005d3a <init_neopixel+0x2e>
			dutyoff=WSOFF;
 8005d2a:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <init_neopixel+0x40>)
 8005d2c:	221d      	movs	r2, #29
 8005d2e:	701a      	strb	r2, [r3, #0]
			break;
 8005d30:	e003      	b.n	8005d3a <init_neopixel+0x2e>
			dutyoff=WSBOFF;
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <init_neopixel+0x40>)
 8005d34:	2221      	movs	r2, #33	; 0x21
 8005d36:	701a      	strb	r2, [r3, #0]
			break;
 8005d38:	bf00      	nop
	}
	all_black_render();
 8005d3a:	f000 f809 	bl	8005d50 <all_black_render>
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20001ea4 	.word	0x20001ea4
 8005d4c:	2000000a 	.word	0x2000000a

08005d50 <all_black_render>:

void all_black_render(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
	uint_fast16_t var;
	for (var = 0; var < ENDBUFFERLED; ++var)
 8005d56:	2300      	movs	r3, #0
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	e01c      	b.n	8005d96 <all_black_render+0x46>
	{
		allrgb[var].blue=0;
 8005d5c:	4912      	ldr	r1, [pc, #72]	; (8005da8 <all_black_render+0x58>)
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4413      	add	r3, r2
 8005d66:	440b      	add	r3, r1
 8005d68:	3301      	adds	r3, #1
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
		allrgb[var].red=0;
 8005d6e:	490e      	ldr	r1, [pc, #56]	; (8005da8 <all_black_render+0x58>)
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	440b      	add	r3, r1
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
		allrgb[var].green=0;
 8005d7e:	490a      	ldr	r1, [pc, #40]	; (8005da8 <all_black_render+0x58>)
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4613      	mov	r3, r2
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4413      	add	r3, r2
 8005d88:	440b      	add	r3, r1
 8005d8a:	3302      	adds	r3, #2
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
	for (var = 0; var < ENDBUFFERLED; ++var)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3301      	adds	r3, #1
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b3d      	cmp	r3, #61	; 0x3d
 8005d9a:	d9df      	bls.n	8005d5c <all_black_render+0xc>
	}
	render_neopixel();
 8005d9c:	f000 f8aa 	bl	8005ef4 <render_neopixel>
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20001f10 	.word	0x20001f10

08005dac <render_breath_mode>:
	HAL_Delay(delay);
	render_neopixel();
}

void render_breath_mode( uint8_t blue,uint8_t red,uint8_t green,uint16_t delay)
{
 8005dac:	b590      	push	{r4, r7, lr}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4623      	mov	r3, r4
 8005dbc:	71fb      	strb	r3, [r7, #7]
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71bb      	strb	r3, [r7, #6]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	717b      	strb	r3, [r7, #5]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	807b      	strh	r3, [r7, #2]
	uint_fast16_t var,var1;
	static uint16_t angle,angle_cache;
	float *rgb2hsv = rgbtohsv(red,green,blue);
 8005dca:	79fa      	ldrb	r2, [r7, #7]
 8005dcc:	7979      	ldrb	r1, [r7, #5]
 8005dce:	79bb      	ldrb	r3, [r7, #6]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff fe09 	bl	80059e8 <rgbtohsv>
 8005dd6:	60f8      	str	r0, [r7, #12]
	if(++angle>360)
 8005dd8:	4b43      	ldr	r3, [pc, #268]	; (8005ee8 <render_breath_mode+0x13c>)
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	4b41      	ldr	r3, [pc, #260]	; (8005ee8 <render_breath_mode+0x13c>)
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	4b40      	ldr	r3, [pc, #256]	; (8005ee8 <render_breath_mode+0x13c>)
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8005dec:	d902      	bls.n	8005df4 <render_breath_mode+0x48>
		angle=0;
 8005dee:	4b3e      	ldr	r3, [pc, #248]	; (8005ee8 <render_breath_mode+0x13c>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	801a      	strh	r2, [r3, #0]
	for (var = 0; var < ZONE; ++var) {
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	e068      	b.n	8005ecc <render_breath_mode+0x120>
		angle_cache=angle+(360/ZONE)*var;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	0052      	lsls	r2, r2, #1
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <render_breath_mode+0x13c>)
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	4b36      	ldr	r3, [pc, #216]	; (8005eec <render_breath_mode+0x140>)
 8005e12:	801a      	strh	r2, [r3, #0]
		if(angle_cache>360)
 8005e14:	4b35      	ldr	r3, [pc, #212]	; (8005eec <render_breath_mode+0x140>)
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8005e1c:	d90f      	bls.n	8005e3e <render_breath_mode+0x92>
			angle_cache=(angle+(360/ZONE)*var)-360;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	0052      	lsls	r2, r2, #1
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	4b2e      	ldr	r3, [pc, #184]	; (8005ee8 <render_breath_mode+0x13c>)
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	4413      	add	r3, r2
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	4b2c      	ldr	r3, [pc, #176]	; (8005eec <render_breath_mode+0x140>)
 8005e3c:	801a      	strh	r2, [r3, #0]
		uint8_t *hvs = hsvtorbg(*rgb2hsv, *(rgb2hsv+1), angle_cache);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	edd3 7a00 	vldr	s15, [r3]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3304      	adds	r3, #4
 8005e48:	ed93 7a00 	vldr	s14, [r3]
 8005e4c:	4b27      	ldr	r3, [pc, #156]	; (8005eec <render_breath_mode+0x140>)
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	ee06 3a90 	vmov	s13, r3
 8005e54:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005e58:	eeb0 1a66 	vmov.f32	s2, s13
 8005e5c:	eef0 0a47 	vmov.f32	s1, s14
 8005e60:	eeb0 0a67 	vmov.f32	s0, s15
 8005e64:	f7ff fc94 	bl	8005790 <hsvtorbg>
 8005e68:	60b8      	str	r0, [r7, #8]
		for (var1 = var*LEDPERZONE+2; var1 < (var+1)*LEDPERZONE+2; ++var1) {
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	e022      	b.n	8005eba <render_breath_mode+0x10e>
			allrgb[var1].green=*hvs;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	7818      	ldrb	r0, [r3, #0]
 8005e78:	491d      	ldr	r1, [pc, #116]	; (8005ef0 <render_breath_mode+0x144>)
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	4413      	add	r3, r2
 8005e82:	440b      	add	r3, r1
 8005e84:	3302      	adds	r3, #2
 8005e86:	4602      	mov	r2, r0
 8005e88:	701a      	strb	r2, [r3, #0]
			allrgb[var1].red=*(hvs+1);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	7858      	ldrb	r0, [r3, #1]
 8005e8e:	4918      	ldr	r1, [pc, #96]	; (8005ef0 <render_breath_mode+0x144>)
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	440b      	add	r3, r1
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	701a      	strb	r2, [r3, #0]
			allrgb[var1].blue=*(hvs+2);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	7898      	ldrb	r0, [r3, #2]
 8005ea2:	4913      	ldr	r1, [pc, #76]	; (8005ef0 <render_breath_mode+0x144>)
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	4413      	add	r3, r2
 8005eac:	440b      	add	r3, r1
 8005eae:	3301      	adds	r3, #1
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	701a      	strb	r2, [r3, #0]
		for (var1 = var*LEDPERZONE+2; var1 < (var+1)*LEDPERZONE+2; ++var1) {
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3d6      	bcc.n	8005e74 <render_breath_mode+0xc8>
	for (var = 0; var < ZONE; ++var) {
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b1d      	cmp	r3, #29
 8005ed0:	d993      	bls.n	8005dfa <render_breath_mode+0x4e>
		}
	}
	HAL_Delay(delay);
 8005ed2:	887b      	ldrh	r3, [r7, #2]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fa7d 	bl	80063d4 <HAL_Delay>
	render_neopixel();
 8005eda:	f000 f80b 	bl	8005ef4 <render_neopixel>
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd90      	pop	{r4, r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20001fdc 	.word	0x20001fdc
 8005eec:	20001fde 	.word	0x20001fde
 8005ef0:	20001f10 	.word	0x20001f10

08005ef4 <render_neopixel>:
		render_neopixel();
	}
}

void render_neopixel()
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
	mode=START;
 8005efa:	4b21      	ldr	r3, [pc, #132]	; (8005f80 <render_neopixel+0x8c>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	701a      	strb	r2, [r3, #0]
	uint_fast16_t var;
	if(type_of_led!=NOTDEFINE)
 8005f00:	4b20      	ldr	r3, [pc, #128]	; (8005f84 <render_neopixel+0x90>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d035      	beq.n	8005f74 <render_neopixel+0x80>
	{
		present_led_counting=0;
 8005f08:	4b1f      	ldr	r3, [pc, #124]	; (8005f88 <render_neopixel+0x94>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	e025      	b.n	8005f60 <render_neopixel+0x6c>
		{
			buffer[var]=0<<(((allrgb[0].green<<var)&0x80)>0);
 8005f14:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <render_neopixel+0x98>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2100      	movs	r1, #0
 8005f1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=0<<(((allrgb[0].red<<var)&0x80)>0);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3308      	adds	r3, #8
 8005f22:	4a1a      	ldr	r2, [pc, #104]	; (8005f8c <render_neopixel+0x98>)
 8005f24:	2100      	movs	r1, #0
 8005f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=0<<(((allrgb[0].blue<<var)&0x80)>0);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3310      	adds	r3, #16
 8005f2e:	4a17      	ldr	r2, [pc, #92]	; (8005f8c <render_neopixel+0x98>)
 8005f30:	2100      	movs	r1, #0
 8005f32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+24]=0<<(((allrgb[1].green<<var)&0x80)>0);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3318      	adds	r3, #24
 8005f3a:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <render_neopixel+0x98>)
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=0<<(((allrgb[1].red<<var)&0x80)>0);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3320      	adds	r3, #32
 8005f46:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <render_neopixel+0x98>)
 8005f48:	2100      	movs	r1, #0
 8005f4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=0<<(((allrgb[1].blue<<var)&0x80)>0);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3328      	adds	r3, #40	; 0x28
 8005f52:	4a0e      	ldr	r2, [pc, #56]	; (8005f8c <render_neopixel+0x98>)
 8005f54:	2100      	movs	r1, #0
 8005f56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	607b      	str	r3, [r7, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b07      	cmp	r3, #7
 8005f64:	d9d6      	bls.n	8005f14 <render_neopixel+0x20>
		}
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)buffer, 48);
 8005f66:	2330      	movs	r3, #48	; 0x30
 8005f68:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <render_neopixel+0x98>)
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	4808      	ldr	r0, [pc, #32]	; (8005f90 <render_neopixel+0x9c>)
 8005f6e:	f003 f8bb 	bl	80090e8 <HAL_TIM_PWM_Start_DMA>
	}
	else
	{
		__NOP();
	}
}
 8005f72:	e000      	b.n	8005f76 <render_neopixel+0x82>
		__NOP();
 8005f74:	bf00      	nop
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20001ea5 	.word	0x20001ea5
 8005f84:	20001ea4 	.word	0x20001ea4
 8005f88:	20001f0c 	.word	0x20001f0c
 8005f8c:	20001ea8 	.word	0x20001ea8
 8005f90:	20000bd0 	.word	0x20000bd0

08005f94 <prepare_next_led>:

void prepare_next_led(uint16_t position,uint8_t alpha)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	460a      	mov	r2, r1
 8005f9e:	80fb      	strh	r3, [r7, #6]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	717b      	strb	r3, [r7, #5]
	uint_fast8_t var;
	++position;
 8005fa4:	88fb      	ldrh	r3, [r7, #6]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	80fb      	strh	r3, [r7, #6]
	if(alpha==1)
 8005faa:	797b      	ldrb	r3, [r7, #5]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d161      	bne.n	8006074 <prepare_next_led+0xe0>
	{
		for (var = 0; var < 8; ++var) {
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e05a      	b.n	800606c <prepare_next_led+0xd8>
			buffer[var]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
 8005fb6:	4b63      	ldr	r3, [pc, #396]	; (8006144 <prepare_next_led+0x1b0>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	88fa      	ldrh	r2, [r7, #6]
 8005fbe:	4962      	ldr	r1, [pc, #392]	; (8006148 <prepare_next_led+0x1b4>)
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	4413      	add	r3, r2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3302      	adds	r3, #2
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bfcc      	ite	gt
 8005fdc:	2301      	movgt	r3, #1
 8005fde:	2300      	movle	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	fa00 f303 	lsl.w	r3, r0, r3
 8005fe6:	b299      	uxth	r1, r3
 8005fe8:	4a58      	ldr	r2, [pc, #352]	; (800614c <prepare_next_led+0x1b8>)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
 8005ff0:	4b54      	ldr	r3, [pc, #336]	; (8006144 <prepare_next_led+0x1b0>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	88fa      	ldrh	r2, [r7, #6]
 8005ff8:	4953      	ldr	r1, [pc, #332]	; (8006148 <prepare_next_led+0x1b4>)
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4413      	add	r3, r2
 8006000:	440b      	add	r3, r1
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b00      	cmp	r3, #0
 8006012:	bfcc      	ite	gt
 8006014:	2301      	movgt	r3, #1
 8006016:	2300      	movle	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	fa00 f203 	lsl.w	r2, r0, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3308      	adds	r3, #8
 8006022:	b291      	uxth	r1, r2
 8006024:	4a49      	ldr	r2, [pc, #292]	; (800614c <prepare_next_led+0x1b8>)
 8006026:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
 800602a:	4b46      	ldr	r3, [pc, #280]	; (8006144 <prepare_next_led+0x1b0>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	88fa      	ldrh	r2, [r7, #6]
 8006032:	4945      	ldr	r1, [pc, #276]	; (8006148 <prepare_next_led+0x1b4>)
 8006034:	4613      	mov	r3, r2
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	4413      	add	r3, r2
 800603a:	440b      	add	r3, r1
 800603c:	3301      	adds	r3, #1
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	bfcc      	ite	gt
 8006050:	2301      	movgt	r3, #1
 8006052:	2300      	movle	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	fa00 f203 	lsl.w	r2, r0, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3310      	adds	r3, #16
 800605e:	b291      	uxth	r1, r2
 8006060:	4a3a      	ldr	r2, [pc, #232]	; (800614c <prepare_next_led+0x1b8>)
 8006062:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3301      	adds	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b07      	cmp	r3, #7
 8006070:	d9a1      	bls.n	8005fb6 <prepare_next_led+0x22>
			buffer[var+24]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
			buffer[var+32]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
			buffer[var+40]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
		}
	}
}
 8006072:	e061      	b.n	8006138 <prepare_next_led+0x1a4>
		for (var = 0; var < 8; ++var) {
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	e05b      	b.n	8006132 <prepare_next_led+0x19e>
			buffer[var+24]=dutyoff<<(((allrgb[position].green<<var)&0x80)>0);
 800607a:	4b32      	ldr	r3, [pc, #200]	; (8006144 <prepare_next_led+0x1b0>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	4931      	ldr	r1, [pc, #196]	; (8006148 <prepare_next_led+0x1b4>)
 8006084:	4613      	mov	r3, r2
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	4413      	add	r3, r2
 800608a:	440b      	add	r3, r1
 800608c:	3302      	adds	r3, #2
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609c:	2b00      	cmp	r3, #0
 800609e:	bfcc      	ite	gt
 80060a0:	2301      	movgt	r3, #1
 80060a2:	2300      	movle	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	fa00 f203 	lsl.w	r2, r0, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3318      	adds	r3, #24
 80060ae:	b291      	uxth	r1, r2
 80060b0:	4a26      	ldr	r2, [pc, #152]	; (800614c <prepare_next_led+0x1b8>)
 80060b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=dutyoff<<(((allrgb[position].red<<var)&0x80)>0);
 80060b6:	4b23      	ldr	r3, [pc, #140]	; (8006144 <prepare_next_led+0x1b0>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	88fa      	ldrh	r2, [r7, #6]
 80060be:	4922      	ldr	r1, [pc, #136]	; (8006148 <prepare_next_led+0x1b4>)
 80060c0:	4613      	mov	r3, r2
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	4413      	add	r3, r2
 80060c6:	440b      	add	r3, r1
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	fa02 f303 	lsl.w	r3, r2, r3
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bfcc      	ite	gt
 80060da:	2301      	movgt	r3, #1
 80060dc:	2300      	movle	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	fa00 f203 	lsl.w	r2, r0, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3320      	adds	r3, #32
 80060e8:	b291      	uxth	r1, r2
 80060ea:	4a18      	ldr	r2, [pc, #96]	; (800614c <prepare_next_led+0x1b8>)
 80060ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=dutyoff<<(((allrgb[position].blue<<var)&0x80)>0);
 80060f0:	4b14      	ldr	r3, [pc, #80]	; (8006144 <prepare_next_led+0x1b0>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	4618      	mov	r0, r3
 80060f6:	88fa      	ldrh	r2, [r7, #6]
 80060f8:	4913      	ldr	r1, [pc, #76]	; (8006148 <prepare_next_led+0x1b4>)
 80060fa:	4613      	mov	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	4413      	add	r3, r2
 8006100:	440b      	add	r3, r1
 8006102:	3301      	adds	r3, #1
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b00      	cmp	r3, #0
 8006114:	bfcc      	ite	gt
 8006116:	2301      	movgt	r3, #1
 8006118:	2300      	movle	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	fa00 f203 	lsl.w	r2, r0, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3328      	adds	r3, #40	; 0x28
 8006124:	b291      	uxth	r1, r2
 8006126:	4a09      	ldr	r2, [pc, #36]	; (800614c <prepare_next_led+0x1b8>)
 8006128:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b07      	cmp	r3, #7
 8006136:	d9a0      	bls.n	800607a <prepare_next_led+0xe6>
}
 8006138:	bf00      	nop
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	2000000a 	.word	0x2000000a
 8006148:	20001f10 	.word	0x20001f10
 800614c:	20001ea8 	.word	0x20001ea8

08006150 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
	uint_fast8_t var;
	if(present_led_counting+2<numbers_of_led)
 8006158:	4b25      	ldr	r3, [pc, #148]	; (80061f0 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	3302      	adds	r3, #2
 800615e:	4a25      	ldr	r2, [pc, #148]	; (80061f4 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8006160:	8812      	ldrh	r2, [r2, #0]
 8006162:	4293      	cmp	r3, r2
 8006164:	da0d      	bge.n	8006182 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
	{
		++present_led_counting;
 8006166:	4b22      	ldr	r3, [pc, #136]	; (80061f0 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	3301      	adds	r3, #1
 800616c:	b2da      	uxtb	r2, r3
 800616e:	4b20      	ldr	r3, [pc, #128]	; (80061f0 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8006170:	701a      	strb	r2, [r3, #0]
		prepare_next_led(present_led_counting,0);
 8006172:	4b1f      	ldr	r3, [pc, #124]	; (80061f0 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff ff0a 	bl	8005f94 <prepare_next_led>
	{
		enable_transmit=0;
		mode=HALT;
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	}
}
 8006180:	e032      	b.n	80061e8 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
	else if(present_led_counting<numbers_of_led)
 8006182:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b29a      	uxth	r2, r3
 8006188:	4b1a      	ldr	r3, [pc, #104]	; (80061f4 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d221      	bcs.n	80061d4 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
		++present_led_counting;
 8006190:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	b2da      	uxtb	r2, r3
 8006198:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 800619a:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var) {
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e014      	b.n	80061cc <HAL_TIM_PWM_PulseFinishedCallback+0x7c>
			buffer[var+24]=0;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3318      	adds	r3, #24
 80061a6:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 80061a8:	2100      	movs	r1, #0
 80061aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+32]=0;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3320      	adds	r3, #32
 80061b2:	4a11      	ldr	r2, [pc, #68]	; (80061f8 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 80061b4:	2100      	movs	r1, #0
 80061b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+40]=0;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3328      	adds	r3, #40	; 0x28
 80061be:	4a0e      	ldr	r2, [pc, #56]	; (80061f8 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 80061c0:	2100      	movs	r1, #0
 80061c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b07      	cmp	r3, #7
 80061d0:	d9e7      	bls.n	80061a2 <HAL_TIM_PWM_PulseFinishedCallback+0x52>
}
 80061d2:	e009      	b.n	80061e8 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
		enable_transmit=0;
 80061d4:	4b09      	ldr	r3, [pc, #36]	; (80061fc <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	701a      	strb	r2, [r3, #0]
		mode=HALT;
 80061da:	4b09      	ldr	r3, [pc, #36]	; (8006200 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80061dc:	2200      	movs	r2, #0
 80061de:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80061e0:	2100      	movs	r1, #0
 80061e2:	4808      	ldr	r0, [pc, #32]	; (8006204 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 80061e4:	f003 f948 	bl	8009478 <HAL_TIM_PWM_Stop_DMA>
}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20001f0c 	.word	0x20001f0c
 80061f4:	20000008 	.word	0x20000008
 80061f8:	20001ea8 	.word	0x20001ea8
 80061fc:	20001fca 	.word	0x20001fca
 8006200:	20001ea5 	.word	0x20001ea5
 8006204:	20000bd0 	.word	0x20000bd0

08006208 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	uint_fast8_t var;
	if(present_led_counting+2<numbers_of_led)
 8006210:	4b1f      	ldr	r3, [pc, #124]	; (8006290 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	3302      	adds	r3, #2
 8006216:	4a1f      	ldr	r2, [pc, #124]	; (8006294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8c>)
 8006218:	8812      	ldrh	r2, [r2, #0]
 800621a:	4293      	cmp	r3, r2
 800621c:	da0d      	bge.n	800623a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x32>
	{
		++present_led_counting;
 800621e:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8006228:	701a      	strb	r2, [r3, #0]
		prepare_next_led(present_led_counting,1);
 800622a:	4b19      	ldr	r3, [pc, #100]	; (8006290 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	2101      	movs	r1, #1
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff feae 	bl	8005f94 <prepare_next_led>
			buffer[var]=0;
			buffer[var+8]=0;
			buffer[var+16]=0;
		}
	}
}
 8006238:	e026      	b.n	8006288 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x80>
	else if(present_led_counting<numbers_of_led)
 800623a:	4b15      	ldr	r3, [pc, #84]	; (8006290 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	b29a      	uxth	r2, r3
 8006240:	4b14      	ldr	r3, [pc, #80]	; (8006294 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8c>)
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d21f      	bcs.n	8006288 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x80>
		++present_led_counting;
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	b2da      	uxtb	r2, r3
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>)
 8006252:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < 8; ++var) {
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e013      	b.n	8006282 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x7a>
			buffer[var]=0;
 800625a:	4a0f      	ldr	r2, [pc, #60]	; (8006298 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2100      	movs	r1, #0
 8006260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+8]=0;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3308      	adds	r3, #8
 8006268:	4a0b      	ldr	r2, [pc, #44]	; (8006298 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 800626a:	2100      	movs	r1, #0
 800626c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			buffer[var+16]=0;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3310      	adds	r3, #16
 8006274:	4a08      	ldr	r2, [pc, #32]	; (8006298 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x90>)
 8006276:	2100      	movs	r1, #0
 8006278:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (var = 0; var < 8; ++var) {
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3301      	adds	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b07      	cmp	r3, #7
 8006286:	d9e8      	bls.n	800625a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x52>
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20001f0c 	.word	0x20001f0c
 8006294:	20000008 	.word	0x20000008
 8006298:	20001ea8 	.word	0x20001ea8

0800629c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
   ldr   sp, =_estack       /* set stack pointer */
 800629c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062d4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80062a0:	480d      	ldr	r0, [pc, #52]	; (80062d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80062a2:	490e      	ldr	r1, [pc, #56]	; (80062dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80062a4:	4a0e      	ldr	r2, [pc, #56]	; (80062e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80062a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062a8:	e002      	b.n	80062b0 <LoopCopyDataInit>

080062aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062ae:	3304      	adds	r3, #4

080062b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062b4:	d3f9      	bcc.n	80062aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062b6:	4a0b      	ldr	r2, [pc, #44]	; (80062e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80062b8:	4c0b      	ldr	r4, [pc, #44]	; (80062e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80062ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062bc:	e001      	b.n	80062c2 <LoopFillZerobss>

080062be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062c0:	3204      	adds	r2, #4

080062c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062c4:	d3fb      	bcc.n	80062be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80062c6:	f7ff fa4f 	bl	8005768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062ca:	f006 faf3 	bl	800c8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062ce:	f7fb fa93 	bl	80017f8 <main>
  bx  lr    
 80062d2:	4770      	bx	lr
   ldr   sp, =_estack       /* set stack pointer */
 80062d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80062d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062dc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80062e0:	0800d118 	.word	0x0800d118
  ldr r2, =_sbss
 80062e4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80062e8:	20001ff4 	.word	0x20001ff4

080062ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062ec:	e7fe      	b.n	80062ec <ADC_IRQHandler>
	...

080062f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <HAL_Init+0x40>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a0d      	ldr	r2, [pc, #52]	; (8006330 <HAL_Init+0x40>)
 80062fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <HAL_Init+0x40>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <HAL_Init+0x40>)
 8006306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800630a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800630c:	4b08      	ldr	r3, [pc, #32]	; (8006330 <HAL_Init+0x40>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a07      	ldr	r2, [pc, #28]	; (8006330 <HAL_Init+0x40>)
 8006312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006318:	2003      	movs	r0, #3
 800631a:	f000 fd71 	bl	8006e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800631e:	2000      	movs	r0, #0
 8006320:	f000 f808 	bl	8006334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006324:	f7fe fd3e 	bl	8004da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40023c00 	.word	0x40023c00

08006334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800633c:	4b12      	ldr	r3, [pc, #72]	; (8006388 <HAL_InitTick+0x54>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b12      	ldr	r3, [pc, #72]	; (800638c <HAL_InitTick+0x58>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	4619      	mov	r1, r3
 8006346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800634a:	fbb3 f3f1 	udiv	r3, r3, r1
 800634e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fd89 	bl	8006e6a <HAL_SYSTICK_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e00e      	b.n	8006380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b0f      	cmp	r3, #15
 8006366:	d80a      	bhi.n	800637e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006368:	2200      	movs	r2, #0
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	f000 fd51 	bl	8006e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006374:	4a06      	ldr	r2, [pc, #24]	; (8006390 <HAL_InitTick+0x5c>)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e000      	b.n	8006380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20000004 	.word	0x20000004
 800638c:	20000010 	.word	0x20000010
 8006390:	2000000c 	.word	0x2000000c

08006394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006398:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <HAL_IncTick+0x20>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <HAL_IncTick+0x24>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4413      	add	r3, r2
 80063a4:	4a04      	ldr	r2, [pc, #16]	; (80063b8 <HAL_IncTick+0x24>)
 80063a6:	6013      	str	r3, [r2, #0]
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000010 	.word	0x20000010
 80063b8:	20001fe0 	.word	0x20001fe0

080063bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  return uwTick;
 80063c0:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <HAL_GetTick+0x14>)
 80063c2:	681b      	ldr	r3, [r3, #0]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20001fe0 	.word	0x20001fe0

080063d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063dc:	f7ff ffee 	bl	80063bc <HAL_GetTick>
 80063e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d005      	beq.n	80063fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80063ee:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <HAL_Delay+0x44>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80063fa:	bf00      	nop
 80063fc:	f7ff ffde 	bl	80063bc <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	429a      	cmp	r2, r3
 800640a:	d8f7      	bhi.n	80063fc <HAL_Delay+0x28>
  {
  }
}
 800640c:	bf00      	nop
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000010 	.word	0x20000010

0800641c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e033      	b.n	800649a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7fe fcda 	bl	8004df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	d118      	bne.n	800648c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006462:	f023 0302 	bic.w	r3, r3, #2
 8006466:	f043 0202 	orr.w	r2, r3, #2
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa78 	bl	8006964 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	f043 0201 	orr.w	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	641a      	str	r2, [r3, #64]	; 0x40
 800648a:	e001      	b.n	8006490 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_ADC_Start_DMA+0x1e>
 80064be:	2302      	movs	r3, #2
 80064c0:	e0e9      	b.n	8006696 <HAL_ADC_Start_DMA+0x1f2>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d018      	beq.n	800650a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80064e8:	4b6d      	ldr	r3, [pc, #436]	; (80066a0 <HAL_ADC_Start_DMA+0x1fc>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a6d      	ldr	r2, [pc, #436]	; (80066a4 <HAL_ADC_Start_DMA+0x200>)
 80064ee:	fba2 2303 	umull	r2, r3, r2, r3
 80064f2:	0c9a      	lsrs	r2, r3, #18
 80064f4:	4613      	mov	r3, r2
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	4413      	add	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80064fc:	e002      	b.n	8006504 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3b01      	subs	r3, #1
 8006502:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f9      	bne.n	80064fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006518:	d107      	bne.n	800652a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006528:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b01      	cmp	r3, #1
 8006536:	f040 80a1 	bne.w	800667c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006564:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006578:	d106      	bne.n	8006588 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657e:	f023 0206 	bic.w	r2, r3, #6
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	645a      	str	r2, [r3, #68]	; 0x44
 8006586:	e002      	b.n	800658e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006596:	4b44      	ldr	r3, [pc, #272]	; (80066a8 <HAL_ADC_Start_DMA+0x204>)
 8006598:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	4a43      	ldr	r2, [pc, #268]	; (80066ac <HAL_ADC_Start_DMA+0x208>)
 80065a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	4a42      	ldr	r2, [pc, #264]	; (80066b0 <HAL_ADC_Start_DMA+0x20c>)
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	4a41      	ldr	r2, [pc, #260]	; (80066b4 <HAL_ADC_Start_DMA+0x210>)
 80065b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80065ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80065ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	334c      	adds	r3, #76	; 0x4c
 80065e6:	4619      	mov	r1, r3
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f000 fcf8 	bl	8006fe0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d12a      	bne.n	8006652 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a2d      	ldr	r2, [pc, #180]	; (80066b8 <HAL_ADC_Start_DMA+0x214>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d015      	beq.n	8006632 <HAL_ADC_Start_DMA+0x18e>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a2c      	ldr	r2, [pc, #176]	; (80066bc <HAL_ADC_Start_DMA+0x218>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d105      	bne.n	800661c <HAL_ADC_Start_DMA+0x178>
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <HAL_ADC_Start_DMA+0x204>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a27      	ldr	r2, [pc, #156]	; (80066c0 <HAL_ADC_Start_DMA+0x21c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d136      	bne.n	8006694 <HAL_ADC_Start_DMA+0x1f0>
 8006626:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <HAL_ADC_Start_DMA+0x204>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	2b00      	cmp	r3, #0
 8006630:	d130      	bne.n	8006694 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d129      	bne.n	8006694 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800664e:	609a      	str	r2, [r3, #8]
 8006650:	e020      	b.n	8006694 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <HAL_ADC_Start_DMA+0x214>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d11b      	bne.n	8006694 <HAL_ADC_Start_DMA+0x1f0>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d114      	bne.n	8006694 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006678:	609a      	str	r2, [r3, #8]
 800667a:	e00b      	b.n	8006694 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	f043 0210 	orr.w	r2, r3, #16
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668c:	f043 0201 	orr.w	r2, r3, #1
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000004 	.word	0x20000004
 80066a4:	431bde83 	.word	0x431bde83
 80066a8:	40012300 	.word	0x40012300
 80066ac:	08006b5d 	.word	0x08006b5d
 80066b0:	08006c17 	.word	0x08006c17
 80066b4:	08006c33 	.word	0x08006c33
 80066b8:	40012000 	.word	0x40012000
 80066bc:	40012100 	.word	0x40012100
 80066c0:	40012200 	.word	0x40012200

080066c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_ADC_ConfigChannel+0x1c>
 8006718:	2302      	movs	r3, #2
 800671a:	e113      	b.n	8006944 <HAL_ADC_ConfigChannel+0x244>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b09      	cmp	r3, #9
 800672a:	d925      	bls.n	8006778 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68d9      	ldr	r1, [r3, #12]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	4613      	mov	r3, r2
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	4413      	add	r3, r2
 8006740:	3b1e      	subs	r3, #30
 8006742:	2207      	movs	r2, #7
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	43da      	mvns	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	400a      	ands	r2, r1
 8006750:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68d9      	ldr	r1, [r3, #12]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	4618      	mov	r0, r3
 8006764:	4603      	mov	r3, r0
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4403      	add	r3, r0
 800676a:	3b1e      	subs	r3, #30
 800676c:	409a      	lsls	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	60da      	str	r2, [r3, #12]
 8006776:	e022      	b.n	80067be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6919      	ldr	r1, [r3, #16]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	461a      	mov	r2, r3
 8006786:	4613      	mov	r3, r2
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	4413      	add	r3, r2
 800678c:	2207      	movs	r2, #7
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43da      	mvns	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	400a      	ands	r2, r1
 800679a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6919      	ldr	r1, [r3, #16]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	4618      	mov	r0, r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	4403      	add	r3, r0
 80067b4:	409a      	lsls	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b06      	cmp	r3, #6
 80067c4:	d824      	bhi.n	8006810 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	3b05      	subs	r3, #5
 80067d8:	221f      	movs	r2, #31
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	43da      	mvns	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	400a      	ands	r2, r1
 80067e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	4618      	mov	r0, r3
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	3b05      	subs	r3, #5
 8006802:	fa00 f203 	lsl.w	r2, r0, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	635a      	str	r2, [r3, #52]	; 0x34
 800680e:	e04c      	b.n	80068aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b0c      	cmp	r3, #12
 8006816:	d824      	bhi.n	8006862 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	3b23      	subs	r3, #35	; 0x23
 800682a:	221f      	movs	r2, #31
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	43da      	mvns	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	400a      	ands	r2, r1
 8006838:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	4618      	mov	r0, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	3b23      	subs	r3, #35	; 0x23
 8006854:	fa00 f203 	lsl.w	r2, r0, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
 8006860:	e023      	b.n	80068aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	3b41      	subs	r3, #65	; 0x41
 8006874:	221f      	movs	r2, #31
 8006876:	fa02 f303 	lsl.w	r3, r2, r3
 800687a:	43da      	mvns	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	400a      	ands	r2, r1
 8006882:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	4618      	mov	r0, r3
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	3b41      	subs	r3, #65	; 0x41
 800689e:	fa00 f203 	lsl.w	r2, r0, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068aa:	4b29      	ldr	r3, [pc, #164]	; (8006950 <HAL_ADC_ConfigChannel+0x250>)
 80068ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a28      	ldr	r2, [pc, #160]	; (8006954 <HAL_ADC_ConfigChannel+0x254>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d10f      	bne.n	80068d8 <HAL_ADC_ConfigChannel+0x1d8>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b12      	cmp	r3, #18
 80068be:	d10b      	bne.n	80068d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <HAL_ADC_ConfigChannel+0x254>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d12b      	bne.n	800693a <HAL_ADC_ConfigChannel+0x23a>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1c      	ldr	r2, [pc, #112]	; (8006958 <HAL_ADC_ConfigChannel+0x258>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <HAL_ADC_ConfigChannel+0x1f4>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b11      	cmp	r3, #17
 80068f2:	d122      	bne.n	800693a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a11      	ldr	r2, [pc, #68]	; (8006958 <HAL_ADC_ConfigChannel+0x258>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d111      	bne.n	800693a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006916:	4b11      	ldr	r3, [pc, #68]	; (800695c <HAL_ADC_ConfigChannel+0x25c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a11      	ldr	r2, [pc, #68]	; (8006960 <HAL_ADC_ConfigChannel+0x260>)
 800691c:	fba2 2303 	umull	r2, r3, r2, r3
 8006920:	0c9a      	lsrs	r2, r3, #18
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800692c:	e002      	b.n	8006934 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	3b01      	subs	r3, #1
 8006932:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f9      	bne.n	800692e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	40012300 	.word	0x40012300
 8006954:	40012000 	.word	0x40012000
 8006958:	10000012 	.word	0x10000012
 800695c:	20000004 	.word	0x20000004
 8006960:	431bde83 	.word	0x431bde83

08006964 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800696c:	4b79      	ldr	r3, [pc, #484]	; (8006b54 <ADC_Init+0x1f0>)
 800696e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	431a      	orrs	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006998:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6859      	ldr	r1, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	021a      	lsls	r2, r3, #8
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80069bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6859      	ldr	r1, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6899      	ldr	r1, [r3, #8]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	4a58      	ldr	r2, [pc, #352]	; (8006b58 <ADC_Init+0x1f4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d022      	beq.n	8006a42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6899      	ldr	r1, [r3, #8]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6899      	ldr	r1, [r3, #8]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	609a      	str	r2, [r3, #8]
 8006a40:	e00f      	b.n	8006a62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0202 	bic.w	r2, r2, #2
 8006a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6899      	ldr	r1, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7e1b      	ldrb	r3, [r3, #24]
 8006a7c:	005a      	lsls	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01b      	beq.n	8006ac8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006aae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6859      	ldr	r1, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	3b01      	subs	r3, #1
 8006abc:	035a      	lsls	r2, r3, #13
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
 8006ac6:	e007      	b.n	8006ad8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ad6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	051a      	lsls	r2, r3, #20
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6899      	ldr	r1, [r3, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b1a:	025a      	lsls	r2, r3, #9
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6899      	ldr	r1, [r3, #8]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	029a      	lsls	r2, r3, #10
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	609a      	str	r2, [r3, #8]
}
 8006b48:	bf00      	nop
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	40012300 	.word	0x40012300
 8006b58:	0f000001 	.word	0x0f000001

08006b5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d13c      	bne.n	8006bf0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d12b      	bne.n	8006be8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d127      	bne.n	8006be8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d006      	beq.n	8006bb4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d119      	bne.n	8006be8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0220 	bic.w	r2, r2, #32
 8006bc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d105      	bne.n	8006be8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	f043 0201 	orr.w	r2, r3, #1
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff fd6b 	bl	80066c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006bee:	e00e      	b.n	8006c0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff fd75 	bl	80066ec <HAL_ADC_ErrorCallback>
}
 8006c02:	e004      	b.n	8006c0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
}
 8006c0e:	bf00      	nop
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff fd57 	bl	80066d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2240      	movs	r2, #64	; 0x40
 8006c44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4a:	f043 0204 	orr.w	r2, r3, #4
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f7ff fd4a 	bl	80066ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c70:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c92:	4a04      	ldr	r2, [pc, #16]	; (8006ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	60d3      	str	r3, [r2, #12]
}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	e000ed00 	.word	0xe000ed00

08006ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cac:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	0a1b      	lsrs	r3, r3, #8
 8006cb2:	f003 0307 	and.w	r3, r3, #7
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	e000ed00 	.word	0xe000ed00

08006cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	db0b      	blt.n	8006cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	f003 021f 	and.w	r2, r3, #31
 8006cdc:	4907      	ldr	r1, [pc, #28]	; (8006cfc <__NVIC_EnableIRQ+0x38>)
 8006cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	2001      	movs	r0, #1
 8006ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8006cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	e000e100 	.word	0xe000e100

08006d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	6039      	str	r1, [r7, #0]
 8006d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	db0a      	blt.n	8006d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	490c      	ldr	r1, [pc, #48]	; (8006d4c <__NVIC_SetPriority+0x4c>)
 8006d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d1e:	0112      	lsls	r2, r2, #4
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	440b      	add	r3, r1
 8006d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d28:	e00a      	b.n	8006d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	4908      	ldr	r1, [pc, #32]	; (8006d50 <__NVIC_SetPriority+0x50>)
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	3b04      	subs	r3, #4
 8006d38:	0112      	lsls	r2, r2, #4
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	761a      	strb	r2, [r3, #24]
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	e000e100 	.word	0xe000e100
 8006d50:	e000ed00 	.word	0xe000ed00

08006d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b089      	sub	sp, #36	; 0x24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f1c3 0307 	rsb	r3, r3, #7
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	bf28      	it	cs
 8006d72:	2304      	movcs	r3, #4
 8006d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	2b06      	cmp	r3, #6
 8006d7c:	d902      	bls.n	8006d84 <NVIC_EncodePriority+0x30>
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	3b03      	subs	r3, #3
 8006d82:	e000      	b.n	8006d86 <NVIC_EncodePriority+0x32>
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d88:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	43da      	mvns	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	401a      	ands	r2, r3
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	43d9      	mvns	r1, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dac:	4313      	orrs	r3, r2
         );
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3724      	adds	r7, #36	; 0x24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dcc:	d301      	bcc.n	8006dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e00f      	b.n	8006df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <SysTick_Config+0x40>)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dda:	210f      	movs	r1, #15
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8006de0:	f7ff ff8e 	bl	8006d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <SysTick_Config+0x40>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006dea:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <SysTick_Config+0x40>)
 8006dec:	2207      	movs	r2, #7
 8006dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	e000e010 	.word	0xe000e010

08006e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff ff29 	bl	8006c60 <__NVIC_SetPriorityGrouping>
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b086      	sub	sp, #24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
 8006e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e28:	f7ff ff3e 	bl	8006ca8 <__NVIC_GetPriorityGrouping>
 8006e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	6978      	ldr	r0, [r7, #20]
 8006e34:	f7ff ff8e 	bl	8006d54 <NVIC_EncodePriority>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff5d 	bl	8006d00 <__NVIC_SetPriority>
}
 8006e46:	bf00      	nop
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	4603      	mov	r3, r0
 8006e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff ff31 	bl	8006cc4 <__NVIC_EnableIRQ>
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff ffa2 	bl	8006dbc <SysTick_Config>
 8006e78:	4603      	mov	r3, r0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006e90:	f7ff fa94 	bl	80063bc <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e099      	b.n	8006fd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0201 	bic.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ec0:	e00f      	b.n	8006ee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ec2:	f7ff fa7b 	bl	80063bc <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b05      	cmp	r3, #5
 8006ece:	d908      	bls.n	8006ee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2203      	movs	r2, #3
 8006eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e078      	b.n	8006fd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e8      	bne.n	8006ec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4b38      	ldr	r3, [pc, #224]	; (8006fdc <HAL_DMA_Init+0x158>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d107      	bne.n	8006f4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f44:	4313      	orrs	r3, r2
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0307 	bic.w	r3, r3, #7
 8006f62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d117      	bne.n	8006fa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00e      	beq.n	8006fa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fb01 	bl	8007590 <DMA_CheckFifoParam>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d008      	beq.n	8006fa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2240      	movs	r2, #64	; 0x40
 8006f98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e016      	b.n	8006fd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fab8 	bl	8007524 <DMA_CalcBaseAndBitshift>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fbc:	223f      	movs	r2, #63	; 0x3f
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	f010803f 	.word	0xf010803f

08006fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_DMA_Start_IT+0x26>
 8007002:	2302      	movs	r3, #2
 8007004:	e040      	b.n	8007088 <HAL_DMA_Start_IT+0xa8>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b01      	cmp	r3, #1
 8007018:	d12f      	bne.n	800707a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2202      	movs	r2, #2
 800701e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 fa4a 	bl	80074c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007038:	223f      	movs	r2, #63	; 0x3f
 800703a:	409a      	lsls	r2, r3
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0216 	orr.w	r2, r2, #22
 800704e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0208 	orr.w	r2, r2, #8
 8007066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	e005      	b.n	8007086 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007082:	2302      	movs	r3, #2
 8007084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800709e:	f7ff f98d 	bl	80063bc <HAL_GetTick>
 80070a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d008      	beq.n	80070c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2280      	movs	r2, #128	; 0x80
 80070b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e052      	b.n	8007168 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0216 	bic.w	r2, r2, #22
 80070d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	695a      	ldr	r2, [r3, #20]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d103      	bne.n	80070f2 <HAL_DMA_Abort+0x62>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0208 	bic.w	r2, r2, #8
 8007100:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0201 	bic.w	r2, r2, #1
 8007110:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007112:	e013      	b.n	800713c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007114:	f7ff f952 	bl	80063bc <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b05      	cmp	r3, #5
 8007120:	d90c      	bls.n	800713c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2203      	movs	r2, #3
 800712c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e015      	b.n	8007168 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e4      	bne.n	8007114 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714e:	223f      	movs	r2, #63	; 0x3f
 8007150:	409a      	lsls	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d004      	beq.n	800718e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2280      	movs	r2, #128	; 0x80
 8007188:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e00c      	b.n	80071a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2205      	movs	r2, #5
 8007192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80071c0:	4b8e      	ldr	r3, [pc, #568]	; (80073fc <HAL_DMA_IRQHandler+0x248>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a8e      	ldr	r2, [pc, #568]	; (8007400 <HAL_DMA_IRQHandler+0x24c>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	0a9b      	lsrs	r3, r3, #10
 80071cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071de:	2208      	movs	r2, #8
 80071e0:	409a      	lsls	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4013      	ands	r3, r2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01a      	beq.n	8007220 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d013      	beq.n	8007220 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0204 	bic.w	r2, r2, #4
 8007206:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800720c:	2208      	movs	r2, #8
 800720e:	409a      	lsls	r2, r3
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007218:	f043 0201 	orr.w	r2, r3, #1
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007224:	2201      	movs	r2, #1
 8007226:	409a      	lsls	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4013      	ands	r3, r2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d012      	beq.n	8007256 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007242:	2201      	movs	r2, #1
 8007244:	409a      	lsls	r2, r3
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724e:	f043 0202 	orr.w	r2, r3, #2
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800725a:	2204      	movs	r2, #4
 800725c:	409a      	lsls	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4013      	ands	r3, r2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d012      	beq.n	800728c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007278:	2204      	movs	r2, #4
 800727a:	409a      	lsls	r2, r3
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007284:	f043 0204 	orr.w	r2, r3, #4
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007290:	2210      	movs	r2, #16
 8007292:	409a      	lsls	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d043      	beq.n	8007324 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0308 	and.w	r3, r3, #8
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d03c      	beq.n	8007324 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ae:	2210      	movs	r2, #16
 80072b0:	409a      	lsls	r2, r3
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d018      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d108      	bne.n	80072e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d024      	beq.n	8007324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
 80072e2:	e01f      	b.n	8007324 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01b      	beq.n	8007324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
 80072f4:	e016      	b.n	8007324 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007300:	2b00      	cmp	r3, #0
 8007302:	d107      	bne.n	8007314 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0208 	bic.w	r2, r2, #8
 8007312:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007328:	2220      	movs	r2, #32
 800732a:	409a      	lsls	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 808f 	beq.w	8007454 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 8087 	beq.w	8007454 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734a:	2220      	movs	r2, #32
 800734c:	409a      	lsls	r2, r3
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b05      	cmp	r3, #5
 800735c:	d136      	bne.n	80073cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0216 	bic.w	r2, r2, #22
 800736c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	695a      	ldr	r2, [r3, #20]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800737c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <HAL_DMA_IRQHandler+0x1da>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0208 	bic.w	r2, r2, #8
 800739c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a2:	223f      	movs	r2, #63	; 0x3f
 80073a4:	409a      	lsls	r2, r3
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d07e      	beq.n	80074c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	4798      	blx	r3
        }
        return;
 80073ca:	e079      	b.n	80074c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01d      	beq.n	8007416 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10d      	bne.n	8007404 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d031      	beq.n	8007454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
 80073f8:	e02c      	b.n	8007454 <HAL_DMA_IRQHandler+0x2a0>
 80073fa:	bf00      	nop
 80073fc:	20000004 	.word	0x20000004
 8007400:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d023      	beq.n	8007454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	4798      	blx	r3
 8007414:	e01e      	b.n	8007454 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10f      	bne.n	8007444 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0210 	bic.w	r2, r2, #16
 8007432:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007458:	2b00      	cmp	r3, #0
 800745a:	d032      	beq.n	80074c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d022      	beq.n	80074ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2205      	movs	r2, #5
 800746c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0201 	bic.w	r2, r2, #1
 800747e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	3301      	adds	r3, #1
 8007484:	60bb      	str	r3, [r7, #8]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	429a      	cmp	r2, r3
 800748a:	d307      	bcc.n	800749c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f2      	bne.n	8007480 <HAL_DMA_IRQHandler+0x2cc>
 800749a:	e000      	b.n	800749e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800749c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
 80074be:	e000      	b.n	80074c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80074c0:	bf00      	nop
    }
  }
}
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d108      	bne.n	8007508 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007506:	e007      	b.n	8007518 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	60da      	str	r2, [r3, #12]
}
 8007518:	bf00      	nop
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	3b10      	subs	r3, #16
 8007534:	4a14      	ldr	r2, [pc, #80]	; (8007588 <DMA_CalcBaseAndBitshift+0x64>)
 8007536:	fba2 2303 	umull	r2, r3, r2, r3
 800753a:	091b      	lsrs	r3, r3, #4
 800753c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800753e:	4a13      	ldr	r2, [pc, #76]	; (800758c <DMA_CalcBaseAndBitshift+0x68>)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4413      	add	r3, r2
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b03      	cmp	r3, #3
 8007550:	d909      	bls.n	8007566 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	1d1a      	adds	r2, r3, #4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	659a      	str	r2, [r3, #88]	; 0x58
 8007564:	e007      	b.n	8007576 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800756e:	f023 0303 	bic.w	r3, r3, #3
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	aaaaaaab 	.word	0xaaaaaaab
 800758c:	0800d0e4 	.word	0x0800d0e4

08007590 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d11f      	bne.n	80075ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d856      	bhi.n	800765e <DMA_CheckFifoParam+0xce>
 80075b0:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <DMA_CheckFifoParam+0x28>)
 80075b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b6:	bf00      	nop
 80075b8:	080075c9 	.word	0x080075c9
 80075bc:	080075db 	.word	0x080075db
 80075c0:	080075c9 	.word	0x080075c9
 80075c4:	0800765f 	.word	0x0800765f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d046      	beq.n	8007662 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075d8:	e043      	b.n	8007662 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075e2:	d140      	bne.n	8007666 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075e8:	e03d      	b.n	8007666 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f2:	d121      	bne.n	8007638 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d837      	bhi.n	800766a <DMA_CheckFifoParam+0xda>
 80075fa:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <DMA_CheckFifoParam+0x70>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	08007611 	.word	0x08007611
 8007604:	08007617 	.word	0x08007617
 8007608:	08007611 	.word	0x08007611
 800760c:	08007629 	.word	0x08007629
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
      break;
 8007614:	e030      	b.n	8007678 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d025      	beq.n	800766e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007626:	e022      	b.n	800766e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007630:	d11f      	bne.n	8007672 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007636:	e01c      	b.n	8007672 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b02      	cmp	r3, #2
 800763c:	d903      	bls.n	8007646 <DMA_CheckFifoParam+0xb6>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d003      	beq.n	800764c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007644:	e018      	b.n	8007678 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]
      break;
 800764a:	e015      	b.n	8007678 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00e      	beq.n	8007676 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
      break;
 800765c:	e00b      	b.n	8007676 <DMA_CheckFifoParam+0xe6>
      break;
 800765e:	bf00      	nop
 8007660:	e00a      	b.n	8007678 <DMA_CheckFifoParam+0xe8>
      break;
 8007662:	bf00      	nop
 8007664:	e008      	b.n	8007678 <DMA_CheckFifoParam+0xe8>
      break;
 8007666:	bf00      	nop
 8007668:	e006      	b.n	8007678 <DMA_CheckFifoParam+0xe8>
      break;
 800766a:	bf00      	nop
 800766c:	e004      	b.n	8007678 <DMA_CheckFifoParam+0xe8>
      break;
 800766e:	bf00      	nop
 8007670:	e002      	b.n	8007678 <DMA_CheckFifoParam+0xe8>
      break;   
 8007672:	bf00      	nop
 8007674:	e000      	b.n	8007678 <DMA_CheckFifoParam+0xe8>
      break;
 8007676:	bf00      	nop
    }
  } 
  
  return status; 
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop

08007688 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e06c      	b.n	8007774 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d106      	bne.n	80076b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2223      	movs	r2, #35	; 0x23
 80076a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7fd fc19 	bl	8004ee4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076b2:	2300      	movs	r3, #0
 80076b4:	60bb      	str	r3, [r7, #8]
 80076b6:	4b31      	ldr	r3, [pc, #196]	; (800777c <HAL_ETH_Init+0xf4>)
 80076b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ba:	4a30      	ldr	r2, [pc, #192]	; (800777c <HAL_ETH_Init+0xf4>)
 80076bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076c0:	6453      	str	r3, [r2, #68]	; 0x44
 80076c2:	4b2e      	ldr	r3, [pc, #184]	; (800777c <HAL_ETH_Init+0xf4>)
 80076c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ca:	60bb      	str	r3, [r7, #8]
 80076cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80076ce:	4b2c      	ldr	r3, [pc, #176]	; (8007780 <HAL_ETH_Init+0xf8>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	4a2b      	ldr	r2, [pc, #172]	; (8007780 <HAL_ETH_Init+0xf8>)
 80076d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80076d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80076da:	4b29      	ldr	r3, [pc, #164]	; (8007780 <HAL_ETH_Init+0xf8>)
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	4927      	ldr	r1, [pc, #156]	; (8007780 <HAL_ETH_Init+0xf8>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80076e8:	4b25      	ldr	r3, [pc, #148]	; (8007780 <HAL_ETH_Init+0xf8>)
 80076ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	f043 0301 	orr.w	r3, r3, #1
 80076fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007702:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007704:	f7fe fe5a 	bl	80063bc <HAL_GetTick>
 8007708:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800770a:	e011      	b.n	8007730 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800770c:	f7fe fe56 	bl	80063bc <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800771a:	d909      	bls.n	8007730 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2204      	movs	r2, #4
 8007720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	22e0      	movs	r2, #224	; 0xe0
 8007728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e021      	b.n	8007774 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e4      	bne.n	800770c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f958 	bl	80079f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f9ff 	bl	8007b4c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa55 	bl	8007bfe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	461a      	mov	r2, r3
 800775a:	2100      	movs	r1, #0
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f9bd 	bl	8007adc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2210      	movs	r2, #16
 800776e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	40023800 	.word	0x40023800
 8007780:	40013800 	.word	0x40013800

08007784 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4b51      	ldr	r3, [pc, #324]	; (80078e0 <ETH_SetMACConfig+0x15c>)
 800779a:	4013      	ands	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	7c1b      	ldrb	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <ETH_SetMACConfig+0x28>
 80077a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80077aa:	e000      	b.n	80077ae <ETH_SetMACConfig+0x2a>
 80077ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	7c5b      	ldrb	r3, [r3, #17]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <ETH_SetMACConfig+0x38>
 80077b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80077ba:	e000      	b.n	80077be <ETH_SetMACConfig+0x3a>
 80077bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80077be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80077c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	7fdb      	ldrb	r3, [r3, #31]
 80077ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80077cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80077d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	7f92      	ldrb	r2, [r2, #30]
 80077d8:	2a00      	cmp	r2, #0
 80077da:	d102      	bne.n	80077e2 <ETH_SetMACConfig+0x5e>
 80077dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80077e0:	e000      	b.n	80077e4 <ETH_SetMACConfig+0x60>
 80077e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80077e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	7f1b      	ldrb	r3, [r3, #28]
 80077ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80077ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80077f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	791b      	ldrb	r3, [r3, #4]
 80077f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80077fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007802:	2a00      	cmp	r2, #0
 8007804:	d102      	bne.n	800780c <ETH_SetMACConfig+0x88>
 8007806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800780a:	e000      	b.n	800780e <ETH_SetMACConfig+0x8a>
 800780c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800780e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	7bdb      	ldrb	r3, [r3, #15]
 8007814:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007816:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800781c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007824:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007826:	4313      	orrs	r3, r2
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800783e:	2001      	movs	r0, #1
 8007840:	f7fe fdc8 	bl	80063d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	f64f 7341 	movw	r3, #65345	; 0xff41
 800785a:	4013      	ands	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007862:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800786a:	2a00      	cmp	r2, #0
 800786c:	d101      	bne.n	8007872 <ETH_SetMACConfig+0xee>
 800786e:	2280      	movs	r2, #128	; 0x80
 8007870:	e000      	b.n	8007874 <ETH_SetMACConfig+0xf0>
 8007872:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007874:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800787a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8007882:	2a01      	cmp	r2, #1
 8007884:	d101      	bne.n	800788a <ETH_SetMACConfig+0x106>
 8007886:	2208      	movs	r2, #8
 8007888:	e000      	b.n	800788c <ETH_SetMACConfig+0x108>
 800788a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800788c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8007894:	2a01      	cmp	r2, #1
 8007896:	d101      	bne.n	800789c <ETH_SetMACConfig+0x118>
 8007898:	2204      	movs	r2, #4
 800789a:	e000      	b.n	800789e <ETH_SetMACConfig+0x11a>
 800789c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800789e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80078a6:	2a01      	cmp	r2, #1
 80078a8:	d101      	bne.n	80078ae <ETH_SetMACConfig+0x12a>
 80078aa:	2202      	movs	r2, #2
 80078ac:	e000      	b.n	80078b0 <ETH_SetMACConfig+0x12c>
 80078ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80078b0:	4313      	orrs	r3, r2
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80078c8:	2001      	movs	r0, #1
 80078ca:	f7fe fd83 	bl	80063d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	619a      	str	r2, [r3, #24]
}
 80078d6:	bf00      	nop
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	ff20810f 	.word	0xff20810f

080078e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4b3d      	ldr	r3, [pc, #244]	; (80079f4 <ETH_SetDMAConfig+0x110>)
 80078fe:	4013      	ands	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	7b1b      	ldrb	r3, [r3, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <ETH_SetDMAConfig+0x2c>
 800790a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800790e:	e000      	b.n	8007912 <ETH_SetDMAConfig+0x2e>
 8007910:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	7b5b      	ldrb	r3, [r3, #13]
 8007916:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007918:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	7f52      	ldrb	r2, [r2, #29]
 800791e:	2a00      	cmp	r2, #0
 8007920:	d102      	bne.n	8007928 <ETH_SetDMAConfig+0x44>
 8007922:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007926:	e000      	b.n	800792a <ETH_SetDMAConfig+0x46>
 8007928:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800792a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	7b9b      	ldrb	r3, [r3, #14]
 8007930:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007932:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007938:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	7f1b      	ldrb	r3, [r3, #28]
 800793e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007940:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	7f9b      	ldrb	r3, [r3, #30]
 8007946:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007948:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800794e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007956:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007958:	4313      	orrs	r3, r2
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4313      	orrs	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007968:	461a      	mov	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800797a:	2001      	movs	r0, #1
 800797c:	f7fe fd2a 	bl	80063d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007988:	461a      	mov	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	791b      	ldrb	r3, [r3, #4]
 8007992:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007998:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800799e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80079a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80079ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80079ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80079b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80079bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80079d8:	2001      	movs	r0, #1
 80079da:	f7fe fcfb 	bl	80063d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e6:	461a      	mov	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6013      	str	r3, [r2, #0]
}
 80079ec:	bf00      	nop
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	f8de3f23 	.word	0xf8de3f23

080079f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b0a6      	sub	sp, #152	; 0x98
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8007a06:	2301      	movs	r3, #1
 8007a08:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007a16:	2301      	movs	r3, #1
 8007a18:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007a34:	2300      	movs	r3, #0
 8007a36:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007a5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007a60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007a6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff fe86 	bl	8007784 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007a86:	2301      	movs	r3, #1
 8007a88:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007a94:	2300      	movs	r3, #0
 8007a96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007aac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007aae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ab2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ab8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007ac8:	f107 0308 	add.w	r3, r7, #8
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff ff08 	bl	80078e4 <ETH_SetDMAConfig>
}
 8007ad4:	bf00      	nop
 8007ad6:	3798      	adds	r7, #152	; 0x98
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3305      	adds	r3, #5
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	3204      	adds	r2, #4
 8007af4:	7812      	ldrb	r2, [r2, #0]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <ETH_MACAddressConfig+0x68>)
 8007afe:	4413      	add	r3, r2
 8007b00:	461a      	mov	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3303      	adds	r3, #3
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	061a      	lsls	r2, r3, #24
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	3302      	adds	r3, #2
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	041b      	lsls	r3, r3, #16
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	021b      	lsls	r3, r3, #8
 8007b20:	4313      	orrs	r3, r2
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <ETH_MACAddressConfig+0x6c>)
 8007b2e:	4413      	add	r3, r2
 8007b30:	461a      	mov	r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	6013      	str	r3, [r2, #0]
}
 8007b36:	bf00      	nop
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40028040 	.word	0x40028040
 8007b48:	40028044 	.word	0x40028044

08007b4c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	e03e      	b.n	8007bd8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68d9      	ldr	r1, [r3, #12]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	440b      	add	r3, r1
 8007b6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2200      	movs	r2, #0
 8007b82:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007b84:	68b9      	ldr	r1, [r7, #8]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	3206      	adds	r2, #6
 8007b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d80c      	bhi.n	8007bbc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68d9      	ldr	r1, [r3, #12]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	440b      	add	r3, r1
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	60da      	str	r2, [r3, #12]
 8007bba:	e004      	b.n	8007bc6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d9bd      	bls.n	8007b5a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf0:	611a      	str	r2, [r3, #16]
}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	e046      	b.n	8007c9a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6919      	ldr	r1, [r3, #16]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	00db      	lsls	r3, r3, #3
 8007c1a:	440b      	add	r3, r1
 8007c1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2200      	movs	r2, #0
 8007c28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c48:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8007c50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007c5e:	68b9      	ldr	r1, [r7, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	3212      	adds	r2, #18
 8007c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d80c      	bhi.n	8007c8a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6919      	ldr	r1, [r3, #16]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	440b      	add	r3, r1
 8007c82:	461a      	mov	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	60da      	str	r2, [r3, #12]
 8007c88:	e004      	b.n	8007c94 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d9b5      	bls.n	8007c0c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691a      	ldr	r2, [r3, #16]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cca:	60da      	str	r2, [r3, #12]
}
 8007ccc:	bf00      	nop
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b089      	sub	sp, #36	; 0x24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61fb      	str	r3, [r7, #28]
 8007cf2:	e177      	b.n	8007fe4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4013      	ands	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	f040 8166 	bne.w	8007fde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d005      	beq.n	8007d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d130      	bne.n	8007d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	2203      	movs	r2, #3
 8007d36:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d60:	2201      	movs	r2, #1
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	fa02 f303 	lsl.w	r3, r2, r3
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	091b      	lsrs	r3, r3, #4
 8007d76:	f003 0201 	and.w	r2, r3, #1
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f003 0303 	and.w	r3, r3, #3
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d017      	beq.n	8007dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	2203      	movs	r2, #3
 8007da4:	fa02 f303 	lsl.w	r3, r2, r3
 8007da8:	43db      	mvns	r3, r3
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	4013      	ands	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f003 0303 	and.w	r3, r3, #3
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d123      	bne.n	8007e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	08da      	lsrs	r2, r3, #3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3208      	adds	r2, #8
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	220f      	movs	r2, #15
 8007dec:	fa02 f303 	lsl.w	r3, r2, r3
 8007df0:	43db      	mvns	r3, r3
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	4013      	ands	r3, r2
 8007df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	fa02 f303 	lsl.w	r3, r2, r3
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	08da      	lsrs	r2, r3, #3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3208      	adds	r2, #8
 8007e16:	69b9      	ldr	r1, [r7, #24]
 8007e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	2203      	movs	r2, #3
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	43db      	mvns	r3, r3
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	4013      	ands	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f003 0203 	and.w	r2, r3, #3
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 80c0 	beq.w	8007fde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	4b66      	ldr	r3, [pc, #408]	; (8007ffc <HAL_GPIO_Init+0x324>)
 8007e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e66:	4a65      	ldr	r2, [pc, #404]	; (8007ffc <HAL_GPIO_Init+0x324>)
 8007e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8007e6e:	4b63      	ldr	r3, [pc, #396]	; (8007ffc <HAL_GPIO_Init+0x324>)
 8007e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e7a:	4a61      	ldr	r2, [pc, #388]	; (8008000 <HAL_GPIO_Init+0x328>)
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	089b      	lsrs	r3, r3, #2
 8007e80:	3302      	adds	r3, #2
 8007e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	f003 0303 	and.w	r3, r3, #3
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	220f      	movs	r2, #15
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	43db      	mvns	r3, r3
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a58      	ldr	r2, [pc, #352]	; (8008004 <HAL_GPIO_Init+0x32c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d037      	beq.n	8007f16 <HAL_GPIO_Init+0x23e>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a57      	ldr	r2, [pc, #348]	; (8008008 <HAL_GPIO_Init+0x330>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d031      	beq.n	8007f12 <HAL_GPIO_Init+0x23a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a56      	ldr	r2, [pc, #344]	; (800800c <HAL_GPIO_Init+0x334>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d02b      	beq.n	8007f0e <HAL_GPIO_Init+0x236>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a55      	ldr	r2, [pc, #340]	; (8008010 <HAL_GPIO_Init+0x338>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d025      	beq.n	8007f0a <HAL_GPIO_Init+0x232>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a54      	ldr	r2, [pc, #336]	; (8008014 <HAL_GPIO_Init+0x33c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d01f      	beq.n	8007f06 <HAL_GPIO_Init+0x22e>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a53      	ldr	r2, [pc, #332]	; (8008018 <HAL_GPIO_Init+0x340>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d019      	beq.n	8007f02 <HAL_GPIO_Init+0x22a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a52      	ldr	r2, [pc, #328]	; (800801c <HAL_GPIO_Init+0x344>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d013      	beq.n	8007efe <HAL_GPIO_Init+0x226>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a51      	ldr	r2, [pc, #324]	; (8008020 <HAL_GPIO_Init+0x348>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00d      	beq.n	8007efa <HAL_GPIO_Init+0x222>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a50      	ldr	r2, [pc, #320]	; (8008024 <HAL_GPIO_Init+0x34c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d007      	beq.n	8007ef6 <HAL_GPIO_Init+0x21e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a4f      	ldr	r2, [pc, #316]	; (8008028 <HAL_GPIO_Init+0x350>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d101      	bne.n	8007ef2 <HAL_GPIO_Init+0x21a>
 8007eee:	2309      	movs	r3, #9
 8007ef0:	e012      	b.n	8007f18 <HAL_GPIO_Init+0x240>
 8007ef2:	230a      	movs	r3, #10
 8007ef4:	e010      	b.n	8007f18 <HAL_GPIO_Init+0x240>
 8007ef6:	2308      	movs	r3, #8
 8007ef8:	e00e      	b.n	8007f18 <HAL_GPIO_Init+0x240>
 8007efa:	2307      	movs	r3, #7
 8007efc:	e00c      	b.n	8007f18 <HAL_GPIO_Init+0x240>
 8007efe:	2306      	movs	r3, #6
 8007f00:	e00a      	b.n	8007f18 <HAL_GPIO_Init+0x240>
 8007f02:	2305      	movs	r3, #5
 8007f04:	e008      	b.n	8007f18 <HAL_GPIO_Init+0x240>
 8007f06:	2304      	movs	r3, #4
 8007f08:	e006      	b.n	8007f18 <HAL_GPIO_Init+0x240>
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e004      	b.n	8007f18 <HAL_GPIO_Init+0x240>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e002      	b.n	8007f18 <HAL_GPIO_Init+0x240>
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <HAL_GPIO_Init+0x240>
 8007f16:	2300      	movs	r3, #0
 8007f18:	69fa      	ldr	r2, [r7, #28]
 8007f1a:	f002 0203 	and.w	r2, r2, #3
 8007f1e:	0092      	lsls	r2, r2, #2
 8007f20:	4093      	lsls	r3, r2
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f28:	4935      	ldr	r1, [pc, #212]	; (8008000 <HAL_GPIO_Init+0x328>)
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	089b      	lsrs	r3, r3, #2
 8007f2e:	3302      	adds	r3, #2
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f36:	4b3d      	ldr	r3, [pc, #244]	; (800802c <HAL_GPIO_Init+0x354>)
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	43db      	mvns	r3, r3
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	4013      	ands	r3, r2
 8007f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f5a:	4a34      	ldr	r2, [pc, #208]	; (800802c <HAL_GPIO_Init+0x354>)
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f60:	4b32      	ldr	r3, [pc, #200]	; (800802c <HAL_GPIO_Init+0x354>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	43db      	mvns	r3, r3
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f84:	4a29      	ldr	r2, [pc, #164]	; (800802c <HAL_GPIO_Init+0x354>)
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007f8a:	4b28      	ldr	r3, [pc, #160]	; (800802c <HAL_GPIO_Init+0x354>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	43db      	mvns	r3, r3
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	4013      	ands	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007fae:	4a1f      	ldr	r2, [pc, #124]	; (800802c <HAL_GPIO_Init+0x354>)
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	; (800802c <HAL_GPIO_Init+0x354>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007fd8:	4a14      	ldr	r2, [pc, #80]	; (800802c <HAL_GPIO_Init+0x354>)
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	61fb      	str	r3, [r7, #28]
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	2b0f      	cmp	r3, #15
 8007fe8:	f67f ae84 	bls.w	8007cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	3724      	adds	r7, #36	; 0x24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	40023800 	.word	0x40023800
 8008000:	40013800 	.word	0x40013800
 8008004:	40020000 	.word	0x40020000
 8008008:	40020400 	.word	0x40020400
 800800c:	40020800 	.word	0x40020800
 8008010:	40020c00 	.word	0x40020c00
 8008014:	40021000 	.word	0x40021000
 8008018:	40021400 	.word	0x40021400
 800801c:	40021800 	.word	0x40021800
 8008020:	40021c00 	.word	0x40021c00
 8008024:	40022000 	.word	0x40022000
 8008028:	40022400 	.word	0x40022400
 800802c:	40013c00 	.word	0x40013c00

08008030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	887b      	ldrh	r3, [r7, #2]
 8008042:	4013      	ands	r3, r2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008048:	2301      	movs	r3, #1
 800804a:	73fb      	strb	r3, [r7, #15]
 800804c:	e001      	b.n	8008052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	807b      	strh	r3, [r7, #2]
 800806c:	4613      	mov	r3, r2
 800806e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008070:	787b      	ldrb	r3, [r7, #1]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008076:	887a      	ldrh	r2, [r7, #2]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800807c:	e003      	b.n	8008086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800807e:	887b      	ldrh	r3, [r7, #2]
 8008080:	041a      	lsls	r2, r3, #16
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	619a      	str	r2, [r3, #24]
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
	...

08008094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800809e:	4b08      	ldr	r3, [pc, #32]	; (80080c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080a0:	695a      	ldr	r2, [r3, #20]
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d006      	beq.n	80080b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080aa:	4a05      	ldr	r2, [pc, #20]	; (80080c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080b0:	88fb      	ldrh	r3, [r7, #6]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fc f818 	bl	80040e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80080b8:	bf00      	nop
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40013c00 	.word	0x40013c00

080080c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e12b      	b.n	800832e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fc ffc0 	bl	8005070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2224      	movs	r2, #36	; 0x24
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0201 	bic.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008128:	f000 ff18 	bl	8008f5c <HAL_RCC_GetPCLK1Freq>
 800812c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4a81      	ldr	r2, [pc, #516]	; (8008338 <HAL_I2C_Init+0x274>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d807      	bhi.n	8008148 <HAL_I2C_Init+0x84>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4a80      	ldr	r2, [pc, #512]	; (800833c <HAL_I2C_Init+0x278>)
 800813c:	4293      	cmp	r3, r2
 800813e:	bf94      	ite	ls
 8008140:	2301      	movls	r3, #1
 8008142:	2300      	movhi	r3, #0
 8008144:	b2db      	uxtb	r3, r3
 8008146:	e006      	b.n	8008156 <HAL_I2C_Init+0x92>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4a7d      	ldr	r2, [pc, #500]	; (8008340 <HAL_I2C_Init+0x27c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	bf94      	ite	ls
 8008150:	2301      	movls	r3, #1
 8008152:	2300      	movhi	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e0e7      	b.n	800832e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4a78      	ldr	r2, [pc, #480]	; (8008344 <HAL_I2C_Init+0x280>)
 8008162:	fba2 2303 	umull	r2, r3, r2, r3
 8008166:	0c9b      	lsrs	r3, r3, #18
 8008168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	4a6a      	ldr	r2, [pc, #424]	; (8008338 <HAL_I2C_Init+0x274>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d802      	bhi.n	8008198 <HAL_I2C_Init+0xd4>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	3301      	adds	r3, #1
 8008196:	e009      	b.n	80081ac <HAL_I2C_Init+0xe8>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800819e:	fb02 f303 	mul.w	r3, r2, r3
 80081a2:	4a69      	ldr	r2, [pc, #420]	; (8008348 <HAL_I2C_Init+0x284>)
 80081a4:	fba2 2303 	umull	r2, r3, r2, r3
 80081a8:	099b      	lsrs	r3, r3, #6
 80081aa:	3301      	adds	r3, #1
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	6812      	ldr	r2, [r2, #0]
 80081b0:	430b      	orrs	r3, r1
 80081b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80081be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	495c      	ldr	r1, [pc, #368]	; (8008338 <HAL_I2C_Init+0x274>)
 80081c8:	428b      	cmp	r3, r1
 80081ca:	d819      	bhi.n	8008200 <HAL_I2C_Init+0x13c>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	1e59      	subs	r1, r3, #1
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80081da:	1c59      	adds	r1, r3, #1
 80081dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80081e0:	400b      	ands	r3, r1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <HAL_I2C_Init+0x138>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	1e59      	subs	r1, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80081f4:	3301      	adds	r3, #1
 80081f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081fa:	e051      	b.n	80082a0 <HAL_I2C_Init+0x1dc>
 80081fc:	2304      	movs	r3, #4
 80081fe:	e04f      	b.n	80082a0 <HAL_I2C_Init+0x1dc>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d111      	bne.n	800822c <HAL_I2C_Init+0x168>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	1e58      	subs	r0, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6859      	ldr	r1, [r3, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	440b      	add	r3, r1
 8008216:	fbb0 f3f3 	udiv	r3, r0, r3
 800821a:	3301      	adds	r3, #1
 800821c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008220:	2b00      	cmp	r3, #0
 8008222:	bf0c      	ite	eq
 8008224:	2301      	moveq	r3, #1
 8008226:	2300      	movne	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	e012      	b.n	8008252 <HAL_I2C_Init+0x18e>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	1e58      	subs	r0, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6859      	ldr	r1, [r3, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	0099      	lsls	r1, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008242:	3301      	adds	r3, #1
 8008244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008248:	2b00      	cmp	r3, #0
 800824a:	bf0c      	ite	eq
 800824c:	2301      	moveq	r3, #1
 800824e:	2300      	movne	r3, #0
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <HAL_I2C_Init+0x196>
 8008256:	2301      	movs	r3, #1
 8008258:	e022      	b.n	80082a0 <HAL_I2C_Init+0x1dc>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10e      	bne.n	8008280 <HAL_I2C_Init+0x1bc>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1e58      	subs	r0, r3, #1
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6859      	ldr	r1, [r3, #4]
 800826a:	460b      	mov	r3, r1
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	440b      	add	r3, r1
 8008270:	fbb0 f3f3 	udiv	r3, r0, r3
 8008274:	3301      	adds	r3, #1
 8008276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800827a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800827e:	e00f      	b.n	80082a0 <HAL_I2C_Init+0x1dc>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	1e58      	subs	r0, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6859      	ldr	r1, [r3, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	0099      	lsls	r1, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	fbb0 f3f3 	udiv	r3, r0, r3
 8008296:	3301      	adds	r3, #1
 8008298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800829c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	6809      	ldr	r1, [r1, #0]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69da      	ldr	r2, [r3, #28]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80082ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6911      	ldr	r1, [r2, #16]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	68d2      	ldr	r2, [r2, #12]
 80082da:	4311      	orrs	r1, r2
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695a      	ldr	r2, [r3, #20]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0201 	orr.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	000186a0 	.word	0x000186a0
 800833c:	001e847f 	.word	0x001e847f
 8008340:	003d08ff 	.word	0x003d08ff
 8008344:	431bde83 	.word	0x431bde83
 8008348:	10624dd3 	.word	0x10624dd3

0800834c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b20      	cmp	r3, #32
 8008360:	d129      	bne.n	80083b6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2224      	movs	r2, #36	; 0x24
 8008366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 0201 	bic.w	r2, r2, #1
 8008378:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 0210 	bic.w	r2, r2, #16
 8008388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f042 0201 	orr.w	r2, r2, #1
 80083a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	e000      	b.n	80083b8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80083b6:	2302      	movs	r3, #2
  }
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d12a      	bne.n	8008434 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2224      	movs	r2, #36	; 0x24
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0201 	bic.w	r2, r2, #1
 80083f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80083fe:	89fb      	ldrh	r3, [r7, #14]
 8008400:	f023 030f 	bic.w	r3, r3, #15
 8008404:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	b29a      	uxth	r2, r3
 800840a:	89fb      	ldrh	r3, [r7, #14]
 800840c:	4313      	orrs	r3, r2
 800840e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	89fa      	ldrh	r2, [r7, #14]
 8008416:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 0201 	orr.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	e000      	b.n	8008436 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008434:	2302      	movs	r3, #2
  }
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008444:	b08f      	sub	sp, #60	; 0x3c
 8008446:	af0a      	add	r7, sp, #40	; 0x28
 8008448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e10f      	b.n	8008674 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d106      	bne.n	8008474 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fd f850 	bl	8005514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2203      	movs	r2, #3
 8008478:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f003 fe09 	bl	800c0aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	603b      	str	r3, [r7, #0]
 800849e:	687e      	ldr	r6, [r7, #4]
 80084a0:	466d      	mov	r5, sp
 80084a2:	f106 0410 	add.w	r4, r6, #16
 80084a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80084b6:	1d33      	adds	r3, r6, #4
 80084b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084ba:	6838      	ldr	r0, [r7, #0]
 80084bc:	f003 fd94 	bl	800bfe8 <USB_CoreInit>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e0d0      	b.n	8008674 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2100      	movs	r1, #0
 80084d8:	4618      	mov	r0, r3
 80084da:	f003 fdf7 	bl	800c0cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084de:	2300      	movs	r3, #0
 80084e0:	73fb      	strb	r3, [r7, #15]
 80084e2:	e04a      	b.n	800857a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80084e4:	7bfa      	ldrb	r2, [r7, #15]
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	4613      	mov	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	333d      	adds	r3, #61	; 0x3d
 80084f4:	2201      	movs	r2, #1
 80084f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80084f8:	7bfa      	ldrb	r2, [r7, #15]
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	4613      	mov	r3, r2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	440b      	add	r3, r1
 8008506:	333c      	adds	r3, #60	; 0x3c
 8008508:	7bfa      	ldrb	r2, [r7, #15]
 800850a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800850c:	7bfa      	ldrb	r2, [r7, #15]
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	b298      	uxth	r0, r3
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	4613      	mov	r3, r2
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	3344      	adds	r3, #68	; 0x44
 8008520:	4602      	mov	r2, r0
 8008522:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008524:	7bfa      	ldrb	r2, [r7, #15]
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	4613      	mov	r3, r2
 800852a:	00db      	lsls	r3, r3, #3
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	440b      	add	r3, r1
 8008532:	3340      	adds	r3, #64	; 0x40
 8008534:	2200      	movs	r2, #0
 8008536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008538:	7bfa      	ldrb	r2, [r7, #15]
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	4613      	mov	r3, r2
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	3348      	adds	r3, #72	; 0x48
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800854c:	7bfa      	ldrb	r2, [r7, #15]
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	334c      	adds	r3, #76	; 0x4c
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008560:	7bfa      	ldrb	r2, [r7, #15]
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	4613      	mov	r3, r2
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	3354      	adds	r3, #84	; 0x54
 8008570:	2200      	movs	r2, #0
 8008572:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	3301      	adds	r3, #1
 8008578:	73fb      	strb	r3, [r7, #15]
 800857a:	7bfa      	ldrb	r2, [r7, #15]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	429a      	cmp	r2, r3
 8008582:	d3af      	bcc.n	80084e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
 8008588:	e044      	b.n	8008614 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800858a:	7bfa      	ldrb	r2, [r7, #15]
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	4613      	mov	r3, r2
 8008590:	00db      	lsls	r3, r3, #3
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	440b      	add	r3, r1
 8008598:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80085a0:	7bfa      	ldrb	r2, [r7, #15]
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	4613      	mov	r3, r2
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	440b      	add	r3, r1
 80085ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80085b2:	7bfa      	ldrb	r2, [r7, #15]
 80085b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80085b6:	7bfa      	ldrb	r2, [r7, #15]
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	4613      	mov	r3, r2
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	440b      	add	r3, r1
 80085c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80085c8:	2200      	movs	r2, #0
 80085ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80085cc:	7bfa      	ldrb	r2, [r7, #15]
 80085ce:	6879      	ldr	r1, [r7, #4]
 80085d0:	4613      	mov	r3, r2
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80085e2:	7bfa      	ldrb	r2, [r7, #15]
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80085f8:	7bfa      	ldrb	r2, [r7, #15]
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	3301      	adds	r3, #1
 8008612:	73fb      	strb	r3, [r7, #15]
 8008614:	7bfa      	ldrb	r2, [r7, #15]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	429a      	cmp	r2, r3
 800861c:	d3b5      	bcc.n	800858a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	687e      	ldr	r6, [r7, #4]
 8008626:	466d      	mov	r5, sp
 8008628:	f106 0410 	add.w	r4, r6, #16
 800862c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800862e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008638:	e885 0003 	stmia.w	r5, {r0, r1}
 800863c:	1d33      	adds	r3, r6, #4
 800863e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008640:	6838      	ldr	r0, [r7, #0]
 8008642:	f003 fd8f 	bl	800c164 <USB_DevInit>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e00d      	b.n	8008674 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4618      	mov	r0, r3
 800866e:	f003 ff5a 	bl	800c526 <USB_DevDisconnect>

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800867c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e267      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d075      	beq.n	8008786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800869a:	4b88      	ldr	r3, [pc, #544]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 030c 	and.w	r3, r3, #12
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d00c      	beq.n	80086c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086a6:	4b85      	ldr	r3, [pc, #532]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086ae:	2b08      	cmp	r3, #8
 80086b0:	d112      	bne.n	80086d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086b2:	4b82      	ldr	r3, [pc, #520]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086be:	d10b      	bne.n	80086d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086c0:	4b7e      	ldr	r3, [pc, #504]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d05b      	beq.n	8008784 <HAL_RCC_OscConfig+0x108>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d157      	bne.n	8008784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e242      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e0:	d106      	bne.n	80086f0 <HAL_RCC_OscConfig+0x74>
 80086e2:	4b76      	ldr	r3, [pc, #472]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a75      	ldr	r2, [pc, #468]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80086e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	e01d      	b.n	800872c <HAL_RCC_OscConfig+0xb0>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086f8:	d10c      	bne.n	8008714 <HAL_RCC_OscConfig+0x98>
 80086fa:	4b70      	ldr	r3, [pc, #448]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a6f      	ldr	r2, [pc, #444]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	4b6d      	ldr	r3, [pc, #436]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a6c      	ldr	r2, [pc, #432]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 800870c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	e00b      	b.n	800872c <HAL_RCC_OscConfig+0xb0>
 8008714:	4b69      	ldr	r3, [pc, #420]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a68      	ldr	r2, [pc, #416]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 800871a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800871e:	6013      	str	r3, [r2, #0]
 8008720:	4b66      	ldr	r3, [pc, #408]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a65      	ldr	r2, [pc, #404]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800872a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d013      	beq.n	800875c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008734:	f7fd fe42 	bl	80063bc <HAL_GetTick>
 8008738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800873c:	f7fd fe3e 	bl	80063bc <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b64      	cmp	r3, #100	; 0x64
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e207      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800874e:	4b5b      	ldr	r3, [pc, #364]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0f0      	beq.n	800873c <HAL_RCC_OscConfig+0xc0>
 800875a:	e014      	b.n	8008786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800875c:	f7fd fe2e 	bl	80063bc <HAL_GetTick>
 8008760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008762:	e008      	b.n	8008776 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008764:	f7fd fe2a 	bl	80063bc <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	2b64      	cmp	r3, #100	; 0x64
 8008770:	d901      	bls.n	8008776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e1f3      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008776:	4b51      	ldr	r3, [pc, #324]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f0      	bne.n	8008764 <HAL_RCC_OscConfig+0xe8>
 8008782:	e000      	b.n	8008786 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d063      	beq.n	800885a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008792:	4b4a      	ldr	r3, [pc, #296]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f003 030c 	and.w	r3, r3, #12
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00b      	beq.n	80087b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800879e:	4b47      	ldr	r3, [pc, #284]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087a6:	2b08      	cmp	r3, #8
 80087a8:	d11c      	bne.n	80087e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087aa:	4b44      	ldr	r3, [pc, #272]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d116      	bne.n	80087e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087b6:	4b41      	ldr	r3, [pc, #260]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <HAL_RCC_OscConfig+0x152>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d001      	beq.n	80087ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e1c7      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ce:	4b3b      	ldr	r3, [pc, #236]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	4937      	ldr	r1, [pc, #220]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087e2:	e03a      	b.n	800885a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d020      	beq.n	800882e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087ec:	4b34      	ldr	r3, [pc, #208]	; (80088c0 <HAL_RCC_OscConfig+0x244>)
 80087ee:	2201      	movs	r2, #1
 80087f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f2:	f7fd fde3 	bl	80063bc <HAL_GetTick>
 80087f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087f8:	e008      	b.n	800880c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087fa:	f7fd fddf 	bl	80063bc <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	2b02      	cmp	r3, #2
 8008806:	d901      	bls.n	800880c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e1a8      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800880c:	4b2b      	ldr	r3, [pc, #172]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0f0      	beq.n	80087fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008818:	4b28      	ldr	r3, [pc, #160]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	4925      	ldr	r1, [pc, #148]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008828:	4313      	orrs	r3, r2
 800882a:	600b      	str	r3, [r1, #0]
 800882c:	e015      	b.n	800885a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800882e:	4b24      	ldr	r3, [pc, #144]	; (80088c0 <HAL_RCC_OscConfig+0x244>)
 8008830:	2200      	movs	r2, #0
 8008832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008834:	f7fd fdc2 	bl	80063bc <HAL_GetTick>
 8008838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800883a:	e008      	b.n	800884e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800883c:	f7fd fdbe 	bl	80063bc <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d901      	bls.n	800884e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e187      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800884e:	4b1b      	ldr	r3, [pc, #108]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1f0      	bne.n	800883c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0308 	and.w	r3, r3, #8
 8008862:	2b00      	cmp	r3, #0
 8008864:	d036      	beq.n	80088d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d016      	beq.n	800889c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800886e:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <HAL_RCC_OscConfig+0x248>)
 8008870:	2201      	movs	r2, #1
 8008872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008874:	f7fd fda2 	bl	80063bc <HAL_GetTick>
 8008878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800887a:	e008      	b.n	800888e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800887c:	f7fd fd9e 	bl	80063bc <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d901      	bls.n	800888e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e167      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800888e:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <HAL_RCC_OscConfig+0x240>)
 8008890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0f0      	beq.n	800887c <HAL_RCC_OscConfig+0x200>
 800889a:	e01b      	b.n	80088d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800889c:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <HAL_RCC_OscConfig+0x248>)
 800889e:	2200      	movs	r2, #0
 80088a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088a2:	f7fd fd8b 	bl	80063bc <HAL_GetTick>
 80088a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088a8:	e00e      	b.n	80088c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088aa:	f7fd fd87 	bl	80063bc <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d907      	bls.n	80088c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e150      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
 80088bc:	40023800 	.word	0x40023800
 80088c0:	42470000 	.word	0x42470000
 80088c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088c8:	4b88      	ldr	r3, [pc, #544]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 80088ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1ea      	bne.n	80088aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 8097 	beq.w	8008a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088e2:	2300      	movs	r3, #0
 80088e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088e6:	4b81      	ldr	r3, [pc, #516]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10f      	bne.n	8008912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088f2:	2300      	movs	r3, #0
 80088f4:	60bb      	str	r3, [r7, #8]
 80088f6:	4b7d      	ldr	r3, [pc, #500]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	4a7c      	ldr	r2, [pc, #496]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 80088fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008900:	6413      	str	r3, [r2, #64]	; 0x40
 8008902:	4b7a      	ldr	r3, [pc, #488]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800890a:	60bb      	str	r3, [r7, #8]
 800890c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800890e:	2301      	movs	r3, #1
 8008910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008912:	4b77      	ldr	r3, [pc, #476]	; (8008af0 <HAL_RCC_OscConfig+0x474>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891a:	2b00      	cmp	r3, #0
 800891c:	d118      	bne.n	8008950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800891e:	4b74      	ldr	r3, [pc, #464]	; (8008af0 <HAL_RCC_OscConfig+0x474>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a73      	ldr	r2, [pc, #460]	; (8008af0 <HAL_RCC_OscConfig+0x474>)
 8008924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800892a:	f7fd fd47 	bl	80063bc <HAL_GetTick>
 800892e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008930:	e008      	b.n	8008944 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008932:	f7fd fd43 	bl	80063bc <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b02      	cmp	r3, #2
 800893e:	d901      	bls.n	8008944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e10c      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008944:	4b6a      	ldr	r3, [pc, #424]	; (8008af0 <HAL_RCC_OscConfig+0x474>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0f0      	beq.n	8008932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d106      	bne.n	8008966 <HAL_RCC_OscConfig+0x2ea>
 8008958:	4b64      	ldr	r3, [pc, #400]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 800895a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895c:	4a63      	ldr	r2, [pc, #396]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 800895e:	f043 0301 	orr.w	r3, r3, #1
 8008962:	6713      	str	r3, [r2, #112]	; 0x70
 8008964:	e01c      	b.n	80089a0 <HAL_RCC_OscConfig+0x324>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	2b05      	cmp	r3, #5
 800896c:	d10c      	bne.n	8008988 <HAL_RCC_OscConfig+0x30c>
 800896e:	4b5f      	ldr	r3, [pc, #380]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008972:	4a5e      	ldr	r2, [pc, #376]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008974:	f043 0304 	orr.w	r3, r3, #4
 8008978:	6713      	str	r3, [r2, #112]	; 0x70
 800897a:	4b5c      	ldr	r3, [pc, #368]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 800897c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897e:	4a5b      	ldr	r2, [pc, #364]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008980:	f043 0301 	orr.w	r3, r3, #1
 8008984:	6713      	str	r3, [r2, #112]	; 0x70
 8008986:	e00b      	b.n	80089a0 <HAL_RCC_OscConfig+0x324>
 8008988:	4b58      	ldr	r3, [pc, #352]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 800898a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898c:	4a57      	ldr	r2, [pc, #348]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 800898e:	f023 0301 	bic.w	r3, r3, #1
 8008992:	6713      	str	r3, [r2, #112]	; 0x70
 8008994:	4b55      	ldr	r3, [pc, #340]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008998:	4a54      	ldr	r2, [pc, #336]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 800899a:	f023 0304 	bic.w	r3, r3, #4
 800899e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d015      	beq.n	80089d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a8:	f7fd fd08 	bl	80063bc <HAL_GetTick>
 80089ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089ae:	e00a      	b.n	80089c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089b0:	f7fd fd04 	bl	80063bc <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80089be:	4293      	cmp	r3, r2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e0cb      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089c6:	4b49      	ldr	r3, [pc, #292]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 80089c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0ee      	beq.n	80089b0 <HAL_RCC_OscConfig+0x334>
 80089d2:	e014      	b.n	80089fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089d4:	f7fd fcf2 	bl	80063bc <HAL_GetTick>
 80089d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089da:	e00a      	b.n	80089f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089dc:	f7fd fcee 	bl	80063bc <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e0b5      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089f2:	4b3e      	ldr	r3, [pc, #248]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 80089f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1ee      	bne.n	80089dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d105      	bne.n	8008a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a04:	4b39      	ldr	r3, [pc, #228]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	4a38      	ldr	r2, [pc, #224]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 80a1 	beq.w	8008b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a1a:	4b34      	ldr	r3, [pc, #208]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f003 030c 	and.w	r3, r3, #12
 8008a22:	2b08      	cmp	r3, #8
 8008a24:	d05c      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d141      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a2e:	4b31      	ldr	r3, [pc, #196]	; (8008af4 <HAL_RCC_OscConfig+0x478>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a34:	f7fd fcc2 	bl	80063bc <HAL_GetTick>
 8008a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a3a:	e008      	b.n	8008a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a3c:	f7fd fcbe 	bl	80063bc <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d901      	bls.n	8008a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e087      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a4e:	4b27      	ldr	r3, [pc, #156]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1f0      	bne.n	8008a3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	69da      	ldr	r2, [r3, #28]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	019b      	lsls	r3, r3, #6
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a70:	085b      	lsrs	r3, r3, #1
 8008a72:	3b01      	subs	r3, #1
 8008a74:	041b      	lsls	r3, r3, #16
 8008a76:	431a      	orrs	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	061b      	lsls	r3, r3, #24
 8008a7e:	491b      	ldr	r1, [pc, #108]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a84:	4b1b      	ldr	r3, [pc, #108]	; (8008af4 <HAL_RCC_OscConfig+0x478>)
 8008a86:	2201      	movs	r2, #1
 8008a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a8a:	f7fd fc97 	bl	80063bc <HAL_GetTick>
 8008a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a90:	e008      	b.n	8008aa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a92:	f7fd fc93 	bl	80063bc <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d901      	bls.n	8008aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e05c      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aa4:	4b11      	ldr	r3, [pc, #68]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0f0      	beq.n	8008a92 <HAL_RCC_OscConfig+0x416>
 8008ab0:	e054      	b.n	8008b5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ab2:	4b10      	ldr	r3, [pc, #64]	; (8008af4 <HAL_RCC_OscConfig+0x478>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ab8:	f7fd fc80 	bl	80063bc <HAL_GetTick>
 8008abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ac0:	f7fd fc7c 	bl	80063bc <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e045      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ad2:	4b06      	ldr	r3, [pc, #24]	; (8008aec <HAL_RCC_OscConfig+0x470>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f0      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x444>
 8008ade:	e03d      	b.n	8008b5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d107      	bne.n	8008af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e038      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
 8008aec:	40023800 	.word	0x40023800
 8008af0:	40007000 	.word	0x40007000
 8008af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008af8:	4b1b      	ldr	r3, [pc, #108]	; (8008b68 <HAL_RCC_OscConfig+0x4ec>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d028      	beq.n	8008b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d121      	bne.n	8008b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d11a      	bne.n	8008b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b28:	4013      	ands	r3, r2
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d111      	bne.n	8008b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	085b      	lsrs	r3, r3, #1
 8008b40:	3b01      	subs	r3, #1
 8008b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d107      	bne.n	8008b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d001      	beq.n	8008b5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e000      	b.n	8008b5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	40023800 	.word	0x40023800

08008b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e0cc      	b.n	8008d1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b80:	4b68      	ldr	r3, [pc, #416]	; (8008d24 <HAL_RCC_ClockConfig+0x1b8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d90c      	bls.n	8008ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b8e:	4b65      	ldr	r3, [pc, #404]	; (8008d24 <HAL_RCC_ClockConfig+0x1b8>)
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	b2d2      	uxtb	r2, r2
 8008b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b96:	4b63      	ldr	r3, [pc, #396]	; (8008d24 <HAL_RCC_ClockConfig+0x1b8>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d001      	beq.n	8008ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e0b8      	b.n	8008d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d020      	beq.n	8008bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0304 	and.w	r3, r3, #4
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bc0:	4b59      	ldr	r3, [pc, #356]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	4a58      	ldr	r2, [pc, #352]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008bca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0308 	and.w	r3, r3, #8
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d005      	beq.n	8008be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bd8:	4b53      	ldr	r3, [pc, #332]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	4a52      	ldr	r2, [pc, #328]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008bde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008be2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008be4:	4b50      	ldr	r3, [pc, #320]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	494d      	ldr	r1, [pc, #308]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d044      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d107      	bne.n	8008c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c0a:	4b47      	ldr	r3, [pc, #284]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d119      	bne.n	8008c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e07f      	b.n	8008d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d003      	beq.n	8008c2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d107      	bne.n	8008c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c2a:	4b3f      	ldr	r3, [pc, #252]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d109      	bne.n	8008c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e06f      	b.n	8008d1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c3a:	4b3b      	ldr	r3, [pc, #236]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e067      	b.n	8008d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c4a:	4b37      	ldr	r3, [pc, #220]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f023 0203 	bic.w	r2, r3, #3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	4934      	ldr	r1, [pc, #208]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c5c:	f7fd fbae 	bl	80063bc <HAL_GetTick>
 8008c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c62:	e00a      	b.n	8008c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c64:	f7fd fbaa 	bl	80063bc <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e04f      	b.n	8008d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c7a:	4b2b      	ldr	r3, [pc, #172]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f003 020c 	and.w	r2, r3, #12
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d1eb      	bne.n	8008c64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c8c:	4b25      	ldr	r3, [pc, #148]	; (8008d24 <HAL_RCC_ClockConfig+0x1b8>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 030f 	and.w	r3, r3, #15
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d20c      	bcs.n	8008cb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c9a:	4b22      	ldr	r3, [pc, #136]	; (8008d24 <HAL_RCC_ClockConfig+0x1b8>)
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	b2d2      	uxtb	r2, r2
 8008ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ca2:	4b20      	ldr	r3, [pc, #128]	; (8008d24 <HAL_RCC_ClockConfig+0x1b8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d001      	beq.n	8008cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e032      	b.n	8008d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d008      	beq.n	8008cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cc0:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	4916      	ldr	r1, [pc, #88]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0308 	and.w	r3, r3, #8
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d009      	beq.n	8008cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cde:	4b12      	ldr	r3, [pc, #72]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	490e      	ldr	r1, [pc, #56]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cf2:	f000 f821 	bl	8008d38 <HAL_RCC_GetSysClockFreq>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	091b      	lsrs	r3, r3, #4
 8008cfe:	f003 030f 	and.w	r3, r3, #15
 8008d02:	490a      	ldr	r1, [pc, #40]	; (8008d2c <HAL_RCC_ClockConfig+0x1c0>)
 8008d04:	5ccb      	ldrb	r3, [r1, r3]
 8008d06:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0a:	4a09      	ldr	r2, [pc, #36]	; (8008d30 <HAL_RCC_ClockConfig+0x1c4>)
 8008d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d0e:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <HAL_RCC_ClockConfig+0x1c8>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fd fb0e 	bl	8006334 <HAL_InitTick>

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	40023c00 	.word	0x40023c00
 8008d28:	40023800 	.word	0x40023800
 8008d2c:	0800d0cc 	.word	0x0800d0cc
 8008d30:	20000004 	.word	0x20000004
 8008d34:	2000000c 	.word	0x2000000c

08008d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d3c:	b094      	sub	sp, #80	; 0x50
 8008d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	647b      	str	r3, [r7, #68]	; 0x44
 8008d44:	2300      	movs	r3, #0
 8008d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d48:	2300      	movs	r3, #0
 8008d4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d50:	4b79      	ldr	r3, [pc, #484]	; (8008f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f003 030c 	and.w	r3, r3, #12
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	d00d      	beq.n	8008d78 <HAL_RCC_GetSysClockFreq+0x40>
 8008d5c:	2b08      	cmp	r3, #8
 8008d5e:	f200 80e1 	bhi.w	8008f24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <HAL_RCC_GetSysClockFreq+0x34>
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d003      	beq.n	8008d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8008d6a:	e0db      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d6c:	4b73      	ldr	r3, [pc, #460]	; (8008f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8008d6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008d70:	e0db      	b.n	8008f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d72:	4b73      	ldr	r3, [pc, #460]	; (8008f40 <HAL_RCC_GetSysClockFreq+0x208>)
 8008d74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d76:	e0d8      	b.n	8008f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d78:	4b6f      	ldr	r3, [pc, #444]	; (8008f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d82:	4b6d      	ldr	r3, [pc, #436]	; (8008f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d063      	beq.n	8008e56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d8e:	4b6a      	ldr	r3, [pc, #424]	; (8008f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	099b      	lsrs	r3, r3, #6
 8008d94:	2200      	movs	r2, #0
 8008d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da0:	633b      	str	r3, [r7, #48]	; 0x30
 8008da2:	2300      	movs	r3, #0
 8008da4:	637b      	str	r3, [r7, #52]	; 0x34
 8008da6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008daa:	4622      	mov	r2, r4
 8008dac:	462b      	mov	r3, r5
 8008dae:	f04f 0000 	mov.w	r0, #0
 8008db2:	f04f 0100 	mov.w	r1, #0
 8008db6:	0159      	lsls	r1, r3, #5
 8008db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008dbc:	0150      	lsls	r0, r2, #5
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	1a51      	subs	r1, r2, r1
 8008dc6:	6139      	str	r1, [r7, #16]
 8008dc8:	4629      	mov	r1, r5
 8008dca:	eb63 0301 	sbc.w	r3, r3, r1
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	f04f 0200 	mov.w	r2, #0
 8008dd4:	f04f 0300 	mov.w	r3, #0
 8008dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ddc:	4659      	mov	r1, fp
 8008dde:	018b      	lsls	r3, r1, #6
 8008de0:	4651      	mov	r1, sl
 8008de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008de6:	4651      	mov	r1, sl
 8008de8:	018a      	lsls	r2, r1, #6
 8008dea:	4651      	mov	r1, sl
 8008dec:	ebb2 0801 	subs.w	r8, r2, r1
 8008df0:	4659      	mov	r1, fp
 8008df2:	eb63 0901 	sbc.w	r9, r3, r1
 8008df6:	f04f 0200 	mov.w	r2, #0
 8008dfa:	f04f 0300 	mov.w	r3, #0
 8008dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e0a:	4690      	mov	r8, r2
 8008e0c:	4699      	mov	r9, r3
 8008e0e:	4623      	mov	r3, r4
 8008e10:	eb18 0303 	adds.w	r3, r8, r3
 8008e14:	60bb      	str	r3, [r7, #8]
 8008e16:	462b      	mov	r3, r5
 8008e18:	eb49 0303 	adc.w	r3, r9, r3
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	f04f 0300 	mov.w	r3, #0
 8008e26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	024b      	lsls	r3, r1, #9
 8008e2e:	4621      	mov	r1, r4
 8008e30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e34:	4621      	mov	r1, r4
 8008e36:	024a      	lsls	r2, r1, #9
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e3e:	2200      	movs	r2, #0
 8008e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e48:	f7f7 fe96 	bl	8000b78 <__aeabi_uldivmod>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4613      	mov	r3, r2
 8008e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e54:	e058      	b.n	8008f08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e56:	4b38      	ldr	r3, [pc, #224]	; (8008f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	099b      	lsrs	r3, r3, #6
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	4611      	mov	r1, r2
 8008e62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e66:	623b      	str	r3, [r7, #32]
 8008e68:	2300      	movs	r3, #0
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e70:	4642      	mov	r2, r8
 8008e72:	464b      	mov	r3, r9
 8008e74:	f04f 0000 	mov.w	r0, #0
 8008e78:	f04f 0100 	mov.w	r1, #0
 8008e7c:	0159      	lsls	r1, r3, #5
 8008e7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e82:	0150      	lsls	r0, r2, #5
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4641      	mov	r1, r8
 8008e8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008e8e:	4649      	mov	r1, r9
 8008e90:	eb63 0b01 	sbc.w	fp, r3, r1
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008ea0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ea4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ea8:	ebb2 040a 	subs.w	r4, r2, sl
 8008eac:	eb63 050b 	sbc.w	r5, r3, fp
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	00eb      	lsls	r3, r5, #3
 8008eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ebe:	00e2      	lsls	r2, r4, #3
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	461d      	mov	r5, r3
 8008ec4:	4643      	mov	r3, r8
 8008ec6:	18e3      	adds	r3, r4, r3
 8008ec8:	603b      	str	r3, [r7, #0]
 8008eca:	464b      	mov	r3, r9
 8008ecc:	eb45 0303 	adc.w	r3, r5, r3
 8008ed0:	607b      	str	r3, [r7, #4]
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	f04f 0300 	mov.w	r3, #0
 8008eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ede:	4629      	mov	r1, r5
 8008ee0:	028b      	lsls	r3, r1, #10
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ee8:	4621      	mov	r1, r4
 8008eea:	028a      	lsls	r2, r1, #10
 8008eec:	4610      	mov	r0, r2
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	61bb      	str	r3, [r7, #24]
 8008ef6:	61fa      	str	r2, [r7, #28]
 8008ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008efc:	f7f7 fe3c 	bl	8000b78 <__aeabi_uldivmod>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4613      	mov	r3, r2
 8008f06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f08:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	0c1b      	lsrs	r3, r3, #16
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	3301      	adds	r3, #1
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008f18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f22:	e002      	b.n	8008f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8008f26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3750      	adds	r7, #80	; 0x50
 8008f30:	46bd      	mov	sp, r7
 8008f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f36:	bf00      	nop
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	00f42400 	.word	0x00f42400
 8008f40:	007a1200 	.word	0x007a1200

08008f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f48:	4b03      	ldr	r3, [pc, #12]	; (8008f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	20000004 	.word	0x20000004

08008f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f60:	f7ff fff0 	bl	8008f44 <HAL_RCC_GetHCLKFreq>
 8008f64:	4602      	mov	r2, r0
 8008f66:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	0a9b      	lsrs	r3, r3, #10
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	4903      	ldr	r1, [pc, #12]	; (8008f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f72:	5ccb      	ldrb	r3, [r1, r3]
 8008f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	40023800 	.word	0x40023800
 8008f80:	0800d0dc 	.word	0x0800d0dc

08008f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f88:	f7ff ffdc 	bl	8008f44 <HAL_RCC_GetHCLKFreq>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	0b5b      	lsrs	r3, r3, #13
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	4903      	ldr	r1, [pc, #12]	; (8008fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f9a:	5ccb      	ldrb	r3, [r1, r3]
 8008f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	40023800 	.word	0x40023800
 8008fa8:	0800d0dc 	.word	0x0800d0dc

08008fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e041      	b.n	8009042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7fc f8ea 	bl	80051ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4610      	mov	r0, r2
 8008fec:	f001 f904 	bl	800a1f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e041      	b.n	80090e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	d106      	bne.n	8009076 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7fc f845 	bl	8005100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2202      	movs	r2, #2
 800907a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	3304      	adds	r3, #4
 8009086:	4619      	mov	r1, r3
 8009088:	4610      	mov	r0, r2
 800908a:	f001 f8b5 	bl	800a1f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d109      	bne.n	8009114 <HAL_TIM_PWM_Start_DMA+0x2c>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	bf0c      	ite	eq
 800910c:	2301      	moveq	r3, #1
 800910e:	2300      	movne	r3, #0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	e022      	b.n	800915a <HAL_TIM_PWM_Start_DMA+0x72>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2b04      	cmp	r3, #4
 8009118:	d109      	bne.n	800912e <HAL_TIM_PWM_Start_DMA+0x46>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b02      	cmp	r3, #2
 8009124:	bf0c      	ite	eq
 8009126:	2301      	moveq	r3, #1
 8009128:	2300      	movne	r3, #0
 800912a:	b2db      	uxtb	r3, r3
 800912c:	e015      	b.n	800915a <HAL_TIM_PWM_Start_DMA+0x72>
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2b08      	cmp	r3, #8
 8009132:	d109      	bne.n	8009148 <HAL_TIM_PWM_Start_DMA+0x60>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2b02      	cmp	r3, #2
 800913e:	bf0c      	ite	eq
 8009140:	2301      	moveq	r3, #1
 8009142:	2300      	movne	r3, #0
 8009144:	b2db      	uxtb	r3, r3
 8009146:	e008      	b.n	800915a <HAL_TIM_PWM_Start_DMA+0x72>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b02      	cmp	r3, #2
 8009152:	bf0c      	ite	eq
 8009154:	2301      	moveq	r3, #1
 8009156:	2300      	movne	r3, #0
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800915e:	2302      	movs	r3, #2
 8009160:	e171      	b.n	8009446 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <HAL_TIM_PWM_Start_DMA+0x94>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b01      	cmp	r3, #1
 8009172:	bf0c      	ite	eq
 8009174:	2301      	moveq	r3, #1
 8009176:	2300      	movne	r3, #0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	e022      	b.n	80091c2 <HAL_TIM_PWM_Start_DMA+0xda>
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2b04      	cmp	r3, #4
 8009180:	d109      	bne.n	8009196 <HAL_TIM_PWM_Start_DMA+0xae>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b01      	cmp	r3, #1
 800918c:	bf0c      	ite	eq
 800918e:	2301      	moveq	r3, #1
 8009190:	2300      	movne	r3, #0
 8009192:	b2db      	uxtb	r3, r3
 8009194:	e015      	b.n	80091c2 <HAL_TIM_PWM_Start_DMA+0xda>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b08      	cmp	r3, #8
 800919a:	d109      	bne.n	80091b0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	bf0c      	ite	eq
 80091a8:	2301      	moveq	r3, #1
 80091aa:	2300      	movne	r3, #0
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	e008      	b.n	80091c2 <HAL_TIM_PWM_Start_DMA+0xda>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	bf0c      	ite	eq
 80091bc:	2301      	moveq	r3, #1
 80091be:	2300      	movne	r3, #0
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d024      	beq.n	8009210 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d104      	bne.n	80091d6 <HAL_TIM_PWM_Start_DMA+0xee>
 80091cc:	887b      	ldrh	r3, [r7, #2]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e137      	b.n	8009446 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091e4:	e016      	b.n	8009214 <HAL_TIM_PWM_Start_DMA+0x12c>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d104      	bne.n	80091f6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2202      	movs	r2, #2
 80091f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091f4:	e00e      	b.n	8009214 <HAL_TIM_PWM_Start_DMA+0x12c>
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d104      	bne.n	8009206 <HAL_TIM_PWM_Start_DMA+0x11e>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009204:	e006      	b.n	8009214 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2202      	movs	r2, #2
 800920a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800920e:	e001      	b.n	8009214 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e118      	b.n	8009446 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b0c      	cmp	r3, #12
 8009218:	f200 80ae 	bhi.w	8009378 <HAL_TIM_PWM_Start_DMA+0x290>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009259 	.word	0x08009259
 8009228:	08009379 	.word	0x08009379
 800922c:	08009379 	.word	0x08009379
 8009230:	08009379 	.word	0x08009379
 8009234:	080092a1 	.word	0x080092a1
 8009238:	08009379 	.word	0x08009379
 800923c:	08009379 	.word	0x08009379
 8009240:	08009379 	.word	0x08009379
 8009244:	080092e9 	.word	0x080092e9
 8009248:	08009379 	.word	0x08009379
 800924c:	08009379 	.word	0x08009379
 8009250:	08009379 	.word	0x08009379
 8009254:	08009331 	.word	0x08009331
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925c:	4a7c      	ldr	r2, [pc, #496]	; (8009450 <HAL_TIM_PWM_Start_DMA+0x368>)
 800925e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	4a7b      	ldr	r2, [pc, #492]	; (8009454 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926c:	4a7a      	ldr	r2, [pc, #488]	; (8009458 <HAL_TIM_PWM_Start_DMA+0x370>)
 800926e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3334      	adds	r3, #52	; 0x34
 800927c:	461a      	mov	r2, r3
 800927e:	887b      	ldrh	r3, [r7, #2]
 8009280:	f7fd feae 	bl	8006fe0 <HAL_DMA_Start_IT>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e0db      	b.n	8009446 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68da      	ldr	r2, [r3, #12]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800929c:	60da      	str	r2, [r3, #12]
      break;
 800929e:	e06e      	b.n	800937e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a4:	4a6a      	ldr	r2, [pc, #424]	; (8009450 <HAL_TIM_PWM_Start_DMA+0x368>)
 80092a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ac:	4a69      	ldr	r2, [pc, #420]	; (8009454 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80092ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b4:	4a68      	ldr	r2, [pc, #416]	; (8009458 <HAL_TIM_PWM_Start_DMA+0x370>)
 80092b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3338      	adds	r3, #56	; 0x38
 80092c4:	461a      	mov	r2, r3
 80092c6:	887b      	ldrh	r3, [r7, #2]
 80092c8:	f7fd fe8a 	bl	8006fe0 <HAL_DMA_Start_IT>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e0b7      	b.n	8009446 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092e4:	60da      	str	r2, [r3, #12]
      break;
 80092e6:	e04a      	b.n	800937e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ec:	4a58      	ldr	r2, [pc, #352]	; (8009450 <HAL_TIM_PWM_Start_DMA+0x368>)
 80092ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	4a57      	ldr	r2, [pc, #348]	; (8009454 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80092f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	4a56      	ldr	r2, [pc, #344]	; (8009458 <HAL_TIM_PWM_Start_DMA+0x370>)
 80092fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	333c      	adds	r3, #60	; 0x3c
 800930c:	461a      	mov	r2, r3
 800930e:	887b      	ldrh	r3, [r7, #2]
 8009310:	f7fd fe66 	bl	8006fe0 <HAL_DMA_Start_IT>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e093      	b.n	8009446 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800932c:	60da      	str	r2, [r3, #12]
      break;
 800932e:	e026      	b.n	800937e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009334:	4a46      	ldr	r2, [pc, #280]	; (8009450 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009336:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	4a45      	ldr	r2, [pc, #276]	; (8009454 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800933e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009344:	4a44      	ldr	r2, [pc, #272]	; (8009458 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009346:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800934c:	6879      	ldr	r1, [r7, #4]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3340      	adds	r3, #64	; 0x40
 8009354:	461a      	mov	r2, r3
 8009356:	887b      	ldrh	r3, [r7, #2]
 8009358:	f7fd fe42 	bl	8006fe0 <HAL_DMA_Start_IT>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e06f      	b.n	8009446 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009374:	60da      	str	r2, [r3, #12]
      break;
 8009376:	e002      	b.n	800937e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	75fb      	strb	r3, [r7, #23]
      break;
 800937c:	bf00      	nop
  }

  if (status == HAL_OK)
 800937e:	7dfb      	ldrb	r3, [r7, #23]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d15f      	bne.n	8009444 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2201      	movs	r2, #1
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	4618      	mov	r0, r3
 800938e:	f001 fb47 	bl	800aa20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a31      	ldr	r2, [pc, #196]	; (800945c <HAL_TIM_PWM_Start_DMA+0x374>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d004      	beq.n	80093a6 <HAL_TIM_PWM_Start_DMA+0x2be>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a2f      	ldr	r2, [pc, #188]	; (8009460 <HAL_TIM_PWM_Start_DMA+0x378>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d101      	bne.n	80093aa <HAL_TIM_PWM_Start_DMA+0x2c2>
 80093a6:	2301      	movs	r3, #1
 80093a8:	e000      	b.n	80093ac <HAL_TIM_PWM_Start_DMA+0x2c4>
 80093aa:	2300      	movs	r3, #0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d007      	beq.n	80093c0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a25      	ldr	r2, [pc, #148]	; (800945c <HAL_TIM_PWM_Start_DMA+0x374>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d022      	beq.n	8009410 <HAL_TIM_PWM_Start_DMA+0x328>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d2:	d01d      	beq.n	8009410 <HAL_TIM_PWM_Start_DMA+0x328>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a22      	ldr	r2, [pc, #136]	; (8009464 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d018      	beq.n	8009410 <HAL_TIM_PWM_Start_DMA+0x328>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a21      	ldr	r2, [pc, #132]	; (8009468 <HAL_TIM_PWM_Start_DMA+0x380>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d013      	beq.n	8009410 <HAL_TIM_PWM_Start_DMA+0x328>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a1f      	ldr	r2, [pc, #124]	; (800946c <HAL_TIM_PWM_Start_DMA+0x384>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d00e      	beq.n	8009410 <HAL_TIM_PWM_Start_DMA+0x328>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a1a      	ldr	r2, [pc, #104]	; (8009460 <HAL_TIM_PWM_Start_DMA+0x378>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d009      	beq.n	8009410 <HAL_TIM_PWM_Start_DMA+0x328>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a1b      	ldr	r2, [pc, #108]	; (8009470 <HAL_TIM_PWM_Start_DMA+0x388>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d004      	beq.n	8009410 <HAL_TIM_PWM_Start_DMA+0x328>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a1a      	ldr	r2, [pc, #104]	; (8009474 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d111      	bne.n	8009434 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	2b06      	cmp	r3, #6
 8009420:	d010      	beq.n	8009444 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f042 0201 	orr.w	r2, r2, #1
 8009430:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009432:	e007      	b.n	8009444 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0201 	orr.w	r2, r2, #1
 8009442:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009444:	7dfb      	ldrb	r3, [r7, #23]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	0800a0e7 	.word	0x0800a0e7
 8009454:	0800a18f 	.word	0x0800a18f
 8009458:	0800a055 	.word	0x0800a055
 800945c:	40010000 	.word	0x40010000
 8009460:	40010400 	.word	0x40010400
 8009464:	40000400 	.word	0x40000400
 8009468:	40000800 	.word	0x40000800
 800946c:	40000c00 	.word	0x40000c00
 8009470:	40014000 	.word	0x40014000
 8009474:	40001800 	.word	0x40001800

08009478 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b0c      	cmp	r3, #12
 800948a:	d855      	bhi.n	8009538 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800948c:	a201      	add	r2, pc, #4	; (adr r2, 8009494 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800948e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009492:	bf00      	nop
 8009494:	080094c9 	.word	0x080094c9
 8009498:	08009539 	.word	0x08009539
 800949c:	08009539 	.word	0x08009539
 80094a0:	08009539 	.word	0x08009539
 80094a4:	080094e5 	.word	0x080094e5
 80094a8:	08009539 	.word	0x08009539
 80094ac:	08009539 	.word	0x08009539
 80094b0:	08009539 	.word	0x08009539
 80094b4:	08009501 	.word	0x08009501
 80094b8:	08009539 	.word	0x08009539
 80094bc:	08009539 	.word	0x08009539
 80094c0:	08009539 	.word	0x08009539
 80094c4:	0800951d 	.word	0x0800951d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80094d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fd fe47 	bl	8007170 <HAL_DMA_Abort_IT>
      break;
 80094e2:	e02c      	b.n	800953e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fd fe39 	bl	8007170 <HAL_DMA_Abort_IT>
      break;
 80094fe:	e01e      	b.n	800953e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800950e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	4618      	mov	r0, r3
 8009516:	f7fd fe2b 	bl	8007170 <HAL_DMA_Abort_IT>
      break;
 800951a:	e010      	b.n	800953e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800952a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009530:	4618      	mov	r0, r3
 8009532:	f7fd fe1d 	bl	8007170 <HAL_DMA_Abort_IT>
      break;
 8009536:	e002      	b.n	800953e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	73fb      	strb	r3, [r7, #15]
      break;
 800953c:	bf00      	nop
  }

  if (status == HAL_OK)
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d161      	bne.n	8009608 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2200      	movs	r2, #0
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f001 fa67 	bl	800aa20 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a2f      	ldr	r2, [pc, #188]	; (8009614 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d004      	beq.n	8009566 <HAL_TIM_PWM_Stop_DMA+0xee>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a2d      	ldr	r2, [pc, #180]	; (8009618 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d101      	bne.n	800956a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8009566:	2301      	movs	r3, #1
 8009568:	e000      	b.n	800956c <HAL_TIM_PWM_Stop_DMA+0xf4>
 800956a:	2300      	movs	r3, #0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d017      	beq.n	80095a0 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6a1a      	ldr	r2, [r3, #32]
 8009576:	f241 1311 	movw	r3, #4369	; 0x1111
 800957a:	4013      	ands	r3, r2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10f      	bne.n	80095a0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6a1a      	ldr	r2, [r3, #32]
 8009586:	f240 4344 	movw	r3, #1092	; 0x444
 800958a:	4013      	ands	r3, r2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d107      	bne.n	80095a0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800959e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6a1a      	ldr	r2, [r3, #32]
 80095a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80095aa:	4013      	ands	r3, r2
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10f      	bne.n	80095d0 <HAL_TIM_PWM_Stop_DMA+0x158>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6a1a      	ldr	r2, [r3, #32]
 80095b6:	f240 4344 	movw	r3, #1092	; 0x444
 80095ba:	4013      	ands	r3, r2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d107      	bne.n	80095d0 <HAL_TIM_PWM_Stop_DMA+0x158>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0201 	bic.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d104      	bne.n	80095e0 <HAL_TIM_PWM_Stop_DMA+0x168>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095de:	e013      	b.n	8009608 <HAL_TIM_PWM_Stop_DMA+0x190>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d104      	bne.n	80095f0 <HAL_TIM_PWM_Stop_DMA+0x178>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095ee:	e00b      	b.n	8009608 <HAL_TIM_PWM_Stop_DMA+0x190>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b08      	cmp	r3, #8
 80095f4:	d104      	bne.n	8009600 <HAL_TIM_PWM_Stop_DMA+0x188>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095fe:	e003      	b.n	8009608 <HAL_TIM_PWM_Stop_DMA+0x190>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	40010000 	.word	0x40010000
 8009618:	40010400 	.word	0x40010400

0800961c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e041      	b.n	80096b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f839 	bl	80096ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f000 fdcc 	bl	800a1f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
	...

080096d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d104      	bne.n	80096ee <HAL_TIM_IC_Start_IT+0x1e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	e013      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x46>
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d104      	bne.n	80096fe <HAL_TIM_IC_Start_IT+0x2e>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	e00b      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x46>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b08      	cmp	r3, #8
 8009702:	d104      	bne.n	800970e <HAL_TIM_IC_Start_IT+0x3e>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800970a:	b2db      	uxtb	r3, r3
 800970c:	e003      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x46>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009714:	b2db      	uxtb	r3, r3
 8009716:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <HAL_TIM_IC_Start_IT+0x58>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009724:	b2db      	uxtb	r3, r3
 8009726:	e013      	b.n	8009750 <HAL_TIM_IC_Start_IT+0x80>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b04      	cmp	r3, #4
 800972c:	d104      	bne.n	8009738 <HAL_TIM_IC_Start_IT+0x68>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009734:	b2db      	uxtb	r3, r3
 8009736:	e00b      	b.n	8009750 <HAL_TIM_IC_Start_IT+0x80>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b08      	cmp	r3, #8
 800973c:	d104      	bne.n	8009748 <HAL_TIM_IC_Start_IT+0x78>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009744:	b2db      	uxtb	r3, r3
 8009746:	e003      	b.n	8009750 <HAL_TIM_IC_Start_IT+0x80>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800974e:	b2db      	uxtb	r3, r3
 8009750:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d102      	bne.n	800975e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009758:	7b7b      	ldrb	r3, [r7, #13]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d001      	beq.n	8009762 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e0cc      	b.n	80098fc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d104      	bne.n	8009772 <HAL_TIM_IC_Start_IT+0xa2>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009770:	e013      	b.n	800979a <HAL_TIM_IC_Start_IT+0xca>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b04      	cmp	r3, #4
 8009776:	d104      	bne.n	8009782 <HAL_TIM_IC_Start_IT+0xb2>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009780:	e00b      	b.n	800979a <HAL_TIM_IC_Start_IT+0xca>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b08      	cmp	r3, #8
 8009786:	d104      	bne.n	8009792 <HAL_TIM_IC_Start_IT+0xc2>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009790:	e003      	b.n	800979a <HAL_TIM_IC_Start_IT+0xca>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2202      	movs	r2, #2
 8009796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <HAL_TIM_IC_Start_IT+0xda>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097a8:	e013      	b.n	80097d2 <HAL_TIM_IC_Start_IT+0x102>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d104      	bne.n	80097ba <HAL_TIM_IC_Start_IT+0xea>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097b8:	e00b      	b.n	80097d2 <HAL_TIM_IC_Start_IT+0x102>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d104      	bne.n	80097ca <HAL_TIM_IC_Start_IT+0xfa>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c8:	e003      	b.n	80097d2 <HAL_TIM_IC_Start_IT+0x102>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2202      	movs	r2, #2
 80097ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b0c      	cmp	r3, #12
 80097d6:	d841      	bhi.n	800985c <HAL_TIM_IC_Start_IT+0x18c>
 80097d8:	a201      	add	r2, pc, #4	; (adr r2, 80097e0 <HAL_TIM_IC_Start_IT+0x110>)
 80097da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097de:	bf00      	nop
 80097e0:	08009815 	.word	0x08009815
 80097e4:	0800985d 	.word	0x0800985d
 80097e8:	0800985d 	.word	0x0800985d
 80097ec:	0800985d 	.word	0x0800985d
 80097f0:	08009827 	.word	0x08009827
 80097f4:	0800985d 	.word	0x0800985d
 80097f8:	0800985d 	.word	0x0800985d
 80097fc:	0800985d 	.word	0x0800985d
 8009800:	08009839 	.word	0x08009839
 8009804:	0800985d 	.word	0x0800985d
 8009808:	0800985d 	.word	0x0800985d
 800980c:	0800985d 	.word	0x0800985d
 8009810:	0800984b 	.word	0x0800984b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0202 	orr.w	r2, r2, #2
 8009822:	60da      	str	r2, [r3, #12]
      break;
 8009824:	e01d      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f042 0204 	orr.w	r2, r2, #4
 8009834:	60da      	str	r2, [r3, #12]
      break;
 8009836:	e014      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f042 0208 	orr.w	r2, r2, #8
 8009846:	60da      	str	r2, [r3, #12]
      break;
 8009848:	e00b      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68da      	ldr	r2, [r3, #12]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0210 	orr.w	r2, r2, #16
 8009858:	60da      	str	r2, [r3, #12]
      break;
 800985a:	e002      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	73fb      	strb	r3, [r7, #15]
      break;
 8009860:	bf00      	nop
  }

  if (status == HAL_OK)
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d148      	bne.n	80098fa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2201      	movs	r2, #1
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	4618      	mov	r0, r3
 8009872:	f001 f8d5 	bl	800aa20 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a22      	ldr	r2, [pc, #136]	; (8009904 <HAL_TIM_IC_Start_IT+0x234>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d022      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009888:	d01d      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a1e      	ldr	r2, [pc, #120]	; (8009908 <HAL_TIM_IC_Start_IT+0x238>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d018      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a1c      	ldr	r2, [pc, #112]	; (800990c <HAL_TIM_IC_Start_IT+0x23c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d013      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a1b      	ldr	r2, [pc, #108]	; (8009910 <HAL_TIM_IC_Start_IT+0x240>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d00e      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a19      	ldr	r2, [pc, #100]	; (8009914 <HAL_TIM_IC_Start_IT+0x244>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d009      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a18      	ldr	r2, [pc, #96]	; (8009918 <HAL_TIM_IC_Start_IT+0x248>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d004      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a16      	ldr	r2, [pc, #88]	; (800991c <HAL_TIM_IC_Start_IT+0x24c>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d111      	bne.n	80098ea <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	f003 0307 	and.w	r3, r3, #7
 80098d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b06      	cmp	r3, #6
 80098d6:	d010      	beq.n	80098fa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0201 	orr.w	r2, r2, #1
 80098e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e8:	e007      	b.n	80098fa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0201 	orr.w	r2, r2, #1
 80098f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	40010000 	.word	0x40010000
 8009908:	40000400 	.word	0x40000400
 800990c:	40000800 	.word	0x40000800
 8009910:	40000c00 	.word	0x40000c00
 8009914:	40010400 	.word	0x40010400
 8009918:	40014000 	.word	0x40014000
 800991c:	40001800 	.word	0x40001800

08009920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b02      	cmp	r3, #2
 8009934:	d122      	bne.n	800997c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	f003 0302 	and.w	r3, r3, #2
 8009940:	2b02      	cmp	r3, #2
 8009942:	d11b      	bne.n	800997c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f06f 0202 	mvn.w	r2, #2
 800994c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	f003 0303 	and.w	r3, r3, #3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d003      	beq.n	800996a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7f7 fc68 	bl	8001238 <HAL_TIM_IC_CaptureCallback>
 8009968:	e005      	b.n	8009976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fb54 	bl	800a018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7fc fbed 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	f003 0304 	and.w	r3, r3, #4
 8009986:	2b04      	cmp	r3, #4
 8009988:	d122      	bne.n	80099d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b04      	cmp	r3, #4
 8009996:	d11b      	bne.n	80099d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f06f 0204 	mvn.w	r2, #4
 80099a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7f7 fc3e 	bl	8001238 <HAL_TIM_IC_CaptureCallback>
 80099bc:	e005      	b.n	80099ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fb2a 	bl	800a018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7fc fbc3 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	f003 0308 	and.w	r3, r3, #8
 80099da:	2b08      	cmp	r3, #8
 80099dc:	d122      	bne.n	8009a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f003 0308 	and.w	r3, r3, #8
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d11b      	bne.n	8009a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f06f 0208 	mvn.w	r2, #8
 80099f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2204      	movs	r2, #4
 80099fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	69db      	ldr	r3, [r3, #28]
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7f7 fc14 	bl	8001238 <HAL_TIM_IC_CaptureCallback>
 8009a10:	e005      	b.n	8009a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fb00 	bl	800a018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7fc fb99 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	f003 0310 	and.w	r3, r3, #16
 8009a2e:	2b10      	cmp	r3, #16
 8009a30:	d122      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	f003 0310 	and.w	r3, r3, #16
 8009a3c:	2b10      	cmp	r3, #16
 8009a3e:	d11b      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f06f 0210 	mvn.w	r2, #16
 8009a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7f7 fbea 	bl	8001238 <HAL_TIM_IC_CaptureCallback>
 8009a64:	e005      	b.n	8009a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fad6 	bl	800a018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7fc fb6f 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d10e      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d107      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f06f 0201 	mvn.w	r2, #1
 8009a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fab0 	bl	800a004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aae:	2b80      	cmp	r3, #128	; 0x80
 8009ab0:	d10e      	bne.n	8009ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009abc:	2b80      	cmp	r3, #128	; 0x80
 8009abe:	d107      	bne.n	8009ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 f8a6 	bl	800ac1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ada:	2b40      	cmp	r3, #64	; 0x40
 8009adc:	d10e      	bne.n	8009afc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae8:	2b40      	cmp	r3, #64	; 0x40
 8009aea:	d107      	bne.n	8009afc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fa98 	bl	800a02c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	f003 0320 	and.w	r3, r3, #32
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d10e      	bne.n	8009b28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f003 0320 	and.w	r3, r3, #32
 8009b14:	2b20      	cmp	r3, #32
 8009b16:	d107      	bne.n	8009b28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f06f 0220 	mvn.w	r2, #32
 8009b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f001 f870 	bl	800ac08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d101      	bne.n	8009b4e <HAL_TIM_IC_ConfigChannel+0x1e>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e088      	b.n	8009c60 <HAL_TIM_IC_ConfigChannel+0x130>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d11b      	bne.n	8009b94 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	6819      	ldr	r1, [r3, #0]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f000 fd94 	bl	800a698 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	699a      	ldr	r2, [r3, #24]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f022 020c 	bic.w	r2, r2, #12
 8009b7e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6999      	ldr	r1, [r3, #24]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	689a      	ldr	r2, [r3, #8]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	619a      	str	r2, [r3, #24]
 8009b92:	e060      	b.n	8009c56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d11c      	bne.n	8009bd4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6818      	ldr	r0, [r3, #0]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	6819      	ldr	r1, [r3, #0]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f000 fe18 	bl	800a7de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	699a      	ldr	r2, [r3, #24]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009bbc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	6999      	ldr	r1, [r3, #24]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	021a      	lsls	r2, r3, #8
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	619a      	str	r2, [r3, #24]
 8009bd2:	e040      	b.n	8009c56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	d11b      	bne.n	8009c12 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	6819      	ldr	r1, [r3, #0]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	f000 fe65 	bl	800a8b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	69da      	ldr	r2, [r3, #28]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f022 020c 	bic.w	r2, r2, #12
 8009bfc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69d9      	ldr	r1, [r3, #28]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	689a      	ldr	r2, [r3, #8]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	61da      	str	r2, [r3, #28]
 8009c10:	e021      	b.n	8009c56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b0c      	cmp	r3, #12
 8009c16:	d11c      	bne.n	8009c52 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	6819      	ldr	r1, [r3, #0]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f000 fe82 	bl	800a930 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	69da      	ldr	r2, [r3, #28]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009c3a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	69d9      	ldr	r1, [r3, #28]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	021a      	lsls	r2, r3, #8
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	61da      	str	r2, [r3, #28]
 8009c50:	e001      	b.n	8009c56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d101      	bne.n	8009c86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c82:	2302      	movs	r3, #2
 8009c84:	e0ae      	b.n	8009de4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b0c      	cmp	r3, #12
 8009c92:	f200 809f 	bhi.w	8009dd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009c96:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9c:	08009cd1 	.word	0x08009cd1
 8009ca0:	08009dd5 	.word	0x08009dd5
 8009ca4:	08009dd5 	.word	0x08009dd5
 8009ca8:	08009dd5 	.word	0x08009dd5
 8009cac:	08009d11 	.word	0x08009d11
 8009cb0:	08009dd5 	.word	0x08009dd5
 8009cb4:	08009dd5 	.word	0x08009dd5
 8009cb8:	08009dd5 	.word	0x08009dd5
 8009cbc:	08009d53 	.word	0x08009d53
 8009cc0:	08009dd5 	.word	0x08009dd5
 8009cc4:	08009dd5 	.word	0x08009dd5
 8009cc8:	08009dd5 	.word	0x08009dd5
 8009ccc:	08009d93 	.word	0x08009d93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68b9      	ldr	r1, [r7, #8]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 fb2e 	bl	800a338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	699a      	ldr	r2, [r3, #24]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f042 0208 	orr.w	r2, r2, #8
 8009cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 0204 	bic.w	r2, r2, #4
 8009cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6999      	ldr	r1, [r3, #24]
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	691a      	ldr	r2, [r3, #16]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	619a      	str	r2, [r3, #24]
      break;
 8009d0e:	e064      	b.n	8009dda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 fb7e 	bl	800a418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	699a      	ldr	r2, [r3, #24]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	699a      	ldr	r2, [r3, #24]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6999      	ldr	r1, [r3, #24]
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	021a      	lsls	r2, r3, #8
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	619a      	str	r2, [r3, #24]
      break;
 8009d50:	e043      	b.n	8009dda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68b9      	ldr	r1, [r7, #8]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fbd3 	bl	800a504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69da      	ldr	r2, [r3, #28]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f042 0208 	orr.w	r2, r2, #8
 8009d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69da      	ldr	r2, [r3, #28]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f022 0204 	bic.w	r2, r2, #4
 8009d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	69d9      	ldr	r1, [r3, #28]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	691a      	ldr	r2, [r3, #16]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	61da      	str	r2, [r3, #28]
      break;
 8009d90:	e023      	b.n	8009dda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68b9      	ldr	r1, [r7, #8]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 fc27 	bl	800a5ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	69da      	ldr	r2, [r3, #28]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	69da      	ldr	r2, [r3, #28]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	69d9      	ldr	r1, [r3, #28]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	021a      	lsls	r2, r3, #8
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	61da      	str	r2, [r3, #28]
      break;
 8009dd2:	e002      	b.n	8009dda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <HAL_TIM_ConfigClockSource+0x1c>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e0b4      	b.n	8009f72 <HAL_TIM_ConfigClockSource+0x186>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e40:	d03e      	beq.n	8009ec0 <HAL_TIM_ConfigClockSource+0xd4>
 8009e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e46:	f200 8087 	bhi.w	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4e:	f000 8086 	beq.w	8009f5e <HAL_TIM_ConfigClockSource+0x172>
 8009e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e56:	d87f      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e58:	2b70      	cmp	r3, #112	; 0x70
 8009e5a:	d01a      	beq.n	8009e92 <HAL_TIM_ConfigClockSource+0xa6>
 8009e5c:	2b70      	cmp	r3, #112	; 0x70
 8009e5e:	d87b      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e60:	2b60      	cmp	r3, #96	; 0x60
 8009e62:	d050      	beq.n	8009f06 <HAL_TIM_ConfigClockSource+0x11a>
 8009e64:	2b60      	cmp	r3, #96	; 0x60
 8009e66:	d877      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e68:	2b50      	cmp	r3, #80	; 0x50
 8009e6a:	d03c      	beq.n	8009ee6 <HAL_TIM_ConfigClockSource+0xfa>
 8009e6c:	2b50      	cmp	r3, #80	; 0x50
 8009e6e:	d873      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e70:	2b40      	cmp	r3, #64	; 0x40
 8009e72:	d058      	beq.n	8009f26 <HAL_TIM_ConfigClockSource+0x13a>
 8009e74:	2b40      	cmp	r3, #64	; 0x40
 8009e76:	d86f      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e78:	2b30      	cmp	r3, #48	; 0x30
 8009e7a:	d064      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15a>
 8009e7c:	2b30      	cmp	r3, #48	; 0x30
 8009e7e:	d86b      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e80:	2b20      	cmp	r3, #32
 8009e82:	d060      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15a>
 8009e84:	2b20      	cmp	r3, #32
 8009e86:	d867      	bhi.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d05c      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15a>
 8009e8c:	2b10      	cmp	r3, #16
 8009e8e:	d05a      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x15a>
 8009e90:	e062      	b.n	8009f58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6818      	ldr	r0, [r3, #0]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	6899      	ldr	r1, [r3, #8]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f000 fd9d 	bl	800a9e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	609a      	str	r2, [r3, #8]
      break;
 8009ebe:	e04f      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	6899      	ldr	r1, [r3, #8]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f000 fd86 	bl	800a9e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689a      	ldr	r2, [r3, #8]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ee2:	609a      	str	r2, [r3, #8]
      break;
 8009ee4:	e03c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	6859      	ldr	r1, [r3, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f000 fc44 	bl	800a780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2150      	movs	r1, #80	; 0x50
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 fd53 	bl	800a9aa <TIM_ITRx_SetConfig>
      break;
 8009f04:	e02c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	6859      	ldr	r1, [r3, #4]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	461a      	mov	r2, r3
 8009f14:	f000 fca0 	bl	800a858 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2160      	movs	r1, #96	; 0x60
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 fd43 	bl	800a9aa <TIM_ITRx_SetConfig>
      break;
 8009f24:	e01c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	6859      	ldr	r1, [r3, #4]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f000 fc24 	bl	800a780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2140      	movs	r1, #64	; 0x40
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fd33 	bl	800a9aa <TIM_ITRx_SetConfig>
      break;
 8009f44:	e00c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f000 fd2a 	bl	800a9aa <TIM_ITRx_SetConfig>
      break;
 8009f56:	e003      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f5c:	e000      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b0c      	cmp	r3, #12
 8009f8e:	d831      	bhi.n	8009ff4 <HAL_TIM_ReadCapturedValue+0x78>
 8009f90:	a201      	add	r2, pc, #4	; (adr r2, 8009f98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f96:	bf00      	nop
 8009f98:	08009fcd 	.word	0x08009fcd
 8009f9c:	08009ff5 	.word	0x08009ff5
 8009fa0:	08009ff5 	.word	0x08009ff5
 8009fa4:	08009ff5 	.word	0x08009ff5
 8009fa8:	08009fd7 	.word	0x08009fd7
 8009fac:	08009ff5 	.word	0x08009ff5
 8009fb0:	08009ff5 	.word	0x08009ff5
 8009fb4:	08009ff5 	.word	0x08009ff5
 8009fb8:	08009fe1 	.word	0x08009fe1
 8009fbc:	08009ff5 	.word	0x08009ff5
 8009fc0:	08009ff5 	.word	0x08009ff5
 8009fc4:	08009ff5 	.word	0x08009ff5
 8009fc8:	08009feb 	.word	0x08009feb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd2:	60fb      	str	r3, [r7, #12]

      break;
 8009fd4:	e00f      	b.n	8009ff6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fdc:	60fb      	str	r3, [r7, #12]

      break;
 8009fde:	e00a      	b.n	8009ff6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe6:	60fb      	str	r3, [r7, #12]

      break;
 8009fe8:	e005      	b.n	8009ff6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	60fb      	str	r3, [r7, #12]

      break;
 8009ff2:	e000      	b.n	8009ff6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009ff4:	bf00      	nop
  }

  return tmpreg;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a060:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d107      	bne.n	800a07c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2201      	movs	r2, #1
 800a070:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a07a:	e02a      	b.n	800a0d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	429a      	cmp	r2, r3
 800a084:	d107      	bne.n	800a096 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2202      	movs	r2, #2
 800a08a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a094:	e01d      	b.n	800a0d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d107      	bne.n	800a0b0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2204      	movs	r2, #4
 800a0a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0ae:	e010      	b.n	800a0d2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d107      	bne.n	800a0ca <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2208      	movs	r2, #8
 800a0be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0c8:	e003      	b.n	800a0d2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f7ff ffb4 	bl	800a040 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	771a      	strb	r2, [r3, #28]
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d10b      	bne.n	800a116 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2201      	movs	r2, #1
 800a102:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d136      	bne.n	800a17a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a114:	e031      	b.n	800a17a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d10b      	bne.n	800a138 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2202      	movs	r2, #2
 800a124:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d125      	bne.n	800a17a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a136:	e020      	b.n	800a17a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d10b      	bne.n	800a15a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2204      	movs	r2, #4
 800a146:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	69db      	ldr	r3, [r3, #28]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d114      	bne.n	800a17a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a158:	e00f      	b.n	800a17a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d10a      	bne.n	800a17a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2208      	movs	r2, #8
 800a168:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d103      	bne.n	800a17a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f7fb ffe8 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	771a      	strb	r2, [r3, #28]
}
 800a186:	bf00      	nop
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d103      	bne.n	800a1ae <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	771a      	strb	r2, [r3, #28]
 800a1ac:	e019      	b.n	800a1e2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d103      	bne.n	800a1c0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	771a      	strb	r2, [r3, #28]
 800a1be:	e010      	b.n	800a1e2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d103      	bne.n	800a1d2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2204      	movs	r2, #4
 800a1ce:	771a      	strb	r2, [r3, #28]
 800a1d0:	e007      	b.n	800a1e2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d102      	bne.n	800a1e2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2208      	movs	r2, #8
 800a1e0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f7fc f810 	bl	8006208 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	771a      	strb	r2, [r3, #28]
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a40      	ldr	r2, [pc, #256]	; (800a30c <TIM_Base_SetConfig+0x114>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d013      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a216:	d00f      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a3d      	ldr	r2, [pc, #244]	; (800a310 <TIM_Base_SetConfig+0x118>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00b      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a3c      	ldr	r2, [pc, #240]	; (800a314 <TIM_Base_SetConfig+0x11c>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d007      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a3b      	ldr	r2, [pc, #236]	; (800a318 <TIM_Base_SetConfig+0x120>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d003      	beq.n	800a238 <TIM_Base_SetConfig+0x40>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a3a      	ldr	r2, [pc, #232]	; (800a31c <TIM_Base_SetConfig+0x124>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d108      	bne.n	800a24a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a2f      	ldr	r2, [pc, #188]	; (800a30c <TIM_Base_SetConfig+0x114>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d02b      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a258:	d027      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a2c      	ldr	r2, [pc, #176]	; (800a310 <TIM_Base_SetConfig+0x118>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d023      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a2b      	ldr	r2, [pc, #172]	; (800a314 <TIM_Base_SetConfig+0x11c>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d01f      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a2a      	ldr	r2, [pc, #168]	; (800a318 <TIM_Base_SetConfig+0x120>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d01b      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a29      	ldr	r2, [pc, #164]	; (800a31c <TIM_Base_SetConfig+0x124>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d017      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a28      	ldr	r2, [pc, #160]	; (800a320 <TIM_Base_SetConfig+0x128>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d013      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a27      	ldr	r2, [pc, #156]	; (800a324 <TIM_Base_SetConfig+0x12c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d00f      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a26      	ldr	r2, [pc, #152]	; (800a328 <TIM_Base_SetConfig+0x130>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d00b      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a25      	ldr	r2, [pc, #148]	; (800a32c <TIM_Base_SetConfig+0x134>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d007      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a24      	ldr	r2, [pc, #144]	; (800a330 <TIM_Base_SetConfig+0x138>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d003      	beq.n	800a2aa <TIM_Base_SetConfig+0xb2>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a23      	ldr	r2, [pc, #140]	; (800a334 <TIM_Base_SetConfig+0x13c>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d108      	bne.n	800a2bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a0a      	ldr	r2, [pc, #40]	; (800a30c <TIM_Base_SetConfig+0x114>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d003      	beq.n	800a2f0 <TIM_Base_SetConfig+0xf8>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a0c      	ldr	r2, [pc, #48]	; (800a31c <TIM_Base_SetConfig+0x124>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d103      	bne.n	800a2f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	691a      	ldr	r2, [r3, #16]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	615a      	str	r2, [r3, #20]
}
 800a2fe:	bf00      	nop
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	40010000 	.word	0x40010000
 800a310:	40000400 	.word	0x40000400
 800a314:	40000800 	.word	0x40000800
 800a318:	40000c00 	.word	0x40000c00
 800a31c:	40010400 	.word	0x40010400
 800a320:	40014000 	.word	0x40014000
 800a324:	40014400 	.word	0x40014400
 800a328:	40014800 	.word	0x40014800
 800a32c:	40001800 	.word	0x40001800
 800a330:	40001c00 	.word	0x40001c00
 800a334:	40002000 	.word	0x40002000

0800a338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a338:	b480      	push	{r7}
 800a33a:	b087      	sub	sp, #28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	f023 0201 	bic.w	r2, r3, #1
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f023 0303 	bic.w	r3, r3, #3
 800a36e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	4313      	orrs	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f023 0302 	bic.w	r3, r3, #2
 800a380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	4313      	orrs	r3, r2
 800a38a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a20      	ldr	r2, [pc, #128]	; (800a410 <TIM_OC1_SetConfig+0xd8>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d003      	beq.n	800a39c <TIM_OC1_SetConfig+0x64>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a1f      	ldr	r2, [pc, #124]	; (800a414 <TIM_OC1_SetConfig+0xdc>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d10c      	bne.n	800a3b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f023 0308 	bic.w	r3, r3, #8
 800a3a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f023 0304 	bic.w	r3, r3, #4
 800a3b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a15      	ldr	r2, [pc, #84]	; (800a410 <TIM_OC1_SetConfig+0xd8>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d003      	beq.n	800a3c6 <TIM_OC1_SetConfig+0x8e>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a14      	ldr	r2, [pc, #80]	; (800a414 <TIM_OC1_SetConfig+0xdc>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d111      	bne.n	800a3ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	621a      	str	r2, [r3, #32]
}
 800a404:	bf00      	nop
 800a406:	371c      	adds	r7, #28
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	40010000 	.word	0x40010000
 800a414:	40010400 	.word	0x40010400

0800a418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a418:	b480      	push	{r7}
 800a41a:	b087      	sub	sp, #28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	f023 0210 	bic.w	r2, r3, #16
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a44e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	021b      	lsls	r3, r3, #8
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	4313      	orrs	r3, r2
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f023 0320 	bic.w	r3, r3, #32
 800a462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	011b      	lsls	r3, r3, #4
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a22      	ldr	r2, [pc, #136]	; (800a4fc <TIM_OC2_SetConfig+0xe4>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d003      	beq.n	800a480 <TIM_OC2_SetConfig+0x68>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a21      	ldr	r2, [pc, #132]	; (800a500 <TIM_OC2_SetConfig+0xe8>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d10d      	bne.n	800a49c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	011b      	lsls	r3, r3, #4
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	4313      	orrs	r3, r2
 800a492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a49a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a17      	ldr	r2, [pc, #92]	; (800a4fc <TIM_OC2_SetConfig+0xe4>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d003      	beq.n	800a4ac <TIM_OC2_SetConfig+0x94>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a16      	ldr	r2, [pc, #88]	; (800a500 <TIM_OC2_SetConfig+0xe8>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d113      	bne.n	800a4d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	621a      	str	r2, [r3, #32]
}
 800a4ee:	bf00      	nop
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	40010000 	.word	0x40010000
 800a500:	40010400 	.word	0x40010400

0800a504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a504:	b480      	push	{r7}
 800a506:	b087      	sub	sp, #28
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a1b      	ldr	r3, [r3, #32]
 800a51e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 0303 	bic.w	r3, r3, #3
 800a53a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	4313      	orrs	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a54c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	021b      	lsls	r3, r3, #8
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	4313      	orrs	r3, r2
 800a558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a21      	ldr	r2, [pc, #132]	; (800a5e4 <TIM_OC3_SetConfig+0xe0>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d003      	beq.n	800a56a <TIM_OC3_SetConfig+0x66>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4a20      	ldr	r2, [pc, #128]	; (800a5e8 <TIM_OC3_SetConfig+0xe4>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d10d      	bne.n	800a586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	021b      	lsls	r3, r3, #8
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a16      	ldr	r2, [pc, #88]	; (800a5e4 <TIM_OC3_SetConfig+0xe0>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d003      	beq.n	800a596 <TIM_OC3_SetConfig+0x92>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a15      	ldr	r2, [pc, #84]	; (800a5e8 <TIM_OC3_SetConfig+0xe4>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d113      	bne.n	800a5be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a59c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	011b      	lsls	r3, r3, #4
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	621a      	str	r2, [r3, #32]
}
 800a5d8:	bf00      	nop
 800a5da:	371c      	adds	r7, #28
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	40010000 	.word	0x40010000
 800a5e8:	40010400 	.word	0x40010400

0800a5ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a61a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	021b      	lsls	r3, r3, #8
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	031b      	lsls	r3, r3, #12
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	4313      	orrs	r3, r2
 800a642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a12      	ldr	r2, [pc, #72]	; (800a690 <TIM_OC4_SetConfig+0xa4>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d003      	beq.n	800a654 <TIM_OC4_SetConfig+0x68>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a11      	ldr	r2, [pc, #68]	; (800a694 <TIM_OC4_SetConfig+0xa8>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d109      	bne.n	800a668 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a65a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	019b      	lsls	r3, r3, #6
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	4313      	orrs	r3, r2
 800a666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	621a      	str	r2, [r3, #32]
}
 800a682:	bf00      	nop
 800a684:	371c      	adds	r7, #28
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	40010000 	.word	0x40010000
 800a694:	40010400 	.word	0x40010400

0800a698 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	f023 0201 	bic.w	r2, r3, #1
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6a1b      	ldr	r3, [r3, #32]
 800a6bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	4a28      	ldr	r2, [pc, #160]	; (800a764 <TIM_TI1_SetConfig+0xcc>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d01b      	beq.n	800a6fe <TIM_TI1_SetConfig+0x66>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6cc:	d017      	beq.n	800a6fe <TIM_TI1_SetConfig+0x66>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	4a25      	ldr	r2, [pc, #148]	; (800a768 <TIM_TI1_SetConfig+0xd0>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d013      	beq.n	800a6fe <TIM_TI1_SetConfig+0x66>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	4a24      	ldr	r2, [pc, #144]	; (800a76c <TIM_TI1_SetConfig+0xd4>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d00f      	beq.n	800a6fe <TIM_TI1_SetConfig+0x66>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	4a23      	ldr	r2, [pc, #140]	; (800a770 <TIM_TI1_SetConfig+0xd8>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d00b      	beq.n	800a6fe <TIM_TI1_SetConfig+0x66>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4a22      	ldr	r2, [pc, #136]	; (800a774 <TIM_TI1_SetConfig+0xdc>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d007      	beq.n	800a6fe <TIM_TI1_SetConfig+0x66>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4a21      	ldr	r2, [pc, #132]	; (800a778 <TIM_TI1_SetConfig+0xe0>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d003      	beq.n	800a6fe <TIM_TI1_SetConfig+0x66>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4a20      	ldr	r2, [pc, #128]	; (800a77c <TIM_TI1_SetConfig+0xe4>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d101      	bne.n	800a702 <TIM_TI1_SetConfig+0x6a>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <TIM_TI1_SetConfig+0x6c>
 800a702:	2300      	movs	r3, #0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d008      	beq.n	800a71a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f023 0303 	bic.w	r3, r3, #3
 800a70e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4313      	orrs	r3, r2
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	e003      	b.n	800a722 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f043 0301 	orr.w	r3, r3, #1
 800a720:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	011b      	lsls	r3, r3, #4
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	4313      	orrs	r3, r2
 800a734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	f023 030a 	bic.w	r3, r3, #10
 800a73c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	f003 030a 	and.w	r3, r3, #10
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	4313      	orrs	r3, r2
 800a748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	693a      	ldr	r2, [r7, #16]
 800a754:	621a      	str	r2, [r3, #32]
}
 800a756:	bf00      	nop
 800a758:	371c      	adds	r7, #28
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	40010000 	.word	0x40010000
 800a768:	40000400 	.word	0x40000400
 800a76c:	40000800 	.word	0x40000800
 800a770:	40000c00 	.word	0x40000c00
 800a774:	40010400 	.word	0x40010400
 800a778:	40014000 	.word	0x40014000
 800a77c:	40001800 	.word	0x40001800

0800a780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	f023 0201 	bic.w	r2, r3, #1
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	011b      	lsls	r3, r3, #4
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f023 030a 	bic.w	r3, r3, #10
 800a7bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	621a      	str	r2, [r3, #32]
}
 800a7d2:	bf00      	nop
 800a7d4:	371c      	adds	r7, #28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b087      	sub	sp, #28
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6a1b      	ldr	r3, [r3, #32]
 800a7f0:	f023 0210 	bic.w	r2, r3, #16
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a80a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	021b      	lsls	r3, r3, #8
 800a810:	697a      	ldr	r2, [r7, #20]
 800a812:	4313      	orrs	r3, r2
 800a814:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a81c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	031b      	lsls	r3, r3, #12
 800a822:	b29b      	uxth	r3, r3
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	4313      	orrs	r3, r2
 800a828:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a830:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	011b      	lsls	r3, r3, #4
 800a836:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	621a      	str	r2, [r3, #32]
}
 800a84c:	bf00      	nop
 800a84e:	371c      	adds	r7, #28
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a858:	b480      	push	{r7}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6a1b      	ldr	r3, [r3, #32]
 800a868:	f023 0210 	bic.w	r2, r3, #16
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a882:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	031b      	lsls	r3, r3, #12
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	011b      	lsls	r3, r3, #4
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	621a      	str	r2, [r3, #32]
}
 800a8ac:	bf00      	nop
 800a8ae:	371c      	adds	r7, #28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b087      	sub	sp, #28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f023 0303 	bic.w	r3, r3, #3
 800a8e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	011b      	lsls	r3, r3, #4
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a908:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	4313      	orrs	r3, r2
 800a916:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	621a      	str	r2, [r3, #32]
}
 800a924:	bf00      	nop
 800a926:	371c      	adds	r7, #28
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a95c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	021b      	lsls	r3, r3, #8
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	4313      	orrs	r3, r2
 800a966:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a96e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	031b      	lsls	r3, r3, #12
 800a974:	b29b      	uxth	r3, r3
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	4313      	orrs	r3, r2
 800a97a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a982:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	031b      	lsls	r3, r3, #12
 800a988:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	4313      	orrs	r3, r2
 800a990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	621a      	str	r2, [r3, #32]
}
 800a99e:	bf00      	nop
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	f043 0307 	orr.w	r3, r3, #7
 800a9cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	609a      	str	r2, [r3, #8]
}
 800a9d4:	bf00      	nop
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	021a      	lsls	r2, r3, #8
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	431a      	orrs	r2, r3
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	609a      	str	r2, [r3, #8]
}
 800aa14:	bf00      	nop
 800aa16:	371c      	adds	r7, #28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f003 031f 	and.w	r3, r3, #31
 800aa32:	2201      	movs	r2, #1
 800aa34:	fa02 f303 	lsl.w	r3, r2, r3
 800aa38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6a1a      	ldr	r2, [r3, #32]
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	43db      	mvns	r3, r3
 800aa42:	401a      	ands	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6a1a      	ldr	r2, [r3, #32]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f003 031f 	and.w	r3, r3, #31
 800aa52:	6879      	ldr	r1, [r7, #4]
 800aa54:	fa01 f303 	lsl.w	r3, r1, r3
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	621a      	str	r2, [r3, #32]
}
 800aa5e:	bf00      	nop
 800aa60:	371c      	adds	r7, #28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
	...

0800aa6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d101      	bne.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa80:	2302      	movs	r3, #2
 800aa82:	e05a      	b.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a21      	ldr	r2, [pc, #132]	; (800ab48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d022      	beq.n	800ab0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad0:	d01d      	beq.n	800ab0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a1d      	ldr	r2, [pc, #116]	; (800ab4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d018      	beq.n	800ab0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a1b      	ldr	r2, [pc, #108]	; (800ab50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d013      	beq.n	800ab0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a1a      	ldr	r2, [pc, #104]	; (800ab54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d00e      	beq.n	800ab0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a18      	ldr	r2, [pc, #96]	; (800ab58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d009      	beq.n	800ab0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a17      	ldr	r2, [pc, #92]	; (800ab5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d004      	beq.n	800ab0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a15      	ldr	r2, [pc, #84]	; (800ab60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d10c      	bne.n	800ab28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	40010000 	.word	0x40010000
 800ab4c:	40000400 	.word	0x40000400
 800ab50:	40000800 	.word	0x40000800
 800ab54:	40000c00 	.word	0x40000c00
 800ab58:	40010400 	.word	0x40010400
 800ab5c:	40014000 	.word	0x40014000
 800ab60:	40001800 	.word	0x40001800

0800ab64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d101      	bne.n	800ab80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	e03d      	b.n	800abfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	4313      	orrs	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	69db      	ldr	r3, [r3, #28]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e03f      	b.n	800acc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d106      	bne.n	800ac5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7fa fb70 	bl	800533c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2224      	movs	r2, #36	; 0x24
 800ac60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68da      	ldr	r2, [r3, #12]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 ff43 	bl	800bb00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	691a      	ldr	r2, [r3, #16]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	695a      	ldr	r2, [r3, #20]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68da      	ldr	r2, [r3, #12]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2220      	movs	r2, #32
 800acb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2220      	movs	r2, #32
 800acbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08c      	sub	sp, #48	; 0x30
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	4613      	mov	r3, r2
 800acd8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	2b20      	cmp	r3, #32
 800ace4:	d165      	bne.n	800adb2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <HAL_UART_Transmit_DMA+0x26>
 800acec:	88fb      	ldrh	r3, [r7, #6]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e05e      	b.n	800adb4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d101      	bne.n	800ad04 <HAL_UART_Transmit_DMA+0x38>
 800ad00:	2302      	movs	r3, #2
 800ad02:	e057      	b.n	800adb4 <HAL_UART_Transmit_DMA+0xe8>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	88fa      	ldrh	r2, [r7, #6]
 800ad16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	88fa      	ldrh	r2, [r7, #6]
 800ad1c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2221      	movs	r2, #33	; 0x21
 800ad28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad30:	4a22      	ldr	r2, [pc, #136]	; (800adbc <HAL_UART_Transmit_DMA+0xf0>)
 800ad32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad38:	4a21      	ldr	r2, [pc, #132]	; (800adc0 <HAL_UART_Transmit_DMA+0xf4>)
 800ad3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad40:	4a20      	ldr	r2, [pc, #128]	; (800adc4 <HAL_UART_Transmit_DMA+0xf8>)
 800ad42:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad48:	2200      	movs	r2, #0
 800ad4a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ad4c:	f107 0308 	add.w	r3, r7, #8
 800ad50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	6819      	ldr	r1, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	461a      	mov	r2, r3
 800ad62:	88fb      	ldrh	r3, [r7, #6]
 800ad64:	f7fc f93c 	bl	8006fe0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad70:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3314      	adds	r3, #20
 800ad80:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	e853 3f00 	ldrex	r3, [r3]
 800ad88:	617b      	str	r3, [r7, #20]
   return(result);
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad90:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3314      	adds	r3, #20
 800ad98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad9a:	627a      	str	r2, [r7, #36]	; 0x24
 800ad9c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9e:	6a39      	ldr	r1, [r7, #32]
 800ada0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ada2:	e841 2300 	strex	r3, r2, [r1]
 800ada6:	61fb      	str	r3, [r7, #28]
   return(result);
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1e5      	bne.n	800ad7a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	e000      	b.n	800adb4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800adb2:	2302      	movs	r3, #2
  }
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3730      	adds	r7, #48	; 0x30
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	0800b399 	.word	0x0800b399
 800adc0:	0800b433 	.word	0x0800b433
 800adc4:	0800b5ab 	.word	0x0800b5ab

0800adc8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b20      	cmp	r3, #32
 800ade0:	d11d      	bne.n	800ae1e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <HAL_UART_Receive_DMA+0x26>
 800ade8:	88fb      	ldrh	r3, [r7, #6]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d101      	bne.n	800adf2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	e016      	b.n	800ae20 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d101      	bne.n	800ae00 <HAL_UART_Receive_DMA+0x38>
 800adfc:	2302      	movs	r3, #2
 800adfe:	e00f      	b.n	800ae20 <HAL_UART_Receive_DMA+0x58>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ae0e:	88fb      	ldrh	r3, [r7, #6]
 800ae10:	461a      	mov	r2, r3
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f000 fc13 	bl	800b640 <UART_Start_Receive_DMA>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	e000      	b.n	800ae20 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ae1e:	2302      	movs	r3, #2
  }
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b0ba      	sub	sp, #232	; 0xe8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5e:	f003 030f 	and.w	r3, r3, #15
 800ae62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10f      	bne.n	800ae8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae72:	f003 0320 	and.w	r3, r3, #32
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d009      	beq.n	800ae8e <HAL_UART_IRQHandler+0x66>
 800ae7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae7e:	f003 0320 	and.w	r3, r3, #32
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fd7f 	bl	800b98a <UART_Receive_IT>
      return;
 800ae8c:	e256      	b.n	800b33c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 80de 	beq.w	800b054 <HAL_UART_IRQHandler+0x22c>
 800ae98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d106      	bne.n	800aeb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 80d1 	beq.w	800b054 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aeb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00b      	beq.n	800aed6 <HAL_UART_IRQHandler+0xae>
 800aebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d005      	beq.n	800aed6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	f043 0201 	orr.w	r2, r3, #1
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeda:	f003 0304 	and.w	r3, r3, #4
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00b      	beq.n	800aefa <HAL_UART_IRQHandler+0xd2>
 800aee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d005      	beq.n	800aefa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	f043 0202 	orr.w	r2, r3, #2
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aefa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aefe:	f003 0302 	and.w	r3, r3, #2
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00b      	beq.n	800af1e <HAL_UART_IRQHandler+0xf6>
 800af06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d005      	beq.n	800af1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	f043 0204 	orr.w	r2, r3, #4
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af22:	f003 0308 	and.w	r3, r3, #8
 800af26:	2b00      	cmp	r3, #0
 800af28:	d011      	beq.n	800af4e <HAL_UART_IRQHandler+0x126>
 800af2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af2e:	f003 0320 	and.w	r3, r3, #32
 800af32:	2b00      	cmp	r3, #0
 800af34:	d105      	bne.n	800af42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d005      	beq.n	800af4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af46:	f043 0208 	orr.w	r2, r3, #8
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 81ed 	beq.w	800b332 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af5c:	f003 0320 	and.w	r3, r3, #32
 800af60:	2b00      	cmp	r3, #0
 800af62:	d008      	beq.n	800af76 <HAL_UART_IRQHandler+0x14e>
 800af64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af68:	f003 0320 	and.w	r3, r3, #32
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fd0a 	bl	800b98a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	695b      	ldr	r3, [r3, #20]
 800af7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af80:	2b40      	cmp	r3, #64	; 0x40
 800af82:	bf0c      	ite	eq
 800af84:	2301      	moveq	r3, #1
 800af86:	2300      	movne	r3, #0
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af92:	f003 0308 	and.w	r3, r3, #8
 800af96:	2b00      	cmp	r3, #0
 800af98:	d103      	bne.n	800afa2 <HAL_UART_IRQHandler+0x17a>
 800af9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d04f      	beq.n	800b042 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fc12 	bl	800b7cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb2:	2b40      	cmp	r3, #64	; 0x40
 800afb4:	d141      	bne.n	800b03a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3314      	adds	r3, #20
 800afbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800afcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3314      	adds	r3, #20
 800afde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800afe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800affa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1d9      	bne.n	800afb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b006:	2b00      	cmp	r3, #0
 800b008:	d013      	beq.n	800b032 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00e:	4a7d      	ldr	r2, [pc, #500]	; (800b204 <HAL_UART_IRQHandler+0x3dc>)
 800b010:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b016:	4618      	mov	r0, r3
 800b018:	f7fc f8aa 	bl	8007170 <HAL_DMA_Abort_IT>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d016      	beq.n	800b050 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b030:	e00e      	b.n	800b050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f99a 	bl	800b36c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b038:	e00a      	b.n	800b050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f996 	bl	800b36c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b040:	e006      	b.n	800b050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f992 	bl	800b36c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b04e:	e170      	b.n	800b332 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b050:	bf00      	nop
    return;
 800b052:	e16e      	b.n	800b332 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b058:	2b01      	cmp	r3, #1
 800b05a:	f040 814a 	bne.w	800b2f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b062:	f003 0310 	and.w	r3, r3, #16
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 8143 	beq.w	800b2f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b070:	f003 0310 	and.w	r3, r3, #16
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 813c 	beq.w	800b2f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b07a:	2300      	movs	r3, #0
 800b07c:	60bb      	str	r3, [r7, #8]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	60bb      	str	r3, [r7, #8]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	60bb      	str	r3, [r7, #8]
 800b08e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b09a:	2b40      	cmp	r3, #64	; 0x40
 800b09c:	f040 80b4 	bne.w	800b208 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 8140 	beq.w	800b336 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	f080 8139 	bcs.w	800b336 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d6:	f000 8088 	beq.w	800b1ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	330c      	adds	r3, #12
 800b0e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	330c      	adds	r3, #12
 800b102:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b10a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b11e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1d9      	bne.n	800b0da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3314      	adds	r3, #20
 800b12c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b138:	f023 0301 	bic.w	r3, r3, #1
 800b13c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3314      	adds	r3, #20
 800b146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b14a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b14e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b156:	e841 2300 	strex	r3, r2, [r1]
 800b15a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b15c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e1      	bne.n	800b126 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3314      	adds	r3, #20
 800b168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b16c:	e853 3f00 	ldrex	r3, [r3]
 800b170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3314      	adds	r3, #20
 800b182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b186:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b18c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e3      	bne.n	800b162 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2220      	movs	r2, #32
 800b19e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	330c      	adds	r3, #12
 800b1ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b2:	e853 3f00 	ldrex	r3, [r3]
 800b1b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ba:	f023 0310 	bic.w	r3, r3, #16
 800b1be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	330c      	adds	r3, #12
 800b1c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b1cc:	65ba      	str	r2, [r7, #88]	; 0x58
 800b1ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1d4:	e841 2300 	strex	r3, r2, [r1]
 800b1d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1e3      	bne.n	800b1a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fb ff53 	bl	8007090 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	1ad3      	subs	r3, r2, r3
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f8c0 	bl	800b380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b200:	e099      	b.n	800b336 <HAL_UART_IRQHandler+0x50e>
 800b202:	bf00      	nop
 800b204:	0800b893 	.word	0x0800b893
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b210:	b29b      	uxth	r3, r3
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 808b 	beq.w	800b33a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 8086 	beq.w	800b33a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	330c      	adds	r3, #12
 800b234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	330c      	adds	r3, #12
 800b24e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b252:	647a      	str	r2, [r7, #68]	; 0x44
 800b254:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b25a:	e841 2300 	strex	r3, r2, [r1]
 800b25e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1e3      	bne.n	800b22e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	3314      	adds	r3, #20
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	e853 3f00 	ldrex	r3, [r3]
 800b274:	623b      	str	r3, [r7, #32]
   return(result);
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	f023 0301 	bic.w	r3, r3, #1
 800b27c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3314      	adds	r3, #20
 800b286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b28a:	633a      	str	r2, [r7, #48]	; 0x30
 800b28c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b292:	e841 2300 	strex	r3, r2, [r1]
 800b296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1e3      	bne.n	800b266 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2220      	movs	r2, #32
 800b2a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	330c      	adds	r3, #12
 800b2b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	e853 3f00 	ldrex	r3, [r3]
 800b2ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 0310 	bic.w	r3, r3, #16
 800b2c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	330c      	adds	r3, #12
 800b2cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b2d0:	61fa      	str	r2, [r7, #28]
 800b2d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d4:	69b9      	ldr	r1, [r7, #24]
 800b2d6:	69fa      	ldr	r2, [r7, #28]
 800b2d8:	e841 2300 	strex	r3, r2, [r1]
 800b2dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e3      	bne.n	800b2ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f848 	bl	800b380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2f0:	e023      	b.n	800b33a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d009      	beq.n	800b312 <HAL_UART_IRQHandler+0x4ea>
 800b2fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fad5 	bl	800b8ba <UART_Transmit_IT>
    return;
 800b310:	e014      	b.n	800b33c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00e      	beq.n	800b33c <HAL_UART_IRQHandler+0x514>
 800b31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b326:	2b00      	cmp	r3, #0
 800b328:	d008      	beq.n	800b33c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fb15 	bl	800b95a <UART_EndTransmit_IT>
    return;
 800b330:	e004      	b.n	800b33c <HAL_UART_IRQHandler+0x514>
    return;
 800b332:	bf00      	nop
 800b334:	e002      	b.n	800b33c <HAL_UART_IRQHandler+0x514>
      return;
 800b336:	bf00      	nop
 800b338:	e000      	b.n	800b33c <HAL_UART_IRQHandler+0x514>
      return;
 800b33a:	bf00      	nop
  }
}
 800b33c:	37e8      	adds	r7, #232	; 0xe8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop

0800b344 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b090      	sub	sp, #64	; 0x40
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d137      	bne.n	800b424 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3314      	adds	r3, #20
 800b3c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	e853 3f00 	ldrex	r3, [r3]
 800b3c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	3314      	adds	r3, #20
 800b3d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3da:	633a      	str	r2, [r7, #48]	; 0x30
 800b3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e2:	e841 2300 	strex	r3, r2, [r1]
 800b3e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e5      	bne.n	800b3ba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	330c      	adds	r3, #12
 800b3f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	e853 3f00 	ldrex	r3, [r3]
 800b3fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b404:	637b      	str	r3, [r7, #52]	; 0x34
 800b406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	330c      	adds	r3, #12
 800b40c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b40e:	61fa      	str	r2, [r7, #28]
 800b410:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b412:	69b9      	ldr	r1, [r7, #24]
 800b414:	69fa      	ldr	r2, [r7, #28]
 800b416:	e841 2300 	strex	r3, r2, [r1]
 800b41a:	617b      	str	r3, [r7, #20]
   return(result);
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1e5      	bne.n	800b3ee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b422:	e002      	b.n	800b42a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b424:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b426:	f7f5 fe8d 	bl	8001144 <HAL_UART_TxCpltCallback>
}
 800b42a:	bf00      	nop
 800b42c:	3740      	adds	r7, #64	; 0x40
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7ff ff7f 	bl	800b344 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b09c      	sub	sp, #112	; 0x70
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b466:	2b00      	cmp	r3, #0
 800b468:	d172      	bne.n	800b550 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b46c:	2200      	movs	r2, #0
 800b46e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	330c      	adds	r3, #12
 800b476:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b47a:	e853 3f00 	ldrex	r3, [r3]
 800b47e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b486:	66bb      	str	r3, [r7, #104]	; 0x68
 800b488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	330c      	adds	r3, #12
 800b48e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b490:	65ba      	str	r2, [r7, #88]	; 0x58
 800b492:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b494:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b496:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b498:	e841 2300 	strex	r3, r2, [r1]
 800b49c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1e5      	bne.n	800b470 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3314      	adds	r3, #20
 800b4aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	e853 3f00 	ldrex	r3, [r3]
 800b4b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b6:	f023 0301 	bic.w	r3, r3, #1
 800b4ba:	667b      	str	r3, [r7, #100]	; 0x64
 800b4bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3314      	adds	r3, #20
 800b4c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b4c4:	647a      	str	r2, [r7, #68]	; 0x44
 800b4c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4cc:	e841 2300 	strex	r3, r2, [r1]
 800b4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e5      	bne.n	800b4a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3314      	adds	r3, #20
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e2:	e853 3f00 	ldrex	r3, [r3]
 800b4e6:	623b      	str	r3, [r7, #32]
   return(result);
 800b4e8:	6a3b      	ldr	r3, [r7, #32]
 800b4ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4ee:	663b      	str	r3, [r7, #96]	; 0x60
 800b4f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3314      	adds	r3, #20
 800b4f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b4f8:	633a      	str	r2, [r7, #48]	; 0x30
 800b4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b500:	e841 2300 	strex	r3, r2, [r1]
 800b504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1e5      	bne.n	800b4d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b50e:	2220      	movs	r2, #32
 800b510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d119      	bne.n	800b550 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	330c      	adds	r3, #12
 800b522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	e853 3f00 	ldrex	r3, [r3]
 800b52a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f023 0310 	bic.w	r3, r3, #16
 800b532:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	330c      	adds	r3, #12
 800b53a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b53c:	61fa      	str	r2, [r7, #28]
 800b53e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b540:	69b9      	ldr	r1, [r7, #24]
 800b542:	69fa      	ldr	r2, [r7, #28]
 800b544:	e841 2300 	strex	r3, r2, [r1]
 800b548:	617b      	str	r3, [r7, #20]
   return(result);
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1e5      	bne.n	800b51c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b554:	2b01      	cmp	r3, #1
 800b556:	d106      	bne.n	800b566 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b55a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b55c:	4619      	mov	r1, r3
 800b55e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b560:	f7ff ff0e 	bl	800b380 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b564:	e002      	b.n	800b56c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b566:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b568:	f7f5 fe08 	bl	800117c <HAL_UART_RxCpltCallback>
}
 800b56c:	bf00      	nop
 800b56e:	3770      	adds	r7, #112	; 0x70
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b580:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b586:	2b01      	cmp	r3, #1
 800b588:	d108      	bne.n	800b59c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b58e:	085b      	lsrs	r3, r3, #1
 800b590:	b29b      	uxth	r3, r3
 800b592:	4619      	mov	r1, r3
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f7ff fef3 	bl	800b380 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b59a:	e002      	b.n	800b5a2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f7ff fedb 	bl	800b358 <HAL_UART_RxHalfCpltCallback>
}
 800b5a2:	bf00      	nop
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	695b      	ldr	r3, [r3, #20]
 800b5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c6:	2b80      	cmp	r3, #128	; 0x80
 800b5c8:	bf0c      	ite	eq
 800b5ca:	2301      	moveq	r3, #1
 800b5cc:	2300      	movne	r3, #0
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	2b21      	cmp	r3, #33	; 0x21
 800b5dc:	d108      	bne.n	800b5f0 <UART_DMAError+0x46>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d005      	beq.n	800b5f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b5ea:	68b8      	ldr	r0, [r7, #8]
 800b5ec:	f000 f8c6 	bl	800b77c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5fa:	2b40      	cmp	r3, #64	; 0x40
 800b5fc:	bf0c      	ite	eq
 800b5fe:	2301      	moveq	r3, #1
 800b600:	2300      	movne	r3, #0
 800b602:	b2db      	uxtb	r3, r3
 800b604:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	2b22      	cmp	r3, #34	; 0x22
 800b610:	d108      	bne.n	800b624 <UART_DMAError+0x7a>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d005      	beq.n	800b624 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2200      	movs	r2, #0
 800b61c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b61e:	68b8      	ldr	r0, [r7, #8]
 800b620:	f000 f8d4 	bl	800b7cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b628:	f043 0210 	orr.w	r2, r3, #16
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b630:	68b8      	ldr	r0, [r7, #8]
 800b632:	f7ff fe9b 	bl	800b36c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b636:	bf00      	nop
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
	...

0800b640 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b098      	sub	sp, #96	; 0x60
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	4613      	mov	r3, r2
 800b64c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	88fa      	ldrh	r2, [r7, #6]
 800b658:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2200      	movs	r2, #0
 800b65e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2222      	movs	r2, #34	; 0x22
 800b664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66c:	4a40      	ldr	r2, [pc, #256]	; (800b770 <UART_Start_Receive_DMA+0x130>)
 800b66e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b674:	4a3f      	ldr	r2, [pc, #252]	; (800b774 <UART_Start_Receive_DMA+0x134>)
 800b676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67c:	4a3e      	ldr	r2, [pc, #248]	; (800b778 <UART_Start_Receive_DMA+0x138>)
 800b67e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b684:	2200      	movs	r2, #0
 800b686:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b688:	f107 0308 	add.w	r3, r7, #8
 800b68c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3304      	adds	r3, #4
 800b698:	4619      	mov	r1, r3
 800b69a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	88fb      	ldrh	r3, [r7, #6]
 800b6a0:	f7fb fc9e 	bl	8006fe0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	613b      	str	r3, [r7, #16]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	613b      	str	r3, [r7, #16]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	613b      	str	r3, [r7, #16]
 800b6b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d019      	beq.n	800b6fe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	330c      	adds	r3, #12
 800b6d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d4:	e853 3f00 	ldrex	r3, [r3]
 800b6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	330c      	adds	r3, #12
 800b6e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b6ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b6f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6f2:	e841 2300 	strex	r3, r2, [r1]
 800b6f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1e5      	bne.n	800b6ca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3314      	adds	r3, #20
 800b704:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b708:	e853 3f00 	ldrex	r3, [r3]
 800b70c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b710:	f043 0301 	orr.w	r3, r3, #1
 800b714:	657b      	str	r3, [r7, #84]	; 0x54
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3314      	adds	r3, #20
 800b71c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b71e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b720:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e5      	bne.n	800b6fe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3314      	adds	r3, #20
 800b738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	e853 3f00 	ldrex	r3, [r3]
 800b740:	617b      	str	r3, [r7, #20]
   return(result);
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b748:	653b      	str	r3, [r7, #80]	; 0x50
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3314      	adds	r3, #20
 800b750:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b752:	627a      	str	r2, [r7, #36]	; 0x24
 800b754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	6a39      	ldr	r1, [r7, #32]
 800b758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e5      	bne.n	800b732 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3760      	adds	r7, #96	; 0x60
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	0800b44f 	.word	0x0800b44f
 800b774:	0800b575 	.word	0x0800b575
 800b778:	0800b5ab 	.word	0x0800b5ab

0800b77c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b089      	sub	sp, #36	; 0x24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	330c      	adds	r3, #12
 800b78a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	60bb      	str	r3, [r7, #8]
   return(result);
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b79a:	61fb      	str	r3, [r7, #28]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	330c      	adds	r3, #12
 800b7a2:	69fa      	ldr	r2, [r7, #28]
 800b7a4:	61ba      	str	r2, [r7, #24]
 800b7a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a8:	6979      	ldr	r1, [r7, #20]
 800b7aa:	69ba      	ldr	r2, [r7, #24]
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e5      	bne.n	800b784 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b7c0:	bf00      	nop
 800b7c2:	3724      	adds	r7, #36	; 0x24
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b095      	sub	sp, #84	; 0x54
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	330c      	adds	r3, #12
 800b7da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7de:	e853 3f00 	ldrex	r3, [r3]
 800b7e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	330c      	adds	r3, #12
 800b7f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7f4:	643a      	str	r2, [r7, #64]	; 0x40
 800b7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e5      	bne.n	800b7d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	3314      	adds	r3, #20
 800b80e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b810:	6a3b      	ldr	r3, [r7, #32]
 800b812:	e853 3f00 	ldrex	r3, [r3]
 800b816:	61fb      	str	r3, [r7, #28]
   return(result);
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	f023 0301 	bic.w	r3, r3, #1
 800b81e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3314      	adds	r3, #20
 800b826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b828:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b82a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b82e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b830:	e841 2300 	strex	r3, r2, [r1]
 800b834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e5      	bne.n	800b808 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b840:	2b01      	cmp	r3, #1
 800b842:	d119      	bne.n	800b878 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	330c      	adds	r3, #12
 800b84a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	e853 3f00 	ldrex	r3, [r3]
 800b852:	60bb      	str	r3, [r7, #8]
   return(result);
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	f023 0310 	bic.w	r3, r3, #16
 800b85a:	647b      	str	r3, [r7, #68]	; 0x44
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	330c      	adds	r3, #12
 800b862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b864:	61ba      	str	r2, [r7, #24]
 800b866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b868:	6979      	ldr	r1, [r7, #20]
 800b86a:	69ba      	ldr	r2, [r7, #24]
 800b86c:	e841 2300 	strex	r3, r2, [r1]
 800b870:	613b      	str	r3, [r7, #16]
   return(result);
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d1e5      	bne.n	800b844 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2220      	movs	r2, #32
 800b87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b886:	bf00      	nop
 800b888:	3754      	adds	r7, #84	; 0x54
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f7ff fd5d 	bl	800b36c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8b2:	bf00      	nop
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b085      	sub	sp, #20
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b21      	cmp	r3, #33	; 0x21
 800b8cc:	d13e      	bne.n	800b94c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8d6:	d114      	bne.n	800b902 <UART_Transmit_IT+0x48>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	691b      	ldr	r3, [r3, #16]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d110      	bne.n	800b902 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a1b      	ldr	r3, [r3, #32]
 800b8fa:	1c9a      	adds	r2, r3, #2
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	621a      	str	r2, [r3, #32]
 800b900:	e008      	b.n	800b914 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	1c59      	adds	r1, r3, #1
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	6211      	str	r1, [r2, #32]
 800b90c:	781a      	ldrb	r2, [r3, #0]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b918:	b29b      	uxth	r3, r3
 800b91a:	3b01      	subs	r3, #1
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	4619      	mov	r1, r3
 800b922:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10f      	bne.n	800b948 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68da      	ldr	r2, [r3, #12]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b936:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	68da      	ldr	r2, [r3, #12]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b946:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b948:	2300      	movs	r3, #0
 800b94a:	e000      	b.n	800b94e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b94c:	2302      	movs	r3, #2
  }
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b082      	sub	sp, #8
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68da      	ldr	r2, [r3, #12]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b970:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2220      	movs	r2, #32
 800b976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7f5 fbe2 	bl	8001144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b08c      	sub	sp, #48	; 0x30
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b22      	cmp	r3, #34	; 0x22
 800b99c:	f040 80ab 	bne.w	800baf6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9a8:	d117      	bne.n	800b9da <UART_Receive_IT+0x50>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d113      	bne.n	800b9da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d2:	1c9a      	adds	r2, r3, #2
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	629a      	str	r2, [r3, #40]	; 0x28
 800b9d8:	e026      	b.n	800ba28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ec:	d007      	beq.n	800b9fe <UART_Receive_IT+0x74>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10a      	bne.n	800ba0c <UART_Receive_IT+0x82>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d106      	bne.n	800ba0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	b2da      	uxtb	r2, r3
 800ba06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba08:	701a      	strb	r2, [r3, #0]
 800ba0a:	e008      	b.n	800ba1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba22:	1c5a      	adds	r2, r3, #1
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	4619      	mov	r1, r3
 800ba36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d15a      	bne.n	800baf2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68da      	ldr	r2, [r3, #12]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f022 0220 	bic.w	r2, r2, #32
 800ba4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68da      	ldr	r2, [r3, #12]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	695a      	ldr	r2, [r3, #20]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f022 0201 	bic.w	r2, r2, #1
 800ba6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2220      	movs	r2, #32
 800ba70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d135      	bne.n	800bae8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	330c      	adds	r3, #12
 800ba88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	e853 3f00 	ldrex	r3, [r3]
 800ba90:	613b      	str	r3, [r7, #16]
   return(result);
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	f023 0310 	bic.w	r3, r3, #16
 800ba98:	627b      	str	r3, [r7, #36]	; 0x24
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	330c      	adds	r3, #12
 800baa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baa2:	623a      	str	r2, [r7, #32]
 800baa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa6:	69f9      	ldr	r1, [r7, #28]
 800baa8:	6a3a      	ldr	r2, [r7, #32]
 800baaa:	e841 2300 	strex	r3, r2, [r1]
 800baae:	61bb      	str	r3, [r7, #24]
   return(result);
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1e5      	bne.n	800ba82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 0310 	and.w	r3, r3, #16
 800bac0:	2b10      	cmp	r3, #16
 800bac2:	d10a      	bne.n	800bada <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bac4:	2300      	movs	r3, #0
 800bac6:	60fb      	str	r3, [r7, #12]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff fc4d 	bl	800b380 <HAL_UARTEx_RxEventCallback>
 800bae6:	e002      	b.n	800baee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7f5 fb47 	bl	800117c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	e002      	b.n	800baf8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	e000      	b.n	800baf8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800baf6:	2302      	movs	r3, #2
  }
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3730      	adds	r7, #48	; 0x30
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb04:	b0c0      	sub	sp, #256	; 0x100
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bb18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb1c:	68d9      	ldr	r1, [r3, #12]
 800bb1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	ea40 0301 	orr.w	r3, r0, r1
 800bb28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bb2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb2e:	689a      	ldr	r2, [r3, #8]
 800bb30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	431a      	orrs	r2, r3
 800bb38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	431a      	orrs	r2, r3
 800bb40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bb4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bb58:	f021 010c 	bic.w	r1, r1, #12
 800bb5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb66:	430b      	orrs	r3, r1
 800bb68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bb76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb7a:	6999      	ldr	r1, [r3, #24]
 800bb7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	ea40 0301 	orr.w	r3, r0, r1
 800bb86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	4b8f      	ldr	r3, [pc, #572]	; (800bdcc <UART_SetConfig+0x2cc>)
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d005      	beq.n	800bba0 <UART_SetConfig+0xa0>
 800bb94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	4b8d      	ldr	r3, [pc, #564]	; (800bdd0 <UART_SetConfig+0x2d0>)
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d104      	bne.n	800bbaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bba0:	f7fd f9f0 	bl	8008f84 <HAL_RCC_GetPCLK2Freq>
 800bba4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bba8:	e003      	b.n	800bbb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bbaa:	f7fd f9d7 	bl	8008f5c <HAL_RCC_GetPCLK1Freq>
 800bbae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb6:	69db      	ldr	r3, [r3, #28]
 800bbb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbbc:	f040 810c 	bne.w	800bdd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bbc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bbce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	1891      	adds	r1, r2, r2
 800bbd8:	65b9      	str	r1, [r7, #88]	; 0x58
 800bbda:	415b      	adcs	r3, r3
 800bbdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bbe2:	4621      	mov	r1, r4
 800bbe4:	eb12 0801 	adds.w	r8, r2, r1
 800bbe8:	4629      	mov	r1, r5
 800bbea:	eb43 0901 	adc.w	r9, r3, r1
 800bbee:	f04f 0200 	mov.w	r2, #0
 800bbf2:	f04f 0300 	mov.w	r3, #0
 800bbf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bbfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bbfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc02:	4690      	mov	r8, r2
 800bc04:	4699      	mov	r9, r3
 800bc06:	4623      	mov	r3, r4
 800bc08:	eb18 0303 	adds.w	r3, r8, r3
 800bc0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bc10:	462b      	mov	r3, r5
 800bc12:	eb49 0303 	adc.w	r3, r9, r3
 800bc16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bc26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bc2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bc2e:	460b      	mov	r3, r1
 800bc30:	18db      	adds	r3, r3, r3
 800bc32:	653b      	str	r3, [r7, #80]	; 0x50
 800bc34:	4613      	mov	r3, r2
 800bc36:	eb42 0303 	adc.w	r3, r2, r3
 800bc3a:	657b      	str	r3, [r7, #84]	; 0x54
 800bc3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bc40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bc44:	f7f4 ff98 	bl	8000b78 <__aeabi_uldivmod>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4b61      	ldr	r3, [pc, #388]	; (800bdd4 <UART_SetConfig+0x2d4>)
 800bc4e:	fba3 2302 	umull	r2, r3, r3, r2
 800bc52:	095b      	lsrs	r3, r3, #5
 800bc54:	011c      	lsls	r4, r3, #4
 800bc56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bc64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bc68:	4642      	mov	r2, r8
 800bc6a:	464b      	mov	r3, r9
 800bc6c:	1891      	adds	r1, r2, r2
 800bc6e:	64b9      	str	r1, [r7, #72]	; 0x48
 800bc70:	415b      	adcs	r3, r3
 800bc72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bc78:	4641      	mov	r1, r8
 800bc7a:	eb12 0a01 	adds.w	sl, r2, r1
 800bc7e:	4649      	mov	r1, r9
 800bc80:	eb43 0b01 	adc.w	fp, r3, r1
 800bc84:	f04f 0200 	mov.w	r2, #0
 800bc88:	f04f 0300 	mov.w	r3, #0
 800bc8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bc90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bc94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc98:	4692      	mov	sl, r2
 800bc9a:	469b      	mov	fp, r3
 800bc9c:	4643      	mov	r3, r8
 800bc9e:	eb1a 0303 	adds.w	r3, sl, r3
 800bca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bca6:	464b      	mov	r3, r9
 800bca8:	eb4b 0303 	adc.w	r3, fp, r3
 800bcac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bcb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bcbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bcc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	18db      	adds	r3, r3, r3
 800bcc8:	643b      	str	r3, [r7, #64]	; 0x40
 800bcca:	4613      	mov	r3, r2
 800bccc:	eb42 0303 	adc.w	r3, r2, r3
 800bcd0:	647b      	str	r3, [r7, #68]	; 0x44
 800bcd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bcd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bcda:	f7f4 ff4d 	bl	8000b78 <__aeabi_uldivmod>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4611      	mov	r1, r2
 800bce4:	4b3b      	ldr	r3, [pc, #236]	; (800bdd4 <UART_SetConfig+0x2d4>)
 800bce6:	fba3 2301 	umull	r2, r3, r3, r1
 800bcea:	095b      	lsrs	r3, r3, #5
 800bcec:	2264      	movs	r2, #100	; 0x64
 800bcee:	fb02 f303 	mul.w	r3, r2, r3
 800bcf2:	1acb      	subs	r3, r1, r3
 800bcf4:	00db      	lsls	r3, r3, #3
 800bcf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bcfa:	4b36      	ldr	r3, [pc, #216]	; (800bdd4 <UART_SetConfig+0x2d4>)
 800bcfc:	fba3 2302 	umull	r2, r3, r3, r2
 800bd00:	095b      	lsrs	r3, r3, #5
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bd08:	441c      	add	r4, r3
 800bd0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bd18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bd1c:	4642      	mov	r2, r8
 800bd1e:	464b      	mov	r3, r9
 800bd20:	1891      	adds	r1, r2, r2
 800bd22:	63b9      	str	r1, [r7, #56]	; 0x38
 800bd24:	415b      	adcs	r3, r3
 800bd26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bd2c:	4641      	mov	r1, r8
 800bd2e:	1851      	adds	r1, r2, r1
 800bd30:	6339      	str	r1, [r7, #48]	; 0x30
 800bd32:	4649      	mov	r1, r9
 800bd34:	414b      	adcs	r3, r1
 800bd36:	637b      	str	r3, [r7, #52]	; 0x34
 800bd38:	f04f 0200 	mov.w	r2, #0
 800bd3c:	f04f 0300 	mov.w	r3, #0
 800bd40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bd44:	4659      	mov	r1, fp
 800bd46:	00cb      	lsls	r3, r1, #3
 800bd48:	4651      	mov	r1, sl
 800bd4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd4e:	4651      	mov	r1, sl
 800bd50:	00ca      	lsls	r2, r1, #3
 800bd52:	4610      	mov	r0, r2
 800bd54:	4619      	mov	r1, r3
 800bd56:	4603      	mov	r3, r0
 800bd58:	4642      	mov	r2, r8
 800bd5a:	189b      	adds	r3, r3, r2
 800bd5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd60:	464b      	mov	r3, r9
 800bd62:	460a      	mov	r2, r1
 800bd64:	eb42 0303 	adc.w	r3, r2, r3
 800bd68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bd7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd80:	460b      	mov	r3, r1
 800bd82:	18db      	adds	r3, r3, r3
 800bd84:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd86:	4613      	mov	r3, r2
 800bd88:	eb42 0303 	adc.w	r3, r2, r3
 800bd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bd92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bd96:	f7f4 feef 	bl	8000b78 <__aeabi_uldivmod>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	4b0d      	ldr	r3, [pc, #52]	; (800bdd4 <UART_SetConfig+0x2d4>)
 800bda0:	fba3 1302 	umull	r1, r3, r3, r2
 800bda4:	095b      	lsrs	r3, r3, #5
 800bda6:	2164      	movs	r1, #100	; 0x64
 800bda8:	fb01 f303 	mul.w	r3, r1, r3
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	3332      	adds	r3, #50	; 0x32
 800bdb2:	4a08      	ldr	r2, [pc, #32]	; (800bdd4 <UART_SetConfig+0x2d4>)
 800bdb4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb8:	095b      	lsrs	r3, r3, #5
 800bdba:	f003 0207 	and.w	r2, r3, #7
 800bdbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4422      	add	r2, r4
 800bdc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bdc8:	e105      	b.n	800bfd6 <UART_SetConfig+0x4d6>
 800bdca:	bf00      	nop
 800bdcc:	40011000 	.word	0x40011000
 800bdd0:	40011400 	.word	0x40011400
 800bdd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bdd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bddc:	2200      	movs	r2, #0
 800bdde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bde2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bde6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bdea:	4642      	mov	r2, r8
 800bdec:	464b      	mov	r3, r9
 800bdee:	1891      	adds	r1, r2, r2
 800bdf0:	6239      	str	r1, [r7, #32]
 800bdf2:	415b      	adcs	r3, r3
 800bdf4:	627b      	str	r3, [r7, #36]	; 0x24
 800bdf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bdfa:	4641      	mov	r1, r8
 800bdfc:	1854      	adds	r4, r2, r1
 800bdfe:	4649      	mov	r1, r9
 800be00:	eb43 0501 	adc.w	r5, r3, r1
 800be04:	f04f 0200 	mov.w	r2, #0
 800be08:	f04f 0300 	mov.w	r3, #0
 800be0c:	00eb      	lsls	r3, r5, #3
 800be0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be12:	00e2      	lsls	r2, r4, #3
 800be14:	4614      	mov	r4, r2
 800be16:	461d      	mov	r5, r3
 800be18:	4643      	mov	r3, r8
 800be1a:	18e3      	adds	r3, r4, r3
 800be1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be20:	464b      	mov	r3, r9
 800be22:	eb45 0303 	adc.w	r3, r5, r3
 800be26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800be3a:	f04f 0200 	mov.w	r2, #0
 800be3e:	f04f 0300 	mov.w	r3, #0
 800be42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800be46:	4629      	mov	r1, r5
 800be48:	008b      	lsls	r3, r1, #2
 800be4a:	4621      	mov	r1, r4
 800be4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be50:	4621      	mov	r1, r4
 800be52:	008a      	lsls	r2, r1, #2
 800be54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800be58:	f7f4 fe8e 	bl	8000b78 <__aeabi_uldivmod>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4b60      	ldr	r3, [pc, #384]	; (800bfe4 <UART_SetConfig+0x4e4>)
 800be62:	fba3 2302 	umull	r2, r3, r3, r2
 800be66:	095b      	lsrs	r3, r3, #5
 800be68:	011c      	lsls	r4, r3, #4
 800be6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be6e:	2200      	movs	r2, #0
 800be70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800be7c:	4642      	mov	r2, r8
 800be7e:	464b      	mov	r3, r9
 800be80:	1891      	adds	r1, r2, r2
 800be82:	61b9      	str	r1, [r7, #24]
 800be84:	415b      	adcs	r3, r3
 800be86:	61fb      	str	r3, [r7, #28]
 800be88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be8c:	4641      	mov	r1, r8
 800be8e:	1851      	adds	r1, r2, r1
 800be90:	6139      	str	r1, [r7, #16]
 800be92:	4649      	mov	r1, r9
 800be94:	414b      	adcs	r3, r1
 800be96:	617b      	str	r3, [r7, #20]
 800be98:	f04f 0200 	mov.w	r2, #0
 800be9c:	f04f 0300 	mov.w	r3, #0
 800bea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bea4:	4659      	mov	r1, fp
 800bea6:	00cb      	lsls	r3, r1, #3
 800bea8:	4651      	mov	r1, sl
 800beaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800beae:	4651      	mov	r1, sl
 800beb0:	00ca      	lsls	r2, r1, #3
 800beb2:	4610      	mov	r0, r2
 800beb4:	4619      	mov	r1, r3
 800beb6:	4603      	mov	r3, r0
 800beb8:	4642      	mov	r2, r8
 800beba:	189b      	adds	r3, r3, r2
 800bebc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bec0:	464b      	mov	r3, r9
 800bec2:	460a      	mov	r2, r1
 800bec4:	eb42 0303 	adc.w	r3, r2, r3
 800bec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800becc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bed6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bed8:	f04f 0200 	mov.w	r2, #0
 800bedc:	f04f 0300 	mov.w	r3, #0
 800bee0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bee4:	4649      	mov	r1, r9
 800bee6:	008b      	lsls	r3, r1, #2
 800bee8:	4641      	mov	r1, r8
 800beea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800beee:	4641      	mov	r1, r8
 800bef0:	008a      	lsls	r2, r1, #2
 800bef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bef6:	f7f4 fe3f 	bl	8000b78 <__aeabi_uldivmod>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	4b39      	ldr	r3, [pc, #228]	; (800bfe4 <UART_SetConfig+0x4e4>)
 800bf00:	fba3 1302 	umull	r1, r3, r3, r2
 800bf04:	095b      	lsrs	r3, r3, #5
 800bf06:	2164      	movs	r1, #100	; 0x64
 800bf08:	fb01 f303 	mul.w	r3, r1, r3
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	011b      	lsls	r3, r3, #4
 800bf10:	3332      	adds	r3, #50	; 0x32
 800bf12:	4a34      	ldr	r2, [pc, #208]	; (800bfe4 <UART_SetConfig+0x4e4>)
 800bf14:	fba2 2303 	umull	r2, r3, r2, r3
 800bf18:	095b      	lsrs	r3, r3, #5
 800bf1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf1e:	441c      	add	r4, r3
 800bf20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf24:	2200      	movs	r2, #0
 800bf26:	673b      	str	r3, [r7, #112]	; 0x70
 800bf28:	677a      	str	r2, [r7, #116]	; 0x74
 800bf2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bf2e:	4642      	mov	r2, r8
 800bf30:	464b      	mov	r3, r9
 800bf32:	1891      	adds	r1, r2, r2
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	415b      	adcs	r3, r3
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf3e:	4641      	mov	r1, r8
 800bf40:	1851      	adds	r1, r2, r1
 800bf42:	6039      	str	r1, [r7, #0]
 800bf44:	4649      	mov	r1, r9
 800bf46:	414b      	adcs	r3, r1
 800bf48:	607b      	str	r3, [r7, #4]
 800bf4a:	f04f 0200 	mov.w	r2, #0
 800bf4e:	f04f 0300 	mov.w	r3, #0
 800bf52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bf56:	4659      	mov	r1, fp
 800bf58:	00cb      	lsls	r3, r1, #3
 800bf5a:	4651      	mov	r1, sl
 800bf5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf60:	4651      	mov	r1, sl
 800bf62:	00ca      	lsls	r2, r1, #3
 800bf64:	4610      	mov	r0, r2
 800bf66:	4619      	mov	r1, r3
 800bf68:	4603      	mov	r3, r0
 800bf6a:	4642      	mov	r2, r8
 800bf6c:	189b      	adds	r3, r3, r2
 800bf6e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf70:	464b      	mov	r3, r9
 800bf72:	460a      	mov	r2, r1
 800bf74:	eb42 0303 	adc.w	r3, r2, r3
 800bf78:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	663b      	str	r3, [r7, #96]	; 0x60
 800bf84:	667a      	str	r2, [r7, #100]	; 0x64
 800bf86:	f04f 0200 	mov.w	r2, #0
 800bf8a:	f04f 0300 	mov.w	r3, #0
 800bf8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bf92:	4649      	mov	r1, r9
 800bf94:	008b      	lsls	r3, r1, #2
 800bf96:	4641      	mov	r1, r8
 800bf98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf9c:	4641      	mov	r1, r8
 800bf9e:	008a      	lsls	r2, r1, #2
 800bfa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bfa4:	f7f4 fde8 	bl	8000b78 <__aeabi_uldivmod>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <UART_SetConfig+0x4e4>)
 800bfae:	fba3 1302 	umull	r1, r3, r3, r2
 800bfb2:	095b      	lsrs	r3, r3, #5
 800bfb4:	2164      	movs	r1, #100	; 0x64
 800bfb6:	fb01 f303 	mul.w	r3, r1, r3
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	011b      	lsls	r3, r3, #4
 800bfbe:	3332      	adds	r3, #50	; 0x32
 800bfc0:	4a08      	ldr	r2, [pc, #32]	; (800bfe4 <UART_SetConfig+0x4e4>)
 800bfc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc6:	095b      	lsrs	r3, r3, #5
 800bfc8:	f003 020f 	and.w	r2, r3, #15
 800bfcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4422      	add	r2, r4
 800bfd4:	609a      	str	r2, [r3, #8]
}
 800bfd6:	bf00      	nop
 800bfd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfe2:	bf00      	nop
 800bfe4:	51eb851f 	.word	0x51eb851f

0800bfe8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfe8:	b084      	sub	sp, #16
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	f107 001c 	add.w	r0, r7, #28
 800bff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d122      	bne.n	800c046 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c004:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d105      	bne.n	800c03a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 faa2 	bl	800c584 <USB_CoreReset>
 800c040:	4603      	mov	r3, r0
 800c042:	73fb      	strb	r3, [r7, #15]
 800c044:	e01a      	b.n	800c07c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fa96 	bl	800c584 <USB_CoreReset>
 800c058:	4603      	mov	r3, r0
 800c05a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d106      	bne.n	800c070 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c066:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	639a      	str	r2, [r3, #56]	; 0x38
 800c06e:	e005      	b.n	800c07c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c074:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d10b      	bne.n	800c09a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	f043 0206 	orr.w	r2, r3, #6
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	f043 0220 	orr.w	r2, r3, #32
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0a6:	b004      	add	sp, #16
 800c0a8:	4770      	bx	lr

0800c0aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b083      	sub	sp, #12
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	f023 0201 	bic.w	r2, r3, #1
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c0e8:	78fb      	ldrb	r3, [r7, #3]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d115      	bne.n	800c11a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c0fa:	2001      	movs	r0, #1
 800c0fc:	f7fa f96a 	bl	80063d4 <HAL_Delay>
      ms++;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	3301      	adds	r3, #1
 800c104:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fa2e 	bl	800c568 <USB_GetMode>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d01e      	beq.n	800c150 <USB_SetCurrentMode+0x84>
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2b31      	cmp	r3, #49	; 0x31
 800c116:	d9f0      	bls.n	800c0fa <USB_SetCurrentMode+0x2e>
 800c118:	e01a      	b.n	800c150 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c11a:	78fb      	ldrb	r3, [r7, #3]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d115      	bne.n	800c14c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c12c:	2001      	movs	r0, #1
 800c12e:	f7fa f951 	bl	80063d4 <HAL_Delay>
      ms++;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	3301      	adds	r3, #1
 800c136:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fa15 	bl	800c568 <USB_GetMode>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d005      	beq.n	800c150 <USB_SetCurrentMode+0x84>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b31      	cmp	r3, #49	; 0x31
 800c148:	d9f0      	bls.n	800c12c <USB_SetCurrentMode+0x60>
 800c14a:	e001      	b.n	800c150 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e005      	b.n	800c15c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b32      	cmp	r3, #50	; 0x32
 800c154:	d101      	bne.n	800c15a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e000      	b.n	800c15c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c164:	b084      	sub	sp, #16
 800c166:	b580      	push	{r7, lr}
 800c168:	b086      	sub	sp, #24
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c17e:	2300      	movs	r3, #0
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	e009      	b.n	800c198 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	3340      	adds	r3, #64	; 0x40
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	2200      	movs	r2, #0
 800c190:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	3301      	adds	r3, #1
 800c196:	613b      	str	r3, [r7, #16]
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	2b0e      	cmp	r3, #14
 800c19c:	d9f2      	bls.n	800c184 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d11c      	bne.n	800c1de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1b2:	f043 0302 	orr.w	r3, r3, #2
 800c1b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	639a      	str	r2, [r3, #56]	; 0x38
 800c1dc:	e00b      	b.n	800c1f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	2300      	movs	r3, #0
 800c200:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c208:	4619      	mov	r1, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c210:	461a      	mov	r2, r3
 800c212:	680b      	ldr	r3, [r1, #0]
 800c214:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d10c      	bne.n	800c236 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d104      	bne.n	800c22c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c222:	2100      	movs	r1, #0
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 f965 	bl	800c4f4 <USB_SetDevSpeed>
 800c22a:	e008      	b.n	800c23e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c22c:	2101      	movs	r1, #1
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f960 	bl	800c4f4 <USB_SetDevSpeed>
 800c234:	e003      	b.n	800c23e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c236:	2103      	movs	r1, #3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f95b 	bl	800c4f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c23e:	2110      	movs	r1, #16
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f8f3 	bl	800c42c <USB_FlushTxFifo>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f91f 	bl	800c494 <USB_FlushRxFifo>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d001      	beq.n	800c260 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c266:	461a      	mov	r2, r3
 800c268:	2300      	movs	r3, #0
 800c26a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c272:	461a      	mov	r2, r3
 800c274:	2300      	movs	r3, #0
 800c276:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c27e:	461a      	mov	r2, r3
 800c280:	2300      	movs	r3, #0
 800c282:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c284:	2300      	movs	r3, #0
 800c286:	613b      	str	r3, [r7, #16]
 800c288:	e043      	b.n	800c312 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	015a      	lsls	r2, r3, #5
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	4413      	add	r3, r2
 800c292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c29c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2a0:	d118      	bne.n	800c2d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10a      	bne.n	800c2be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	015a      	lsls	r2, r3, #5
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2ba:	6013      	str	r3, [r2, #0]
 800c2bc:	e013      	b.n	800c2e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	015a      	lsls	r2, r3, #5
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	e008      	b.n	800c2e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	015a      	lsls	r2, r3, #5
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	015a      	lsls	r2, r3, #5
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	015a      	lsls	r2, r3, #5
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	4413      	add	r3, r2
 800c300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c304:	461a      	mov	r2, r3
 800c306:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c30a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	3301      	adds	r3, #1
 800c310:	613b      	str	r3, [r7, #16]
 800c312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	429a      	cmp	r2, r3
 800c318:	d3b7      	bcc.n	800c28a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c31a:	2300      	movs	r3, #0
 800c31c:	613b      	str	r3, [r7, #16]
 800c31e:	e043      	b.n	800c3a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	015a      	lsls	r2, r3, #5
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	4413      	add	r3, r2
 800c328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c336:	d118      	bne.n	800c36a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10a      	bne.n	800c354 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	015a      	lsls	r2, r3, #5
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	4413      	add	r3, r2
 800c346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c34a:	461a      	mov	r2, r3
 800c34c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c350:	6013      	str	r3, [r2, #0]
 800c352:	e013      	b.n	800c37c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c360:	461a      	mov	r2, r3
 800c362:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c366:	6013      	str	r3, [r2, #0]
 800c368:	e008      	b.n	800c37c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	015a      	lsls	r2, r3, #5
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	4413      	add	r3, r2
 800c372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c376:	461a      	mov	r2, r3
 800c378:	2300      	movs	r3, #0
 800c37a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	015a      	lsls	r2, r3, #5
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	4413      	add	r3, r2
 800c384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c388:	461a      	mov	r2, r3
 800c38a:	2300      	movs	r3, #0
 800c38c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	4413      	add	r3, r2
 800c396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c39a:	461a      	mov	r2, r3
 800c39c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	613b      	str	r3, [r7, #16]
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	693a      	ldr	r2, [r7, #16]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d3b7      	bcc.n	800c320 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c3d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d105      	bne.n	800c3e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	f043 0210 	orr.w	r2, r3, #16
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	699a      	ldr	r2, [r3, #24]
 800c3e8:	4b0f      	ldr	r3, [pc, #60]	; (800c428 <USB_DevInit+0x2c4>)
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d005      	beq.n	800c402 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	699b      	ldr	r3, [r3, #24]
 800c3fa:	f043 0208 	orr.w	r2, r3, #8
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c404:	2b01      	cmp	r3, #1
 800c406:	d107      	bne.n	800c418 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	699b      	ldr	r3, [r3, #24]
 800c40c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c410:	f043 0304 	orr.w	r3, r3, #4
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c418:	7dfb      	ldrb	r3, [r7, #23]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3718      	adds	r7, #24
 800c41e:	46bd      	mov	sp, r7
 800c420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c424:	b004      	add	sp, #16
 800c426:	4770      	bx	lr
 800c428:	803c3800 	.word	0x803c3800

0800c42c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c436:	2300      	movs	r3, #0
 800c438:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3301      	adds	r3, #1
 800c43e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	4a13      	ldr	r2, [pc, #76]	; (800c490 <USB_FlushTxFifo+0x64>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d901      	bls.n	800c44c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c448:	2303      	movs	r3, #3
 800c44a:	e01b      	b.n	800c484 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	daf2      	bge.n	800c43a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c454:	2300      	movs	r3, #0
 800c456:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	019b      	lsls	r3, r3, #6
 800c45c:	f043 0220 	orr.w	r2, r3, #32
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	3301      	adds	r3, #1
 800c468:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	4a08      	ldr	r2, [pc, #32]	; (800c490 <USB_FlushTxFifo+0x64>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d901      	bls.n	800c476 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c472:	2303      	movs	r3, #3
 800c474:	e006      	b.n	800c484 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	f003 0320 	and.w	r3, r3, #32
 800c47e:	2b20      	cmp	r3, #32
 800c480:	d0f0      	beq.n	800c464 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	00030d40 	.word	0x00030d40

0800c494 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c49c:	2300      	movs	r3, #0
 800c49e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	4a11      	ldr	r2, [pc, #68]	; (800c4f0 <USB_FlushRxFifo+0x5c>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d901      	bls.n	800c4b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e018      	b.n	800c4e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	daf2      	bge.n	800c4a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2210      	movs	r2, #16
 800c4c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	4a08      	ldr	r2, [pc, #32]	; (800c4f0 <USB_FlushRxFifo+0x5c>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d901      	bls.n	800c4d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c4d2:	2303      	movs	r3, #3
 800c4d4:	e006      	b.n	800c4e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	f003 0310 	and.w	r3, r3, #16
 800c4de:	2b10      	cmp	r3, #16
 800c4e0:	d0f0      	beq.n	800c4c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	00030d40 	.word	0x00030d40

0800c4f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	78fb      	ldrb	r3, [r7, #3]
 800c50e:	68f9      	ldr	r1, [r7, #12]
 800c510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c514:	4313      	orrs	r3, r2
 800c516:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c526:	b480      	push	{r7}
 800c528:	b085      	sub	sp, #20
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c540:	f023 0303 	bic.w	r3, r3, #3
 800c544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c554:	f043 0302 	orr.w	r3, r3, #2
 800c558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	695b      	ldr	r3, [r3, #20]
 800c574:	f003 0301 	and.w	r3, r3, #1
}
 800c578:	4618      	mov	r0, r3
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c58c:	2300      	movs	r3, #0
 800c58e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3301      	adds	r3, #1
 800c594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	4a13      	ldr	r2, [pc, #76]	; (800c5e8 <USB_CoreReset+0x64>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d901      	bls.n	800c5a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	e01b      	b.n	800c5da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	daf2      	bge.n	800c590 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	f043 0201 	orr.w	r2, r3, #1
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4a09      	ldr	r2, [pc, #36]	; (800c5e8 <USB_CoreReset+0x64>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d901      	bls.n	800c5cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	e006      	b.n	800c5da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	691b      	ldr	r3, [r3, #16]
 800c5d0:	f003 0301 	and.w	r3, r3, #1
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d0f0      	beq.n	800c5ba <USB_CoreReset+0x36>

  return HAL_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3714      	adds	r7, #20
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	00030d40 	.word	0x00030d40

0800c5ec <__cxa_pure_virtual>:
 800c5ec:	b508      	push	{r3, lr}
 800c5ee:	f000 f80d 	bl	800c60c <_ZSt9terminatev>

0800c5f2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c5f2:	b508      	push	{r3, lr}
 800c5f4:	4780      	blx	r0
 800c5f6:	f000 f94f 	bl	800c898 <abort>
	...

0800c5fc <_ZSt13get_terminatev>:
 800c5fc:	4b02      	ldr	r3, [pc, #8]	; (800c608 <_ZSt13get_terminatev+0xc>)
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	f3bf 8f5b 	dmb	ish
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	20000014 	.word	0x20000014

0800c60c <_ZSt9terminatev>:
 800c60c:	b508      	push	{r3, lr}
 800c60e:	f7ff fff5 	bl	800c5fc <_ZSt13get_terminatev>
 800c612:	f7ff ffee 	bl	800c5f2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800c616 <fmod>:
 800c616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c618:	ed2d 8b02 	vpush	{d8}
 800c61c:	ec57 6b10 	vmov	r6, r7, d0
 800c620:	ec55 4b11 	vmov	r4, r5, d1
 800c624:	f000 f826 	bl	800c674 <__ieee754_fmod>
 800c628:	4622      	mov	r2, r4
 800c62a:	462b      	mov	r3, r5
 800c62c:	4630      	mov	r0, r6
 800c62e:	4639      	mov	r1, r7
 800c630:	eeb0 8a40 	vmov.f32	s16, s0
 800c634:	eef0 8a60 	vmov.f32	s17, s1
 800c638:	f7f4 fa38 	bl	8000aac <__aeabi_dcmpun>
 800c63c:	b990      	cbnz	r0, 800c664 <fmod+0x4e>
 800c63e:	2200      	movs	r2, #0
 800c640:	2300      	movs	r3, #0
 800c642:	4620      	mov	r0, r4
 800c644:	4629      	mov	r1, r5
 800c646:	f7f4 f9ff 	bl	8000a48 <__aeabi_dcmpeq>
 800c64a:	b158      	cbz	r0, 800c664 <fmod+0x4e>
 800c64c:	f000 f92c 	bl	800c8a8 <__errno>
 800c650:	2321      	movs	r3, #33	; 0x21
 800c652:	6003      	str	r3, [r0, #0]
 800c654:	2200      	movs	r2, #0
 800c656:	2300      	movs	r3, #0
 800c658:	4610      	mov	r0, r2
 800c65a:	4619      	mov	r1, r3
 800c65c:	f7f4 f8b6 	bl	80007cc <__aeabi_ddiv>
 800c660:	ec41 0b18 	vmov	d8, r0, r1
 800c664:	eeb0 0a48 	vmov.f32	s0, s16
 800c668:	eef0 0a68 	vmov.f32	s1, s17
 800c66c:	ecbd 8b02 	vpop	{d8}
 800c670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c674 <__ieee754_fmod>:
 800c674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	ec53 2b11 	vmov	r2, r3, d1
 800c67c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800c680:	ea5e 0402 	orrs.w	r4, lr, r2
 800c684:	ec51 0b10 	vmov	r0, r1, d0
 800c688:	ee11 7a10 	vmov	r7, s2
 800c68c:	ee11 ca10 	vmov	ip, s2
 800c690:	461e      	mov	r6, r3
 800c692:	d00d      	beq.n	800c6b0 <__ieee754_fmod+0x3c>
 800c694:	4c7a      	ldr	r4, [pc, #488]	; (800c880 <__ieee754_fmod+0x20c>)
 800c696:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800c69a:	45a0      	cmp	r8, r4
 800c69c:	4689      	mov	r9, r1
 800c69e:	dc07      	bgt.n	800c6b0 <__ieee754_fmod+0x3c>
 800c6a0:	4254      	negs	r4, r2
 800c6a2:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800c88c <__ieee754_fmod+0x218>
 800c6a6:	4314      	orrs	r4, r2
 800c6a8:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800c6ac:	455c      	cmp	r4, fp
 800c6ae:	d909      	bls.n	800c6c4 <__ieee754_fmod+0x50>
 800c6b0:	f7f3 ff62 	bl	8000578 <__aeabi_dmul>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	f7f4 f888 	bl	80007cc <__aeabi_ddiv>
 800c6bc:	ec41 0b10 	vmov	d0, r0, r1
 800c6c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c4:	45f0      	cmp	r8, lr
 800c6c6:	ee10 aa10 	vmov	sl, s0
 800c6ca:	ee10 4a10 	vmov	r4, s0
 800c6ce:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c6d2:	dc09      	bgt.n	800c6e8 <__ieee754_fmod+0x74>
 800c6d4:	dbf2      	blt.n	800c6bc <__ieee754_fmod+0x48>
 800c6d6:	4290      	cmp	r0, r2
 800c6d8:	d3f0      	bcc.n	800c6bc <__ieee754_fmod+0x48>
 800c6da:	d105      	bne.n	800c6e8 <__ieee754_fmod+0x74>
 800c6dc:	4b69      	ldr	r3, [pc, #420]	; (800c884 <__ieee754_fmod+0x210>)
 800c6de:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800c6e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c6e6:	e7e9      	b.n	800c6bc <__ieee754_fmod+0x48>
 800c6e8:	ea19 0f0b 	tst.w	r9, fp
 800c6ec:	d14a      	bne.n	800c784 <__ieee754_fmod+0x110>
 800c6ee:	f1b8 0f00 	cmp.w	r8, #0
 800c6f2:	d13f      	bne.n	800c774 <__ieee754_fmod+0x100>
 800c6f4:	4964      	ldr	r1, [pc, #400]	; (800c888 <__ieee754_fmod+0x214>)
 800c6f6:	4653      	mov	r3, sl
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	dc38      	bgt.n	800c76e <__ieee754_fmod+0xfa>
 800c6fc:	4b63      	ldr	r3, [pc, #396]	; (800c88c <__ieee754_fmod+0x218>)
 800c6fe:	4033      	ands	r3, r6
 800c700:	2b00      	cmp	r3, #0
 800c702:	d14f      	bne.n	800c7a4 <__ieee754_fmod+0x130>
 800c704:	f1be 0f00 	cmp.w	lr, #0
 800c708:	d144      	bne.n	800c794 <__ieee754_fmod+0x120>
 800c70a:	4a5f      	ldr	r2, [pc, #380]	; (800c888 <__ieee754_fmod+0x214>)
 800c70c:	463b      	mov	r3, r7
 800c70e:	2b00      	cmp	r3, #0
 800c710:	dc3d      	bgt.n	800c78e <__ieee754_fmod+0x11a>
 800c712:	4b5f      	ldr	r3, [pc, #380]	; (800c890 <__ieee754_fmod+0x21c>)
 800c714:	4299      	cmp	r1, r3
 800c716:	db4a      	blt.n	800c7ae <__ieee754_fmod+0x13a>
 800c718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c71c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c720:	485b      	ldr	r0, [pc, #364]	; (800c890 <__ieee754_fmod+0x21c>)
 800c722:	4282      	cmp	r2, r0
 800c724:	db57      	blt.n	800c7d6 <__ieee754_fmod+0x162>
 800c726:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800c72a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800c72e:	1a89      	subs	r1, r1, r2
 800c730:	1b98      	subs	r0, r3, r6
 800c732:	eba4 070c 	sub.w	r7, r4, ip
 800c736:	2900      	cmp	r1, #0
 800c738:	d164      	bne.n	800c804 <__ieee754_fmod+0x190>
 800c73a:	4564      	cmp	r4, ip
 800c73c:	bf38      	it	cc
 800c73e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c742:	2800      	cmp	r0, #0
 800c744:	bfa4      	itt	ge
 800c746:	463c      	movge	r4, r7
 800c748:	4603      	movge	r3, r0
 800c74a:	ea53 0104 	orrs.w	r1, r3, r4
 800c74e:	d0c5      	beq.n	800c6dc <__ieee754_fmod+0x68>
 800c750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c754:	db6b      	blt.n	800c82e <__ieee754_fmod+0x1ba>
 800c756:	494e      	ldr	r1, [pc, #312]	; (800c890 <__ieee754_fmod+0x21c>)
 800c758:	428a      	cmp	r2, r1
 800c75a:	db6e      	blt.n	800c83a <__ieee754_fmod+0x1c6>
 800c75c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c760:	431d      	orrs	r5, r3
 800c762:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800c766:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800c76a:	4620      	mov	r0, r4
 800c76c:	e7a6      	b.n	800c6bc <__ieee754_fmod+0x48>
 800c76e:	3901      	subs	r1, #1
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	e7c1      	b.n	800c6f8 <__ieee754_fmod+0x84>
 800c774:	4946      	ldr	r1, [pc, #280]	; (800c890 <__ieee754_fmod+0x21c>)
 800c776:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	ddbe      	ble.n	800c6fc <__ieee754_fmod+0x88>
 800c77e:	3901      	subs	r1, #1
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	e7fa      	b.n	800c77a <__ieee754_fmod+0x106>
 800c784:	ea4f 5128 	mov.w	r1, r8, asr #20
 800c788:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c78c:	e7b6      	b.n	800c6fc <__ieee754_fmod+0x88>
 800c78e:	3a01      	subs	r2, #1
 800c790:	005b      	lsls	r3, r3, #1
 800c792:	e7bc      	b.n	800c70e <__ieee754_fmod+0x9a>
 800c794:	4a3e      	ldr	r2, [pc, #248]	; (800c890 <__ieee754_fmod+0x21c>)
 800c796:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	ddb9      	ble.n	800c712 <__ieee754_fmod+0x9e>
 800c79e:	3a01      	subs	r2, #1
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	e7fa      	b.n	800c79a <__ieee754_fmod+0x126>
 800c7a4:	ea4f 522e 	mov.w	r2, lr, asr #20
 800c7a8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c7ac:	e7b1      	b.n	800c712 <__ieee754_fmod+0x9e>
 800c7ae:	1a5c      	subs	r4, r3, r1
 800c7b0:	2c1f      	cmp	r4, #31
 800c7b2:	dc0a      	bgt.n	800c7ca <__ieee754_fmod+0x156>
 800c7b4:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800c7b8:	fa08 f804 	lsl.w	r8, r8, r4
 800c7bc:	fa2a f303 	lsr.w	r3, sl, r3
 800c7c0:	ea43 0308 	orr.w	r3, r3, r8
 800c7c4:	fa0a f404 	lsl.w	r4, sl, r4
 800c7c8:	e7aa      	b.n	800c720 <__ieee754_fmod+0xac>
 800c7ca:	4b32      	ldr	r3, [pc, #200]	; (800c894 <__ieee754_fmod+0x220>)
 800c7cc:	1a5b      	subs	r3, r3, r1
 800c7ce:	fa0a f303 	lsl.w	r3, sl, r3
 800c7d2:	2400      	movs	r4, #0
 800c7d4:	e7a4      	b.n	800c720 <__ieee754_fmod+0xac>
 800c7d6:	eba0 0c02 	sub.w	ip, r0, r2
 800c7da:	f1bc 0f1f 	cmp.w	ip, #31
 800c7de:	dc0a      	bgt.n	800c7f6 <__ieee754_fmod+0x182>
 800c7e0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800c7e4:	fa0e fe0c 	lsl.w	lr, lr, ip
 800c7e8:	fa27 f606 	lsr.w	r6, r7, r6
 800c7ec:	ea46 060e 	orr.w	r6, r6, lr
 800c7f0:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c7f4:	e79b      	b.n	800c72e <__ieee754_fmod+0xba>
 800c7f6:	4e27      	ldr	r6, [pc, #156]	; (800c894 <__ieee754_fmod+0x220>)
 800c7f8:	1ab6      	subs	r6, r6, r2
 800c7fa:	fa07 f606 	lsl.w	r6, r7, r6
 800c7fe:	f04f 0c00 	mov.w	ip, #0
 800c802:	e794      	b.n	800c72e <__ieee754_fmod+0xba>
 800c804:	4564      	cmp	r4, ip
 800c806:	bf38      	it	cc
 800c808:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c80c:	2800      	cmp	r0, #0
 800c80e:	da05      	bge.n	800c81c <__ieee754_fmod+0x1a8>
 800c810:	0fe0      	lsrs	r0, r4, #31
 800c812:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c816:	0064      	lsls	r4, r4, #1
 800c818:	3901      	subs	r1, #1
 800c81a:	e789      	b.n	800c730 <__ieee754_fmod+0xbc>
 800c81c:	ea50 0307 	orrs.w	r3, r0, r7
 800c820:	f43f af5c 	beq.w	800c6dc <__ieee754_fmod+0x68>
 800c824:	0ffb      	lsrs	r3, r7, #31
 800c826:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c82a:	007c      	lsls	r4, r7, #1
 800c82c:	e7f4      	b.n	800c818 <__ieee754_fmod+0x1a4>
 800c82e:	0fe1      	lsrs	r1, r4, #31
 800c830:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c834:	0064      	lsls	r4, r4, #1
 800c836:	3a01      	subs	r2, #1
 800c838:	e78a      	b.n	800c750 <__ieee754_fmod+0xdc>
 800c83a:	1a89      	subs	r1, r1, r2
 800c83c:	2914      	cmp	r1, #20
 800c83e:	dc0a      	bgt.n	800c856 <__ieee754_fmod+0x1e2>
 800c840:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800c844:	fa03 f202 	lsl.w	r2, r3, r2
 800c848:	40cc      	lsrs	r4, r1
 800c84a:	4322      	orrs	r2, r4
 800c84c:	410b      	asrs	r3, r1
 800c84e:	ea43 0105 	orr.w	r1, r3, r5
 800c852:	4610      	mov	r0, r2
 800c854:	e732      	b.n	800c6bc <__ieee754_fmod+0x48>
 800c856:	291f      	cmp	r1, #31
 800c858:	dc07      	bgt.n	800c86a <__ieee754_fmod+0x1f6>
 800c85a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800c85e:	40cc      	lsrs	r4, r1
 800c860:	fa03 f202 	lsl.w	r2, r3, r2
 800c864:	4322      	orrs	r2, r4
 800c866:	462b      	mov	r3, r5
 800c868:	e7f1      	b.n	800c84e <__ieee754_fmod+0x1da>
 800c86a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800c86e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c872:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800c876:	32e2      	adds	r2, #226	; 0xe2
 800c878:	fa43 f202 	asr.w	r2, r3, r2
 800c87c:	e7f3      	b.n	800c866 <__ieee754_fmod+0x1f2>
 800c87e:	bf00      	nop
 800c880:	7fefffff 	.word	0x7fefffff
 800c884:	0800d0f0 	.word	0x0800d0f0
 800c888:	fffffbed 	.word	0xfffffbed
 800c88c:	7ff00000 	.word	0x7ff00000
 800c890:	fffffc02 	.word	0xfffffc02
 800c894:	fffffbe2 	.word	0xfffffbe2

0800c898 <abort>:
 800c898:	b508      	push	{r3, lr}
 800c89a:	2006      	movs	r0, #6
 800c89c:	f000 f874 	bl	800c988 <raise>
 800c8a0:	2001      	movs	r0, #1
 800c8a2:	f7f8 ff21 	bl	80056e8 <_exit>
	...

0800c8a8 <__errno>:
 800c8a8:	4b01      	ldr	r3, [pc, #4]	; (800c8b0 <__errno+0x8>)
 800c8aa:	6818      	ldr	r0, [r3, #0]
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	20000018 	.word	0x20000018

0800c8b4 <__libc_init_array>:
 800c8b4:	b570      	push	{r4, r5, r6, lr}
 800c8b6:	4d0d      	ldr	r5, [pc, #52]	; (800c8ec <__libc_init_array+0x38>)
 800c8b8:	4c0d      	ldr	r4, [pc, #52]	; (800c8f0 <__libc_init_array+0x3c>)
 800c8ba:	1b64      	subs	r4, r4, r5
 800c8bc:	10a4      	asrs	r4, r4, #2
 800c8be:	2600      	movs	r6, #0
 800c8c0:	42a6      	cmp	r6, r4
 800c8c2:	d109      	bne.n	800c8d8 <__libc_init_array+0x24>
 800c8c4:	4d0b      	ldr	r5, [pc, #44]	; (800c8f4 <__libc_init_array+0x40>)
 800c8c6:	4c0c      	ldr	r4, [pc, #48]	; (800c8f8 <__libc_init_array+0x44>)
 800c8c8:	f000 f9b0 	bl	800cc2c <_init>
 800c8cc:	1b64      	subs	r4, r4, r5
 800c8ce:	10a4      	asrs	r4, r4, #2
 800c8d0:	2600      	movs	r6, #0
 800c8d2:	42a6      	cmp	r6, r4
 800c8d4:	d105      	bne.n	800c8e2 <__libc_init_array+0x2e>
 800c8d6:	bd70      	pop	{r4, r5, r6, pc}
 800c8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8dc:	4798      	blx	r3
 800c8de:	3601      	adds	r6, #1
 800c8e0:	e7ee      	b.n	800c8c0 <__libc_init_array+0xc>
 800c8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8e6:	4798      	blx	r3
 800c8e8:	3601      	adds	r6, #1
 800c8ea:	e7f2      	b.n	800c8d2 <__libc_init_array+0x1e>
 800c8ec:	0800d108 	.word	0x0800d108
 800c8f0:	0800d108 	.word	0x0800d108
 800c8f4:	0800d108 	.word	0x0800d108
 800c8f8:	0800d114 	.word	0x0800d114

0800c8fc <memcpy>:
 800c8fc:	440a      	add	r2, r1
 800c8fe:	4291      	cmp	r1, r2
 800c900:	f100 33ff 	add.w	r3, r0, #4294967295
 800c904:	d100      	bne.n	800c908 <memcpy+0xc>
 800c906:	4770      	bx	lr
 800c908:	b510      	push	{r4, lr}
 800c90a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c90e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c912:	4291      	cmp	r1, r2
 800c914:	d1f9      	bne.n	800c90a <memcpy+0xe>
 800c916:	bd10      	pop	{r4, pc}

0800c918 <memset>:
 800c918:	4402      	add	r2, r0
 800c91a:	4603      	mov	r3, r0
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d100      	bne.n	800c922 <memset+0xa>
 800c920:	4770      	bx	lr
 800c922:	f803 1b01 	strb.w	r1, [r3], #1
 800c926:	e7f9      	b.n	800c91c <memset+0x4>

0800c928 <realloc>:
 800c928:	4b02      	ldr	r3, [pc, #8]	; (800c934 <realloc+0xc>)
 800c92a:	460a      	mov	r2, r1
 800c92c:	4601      	mov	r1, r0
 800c92e:	6818      	ldr	r0, [r3, #0]
 800c930:	f000 b8da 	b.w	800cae8 <_realloc_r>
 800c934:	20000018 	.word	0x20000018

0800c938 <_raise_r>:
 800c938:	291f      	cmp	r1, #31
 800c93a:	b538      	push	{r3, r4, r5, lr}
 800c93c:	4604      	mov	r4, r0
 800c93e:	460d      	mov	r5, r1
 800c940:	d904      	bls.n	800c94c <_raise_r+0x14>
 800c942:	2316      	movs	r3, #22
 800c944:	6003      	str	r3, [r0, #0]
 800c946:	f04f 30ff 	mov.w	r0, #4294967295
 800c94a:	bd38      	pop	{r3, r4, r5, pc}
 800c94c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c94e:	b112      	cbz	r2, 800c956 <_raise_r+0x1e>
 800c950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c954:	b94b      	cbnz	r3, 800c96a <_raise_r+0x32>
 800c956:	4620      	mov	r0, r4
 800c958:	f000 f830 	bl	800c9bc <_getpid_r>
 800c95c:	462a      	mov	r2, r5
 800c95e:	4601      	mov	r1, r0
 800c960:	4620      	mov	r0, r4
 800c962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c966:	f000 b817 	b.w	800c998 <_kill_r>
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d00a      	beq.n	800c984 <_raise_r+0x4c>
 800c96e:	1c59      	adds	r1, r3, #1
 800c970:	d103      	bne.n	800c97a <_raise_r+0x42>
 800c972:	2316      	movs	r3, #22
 800c974:	6003      	str	r3, [r0, #0]
 800c976:	2001      	movs	r0, #1
 800c978:	e7e7      	b.n	800c94a <_raise_r+0x12>
 800c97a:	2400      	movs	r4, #0
 800c97c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c980:	4628      	mov	r0, r5
 800c982:	4798      	blx	r3
 800c984:	2000      	movs	r0, #0
 800c986:	e7e0      	b.n	800c94a <_raise_r+0x12>

0800c988 <raise>:
 800c988:	4b02      	ldr	r3, [pc, #8]	; (800c994 <raise+0xc>)
 800c98a:	4601      	mov	r1, r0
 800c98c:	6818      	ldr	r0, [r3, #0]
 800c98e:	f7ff bfd3 	b.w	800c938 <_raise_r>
 800c992:	bf00      	nop
 800c994:	20000018 	.word	0x20000018

0800c998 <_kill_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4d07      	ldr	r5, [pc, #28]	; (800c9b8 <_kill_r+0x20>)
 800c99c:	2300      	movs	r3, #0
 800c99e:	4604      	mov	r4, r0
 800c9a0:	4608      	mov	r0, r1
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	602b      	str	r3, [r5, #0]
 800c9a6:	f7f8 fe8f 	bl	80056c8 <_kill>
 800c9aa:	1c43      	adds	r3, r0, #1
 800c9ac:	d102      	bne.n	800c9b4 <_kill_r+0x1c>
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	b103      	cbz	r3, 800c9b4 <_kill_r+0x1c>
 800c9b2:	6023      	str	r3, [r4, #0]
 800c9b4:	bd38      	pop	{r3, r4, r5, pc}
 800c9b6:	bf00      	nop
 800c9b8:	20001fec 	.word	0x20001fec

0800c9bc <_getpid_r>:
 800c9bc:	f7f8 be7c 	b.w	80056b8 <_getpid>

0800c9c0 <sbrk_aligned>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	4e0e      	ldr	r6, [pc, #56]	; (800c9fc <sbrk_aligned+0x3c>)
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	6831      	ldr	r1, [r6, #0]
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	b911      	cbnz	r1, 800c9d2 <sbrk_aligned+0x12>
 800c9cc:	f000 f8bc 	bl	800cb48 <_sbrk_r>
 800c9d0:	6030      	str	r0, [r6, #0]
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	f000 f8b7 	bl	800cb48 <_sbrk_r>
 800c9da:	1c43      	adds	r3, r0, #1
 800c9dc:	d00a      	beq.n	800c9f4 <sbrk_aligned+0x34>
 800c9de:	1cc4      	adds	r4, r0, #3
 800c9e0:	f024 0403 	bic.w	r4, r4, #3
 800c9e4:	42a0      	cmp	r0, r4
 800c9e6:	d007      	beq.n	800c9f8 <sbrk_aligned+0x38>
 800c9e8:	1a21      	subs	r1, r4, r0
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	f000 f8ac 	bl	800cb48 <_sbrk_r>
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d101      	bne.n	800c9f8 <sbrk_aligned+0x38>
 800c9f4:	f04f 34ff 	mov.w	r4, #4294967295
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	bd70      	pop	{r4, r5, r6, pc}
 800c9fc:	20001fe8 	.word	0x20001fe8

0800ca00 <_malloc_r>:
 800ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca04:	1ccd      	adds	r5, r1, #3
 800ca06:	f025 0503 	bic.w	r5, r5, #3
 800ca0a:	3508      	adds	r5, #8
 800ca0c:	2d0c      	cmp	r5, #12
 800ca0e:	bf38      	it	cc
 800ca10:	250c      	movcc	r5, #12
 800ca12:	2d00      	cmp	r5, #0
 800ca14:	4607      	mov	r7, r0
 800ca16:	db01      	blt.n	800ca1c <_malloc_r+0x1c>
 800ca18:	42a9      	cmp	r1, r5
 800ca1a:	d905      	bls.n	800ca28 <_malloc_r+0x28>
 800ca1c:	230c      	movs	r3, #12
 800ca1e:	603b      	str	r3, [r7, #0]
 800ca20:	2600      	movs	r6, #0
 800ca22:	4630      	mov	r0, r6
 800ca24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca28:	4e2e      	ldr	r6, [pc, #184]	; (800cae4 <_malloc_r+0xe4>)
 800ca2a:	f000 f89d 	bl	800cb68 <__malloc_lock>
 800ca2e:	6833      	ldr	r3, [r6, #0]
 800ca30:	461c      	mov	r4, r3
 800ca32:	bb34      	cbnz	r4, 800ca82 <_malloc_r+0x82>
 800ca34:	4629      	mov	r1, r5
 800ca36:	4638      	mov	r0, r7
 800ca38:	f7ff ffc2 	bl	800c9c0 <sbrk_aligned>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	4604      	mov	r4, r0
 800ca40:	d14d      	bne.n	800cade <_malloc_r+0xde>
 800ca42:	6834      	ldr	r4, [r6, #0]
 800ca44:	4626      	mov	r6, r4
 800ca46:	2e00      	cmp	r6, #0
 800ca48:	d140      	bne.n	800cacc <_malloc_r+0xcc>
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	4631      	mov	r1, r6
 800ca4e:	4638      	mov	r0, r7
 800ca50:	eb04 0803 	add.w	r8, r4, r3
 800ca54:	f000 f878 	bl	800cb48 <_sbrk_r>
 800ca58:	4580      	cmp	r8, r0
 800ca5a:	d13a      	bne.n	800cad2 <_malloc_r+0xd2>
 800ca5c:	6821      	ldr	r1, [r4, #0]
 800ca5e:	3503      	adds	r5, #3
 800ca60:	1a6d      	subs	r5, r5, r1
 800ca62:	f025 0503 	bic.w	r5, r5, #3
 800ca66:	3508      	adds	r5, #8
 800ca68:	2d0c      	cmp	r5, #12
 800ca6a:	bf38      	it	cc
 800ca6c:	250c      	movcc	r5, #12
 800ca6e:	4629      	mov	r1, r5
 800ca70:	4638      	mov	r0, r7
 800ca72:	f7ff ffa5 	bl	800c9c0 <sbrk_aligned>
 800ca76:	3001      	adds	r0, #1
 800ca78:	d02b      	beq.n	800cad2 <_malloc_r+0xd2>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	442b      	add	r3, r5
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	e00e      	b.n	800caa0 <_malloc_r+0xa0>
 800ca82:	6822      	ldr	r2, [r4, #0]
 800ca84:	1b52      	subs	r2, r2, r5
 800ca86:	d41e      	bmi.n	800cac6 <_malloc_r+0xc6>
 800ca88:	2a0b      	cmp	r2, #11
 800ca8a:	d916      	bls.n	800caba <_malloc_r+0xba>
 800ca8c:	1961      	adds	r1, r4, r5
 800ca8e:	42a3      	cmp	r3, r4
 800ca90:	6025      	str	r5, [r4, #0]
 800ca92:	bf18      	it	ne
 800ca94:	6059      	strne	r1, [r3, #4]
 800ca96:	6863      	ldr	r3, [r4, #4]
 800ca98:	bf08      	it	eq
 800ca9a:	6031      	streq	r1, [r6, #0]
 800ca9c:	5162      	str	r2, [r4, r5]
 800ca9e:	604b      	str	r3, [r1, #4]
 800caa0:	4638      	mov	r0, r7
 800caa2:	f104 060b 	add.w	r6, r4, #11
 800caa6:	f000 f865 	bl	800cb74 <__malloc_unlock>
 800caaa:	f026 0607 	bic.w	r6, r6, #7
 800caae:	1d23      	adds	r3, r4, #4
 800cab0:	1af2      	subs	r2, r6, r3
 800cab2:	d0b6      	beq.n	800ca22 <_malloc_r+0x22>
 800cab4:	1b9b      	subs	r3, r3, r6
 800cab6:	50a3      	str	r3, [r4, r2]
 800cab8:	e7b3      	b.n	800ca22 <_malloc_r+0x22>
 800caba:	6862      	ldr	r2, [r4, #4]
 800cabc:	42a3      	cmp	r3, r4
 800cabe:	bf0c      	ite	eq
 800cac0:	6032      	streq	r2, [r6, #0]
 800cac2:	605a      	strne	r2, [r3, #4]
 800cac4:	e7ec      	b.n	800caa0 <_malloc_r+0xa0>
 800cac6:	4623      	mov	r3, r4
 800cac8:	6864      	ldr	r4, [r4, #4]
 800caca:	e7b2      	b.n	800ca32 <_malloc_r+0x32>
 800cacc:	4634      	mov	r4, r6
 800cace:	6876      	ldr	r6, [r6, #4]
 800cad0:	e7b9      	b.n	800ca46 <_malloc_r+0x46>
 800cad2:	230c      	movs	r3, #12
 800cad4:	603b      	str	r3, [r7, #0]
 800cad6:	4638      	mov	r0, r7
 800cad8:	f000 f84c 	bl	800cb74 <__malloc_unlock>
 800cadc:	e7a1      	b.n	800ca22 <_malloc_r+0x22>
 800cade:	6025      	str	r5, [r4, #0]
 800cae0:	e7de      	b.n	800caa0 <_malloc_r+0xa0>
 800cae2:	bf00      	nop
 800cae4:	20001fe4 	.word	0x20001fe4

0800cae8 <_realloc_r>:
 800cae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caec:	4680      	mov	r8, r0
 800caee:	4614      	mov	r4, r2
 800caf0:	460e      	mov	r6, r1
 800caf2:	b921      	cbnz	r1, 800cafe <_realloc_r+0x16>
 800caf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caf8:	4611      	mov	r1, r2
 800cafa:	f7ff bf81 	b.w	800ca00 <_malloc_r>
 800cafe:	b92a      	cbnz	r2, 800cb0c <_realloc_r+0x24>
 800cb00:	f000 f83e 	bl	800cb80 <_free_r>
 800cb04:	4625      	mov	r5, r4
 800cb06:	4628      	mov	r0, r5
 800cb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0c:	f000 f884 	bl	800cc18 <_malloc_usable_size_r>
 800cb10:	4284      	cmp	r4, r0
 800cb12:	4607      	mov	r7, r0
 800cb14:	d802      	bhi.n	800cb1c <_realloc_r+0x34>
 800cb16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb1a:	d812      	bhi.n	800cb42 <_realloc_r+0x5a>
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4640      	mov	r0, r8
 800cb20:	f7ff ff6e 	bl	800ca00 <_malloc_r>
 800cb24:	4605      	mov	r5, r0
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d0ed      	beq.n	800cb06 <_realloc_r+0x1e>
 800cb2a:	42bc      	cmp	r4, r7
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	4631      	mov	r1, r6
 800cb30:	bf28      	it	cs
 800cb32:	463a      	movcs	r2, r7
 800cb34:	f7ff fee2 	bl	800c8fc <memcpy>
 800cb38:	4631      	mov	r1, r6
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	f000 f820 	bl	800cb80 <_free_r>
 800cb40:	e7e1      	b.n	800cb06 <_realloc_r+0x1e>
 800cb42:	4635      	mov	r5, r6
 800cb44:	e7df      	b.n	800cb06 <_realloc_r+0x1e>
	...

0800cb48 <_sbrk_r>:
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	4d06      	ldr	r5, [pc, #24]	; (800cb64 <_sbrk_r+0x1c>)
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	4604      	mov	r4, r0
 800cb50:	4608      	mov	r0, r1
 800cb52:	602b      	str	r3, [r5, #0]
 800cb54:	f7f8 fdd2 	bl	80056fc <_sbrk>
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	d102      	bne.n	800cb62 <_sbrk_r+0x1a>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	b103      	cbz	r3, 800cb62 <_sbrk_r+0x1a>
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	bd38      	pop	{r3, r4, r5, pc}
 800cb64:	20001fec 	.word	0x20001fec

0800cb68 <__malloc_lock>:
 800cb68:	4801      	ldr	r0, [pc, #4]	; (800cb70 <__malloc_lock+0x8>)
 800cb6a:	f000 b85d 	b.w	800cc28 <__retarget_lock_acquire_recursive>
 800cb6e:	bf00      	nop
 800cb70:	20001ff0 	.word	0x20001ff0

0800cb74 <__malloc_unlock>:
 800cb74:	4801      	ldr	r0, [pc, #4]	; (800cb7c <__malloc_unlock+0x8>)
 800cb76:	f000 b858 	b.w	800cc2a <__retarget_lock_release_recursive>
 800cb7a:	bf00      	nop
 800cb7c:	20001ff0 	.word	0x20001ff0

0800cb80 <_free_r>:
 800cb80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb82:	2900      	cmp	r1, #0
 800cb84:	d044      	beq.n	800cc10 <_free_r+0x90>
 800cb86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb8a:	9001      	str	r0, [sp, #4]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f1a1 0404 	sub.w	r4, r1, #4
 800cb92:	bfb8      	it	lt
 800cb94:	18e4      	addlt	r4, r4, r3
 800cb96:	f7ff ffe7 	bl	800cb68 <__malloc_lock>
 800cb9a:	4a1e      	ldr	r2, [pc, #120]	; (800cc14 <_free_r+0x94>)
 800cb9c:	9801      	ldr	r0, [sp, #4]
 800cb9e:	6813      	ldr	r3, [r2, #0]
 800cba0:	b933      	cbnz	r3, 800cbb0 <_free_r+0x30>
 800cba2:	6063      	str	r3, [r4, #4]
 800cba4:	6014      	str	r4, [r2, #0]
 800cba6:	b003      	add	sp, #12
 800cba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbac:	f7ff bfe2 	b.w	800cb74 <__malloc_unlock>
 800cbb0:	42a3      	cmp	r3, r4
 800cbb2:	d908      	bls.n	800cbc6 <_free_r+0x46>
 800cbb4:	6825      	ldr	r5, [r4, #0]
 800cbb6:	1961      	adds	r1, r4, r5
 800cbb8:	428b      	cmp	r3, r1
 800cbba:	bf01      	itttt	eq
 800cbbc:	6819      	ldreq	r1, [r3, #0]
 800cbbe:	685b      	ldreq	r3, [r3, #4]
 800cbc0:	1949      	addeq	r1, r1, r5
 800cbc2:	6021      	streq	r1, [r4, #0]
 800cbc4:	e7ed      	b.n	800cba2 <_free_r+0x22>
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	b10b      	cbz	r3, 800cbd0 <_free_r+0x50>
 800cbcc:	42a3      	cmp	r3, r4
 800cbce:	d9fa      	bls.n	800cbc6 <_free_r+0x46>
 800cbd0:	6811      	ldr	r1, [r2, #0]
 800cbd2:	1855      	adds	r5, r2, r1
 800cbd4:	42a5      	cmp	r5, r4
 800cbd6:	d10b      	bne.n	800cbf0 <_free_r+0x70>
 800cbd8:	6824      	ldr	r4, [r4, #0]
 800cbda:	4421      	add	r1, r4
 800cbdc:	1854      	adds	r4, r2, r1
 800cbde:	42a3      	cmp	r3, r4
 800cbe0:	6011      	str	r1, [r2, #0]
 800cbe2:	d1e0      	bne.n	800cba6 <_free_r+0x26>
 800cbe4:	681c      	ldr	r4, [r3, #0]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	6053      	str	r3, [r2, #4]
 800cbea:	4421      	add	r1, r4
 800cbec:	6011      	str	r1, [r2, #0]
 800cbee:	e7da      	b.n	800cba6 <_free_r+0x26>
 800cbf0:	d902      	bls.n	800cbf8 <_free_r+0x78>
 800cbf2:	230c      	movs	r3, #12
 800cbf4:	6003      	str	r3, [r0, #0]
 800cbf6:	e7d6      	b.n	800cba6 <_free_r+0x26>
 800cbf8:	6825      	ldr	r5, [r4, #0]
 800cbfa:	1961      	adds	r1, r4, r5
 800cbfc:	428b      	cmp	r3, r1
 800cbfe:	bf04      	itt	eq
 800cc00:	6819      	ldreq	r1, [r3, #0]
 800cc02:	685b      	ldreq	r3, [r3, #4]
 800cc04:	6063      	str	r3, [r4, #4]
 800cc06:	bf04      	itt	eq
 800cc08:	1949      	addeq	r1, r1, r5
 800cc0a:	6021      	streq	r1, [r4, #0]
 800cc0c:	6054      	str	r4, [r2, #4]
 800cc0e:	e7ca      	b.n	800cba6 <_free_r+0x26>
 800cc10:	b003      	add	sp, #12
 800cc12:	bd30      	pop	{r4, r5, pc}
 800cc14:	20001fe4 	.word	0x20001fe4

0800cc18 <_malloc_usable_size_r>:
 800cc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc1c:	1f18      	subs	r0, r3, #4
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	bfbc      	itt	lt
 800cc22:	580b      	ldrlt	r3, [r1, r0]
 800cc24:	18c0      	addlt	r0, r0, r3
 800cc26:	4770      	bx	lr

0800cc28 <__retarget_lock_acquire_recursive>:
 800cc28:	4770      	bx	lr

0800cc2a <__retarget_lock_release_recursive>:
 800cc2a:	4770      	bx	lr

0800cc2c <_init>:
 800cc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc2e:	bf00      	nop
 800cc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc32:	bc08      	pop	{r3}
 800cc34:	469e      	mov	lr, r3
 800cc36:	4770      	bx	lr

0800cc38 <_fini>:
 800cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3a:	bf00      	nop
 800cc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc3e:	bc08      	pop	{r3}
 800cc40:	469e      	mov	lr, r3
 800cc42:	4770      	bx	lr
